acf1ad6aae59ec4891b464f73f2baee4
var _setProfileDataReducer = require("../reducers/setProfileDataReducer");

var _setRideDataReducer = require("../reducers/setRideDataReducer");

var _toggleCurrentFriendReducer = require("../reducers/toggleCurrentFriendReducer");

var _toggleCurrentRideReducer = require("../reducers/toggleCurrentRideReducer");

var _toggleLoginReducer = require("../reducers/toggleLoginReducer");

var _actions = require("../actions");

describe('setProfileDataReducer', function () {
  var test;
  beforeEach(function () {
    test = {
      profile: 'profile'
    };
  });
  it('should return initial state', function () {
    var expected = test;
    var result = (0, _setProfileDataReducer.setProfileDataReducer)(undefined, test);
    expect(result).toEqual(expected);
  });
  it('should update state with SET_PROFILE_DATA', function () {
    var state = test;
    var profileData = {
      name: 'Jev',
      upcomingRides: 10
    };
    var action = {
      type: 'SET_PROFILE_DATA',
      profileData: profileData
    };
    var expected = {
      name: 'Jev',
      upcomingRides: 10
    };
    var result = (0, _setProfileDataReducer.setProfileDataReducer)(state, action);
    expect(result).toEqual(expected);
  });
});
describe('setRideDataReducer', function () {
  var test;
  beforeEach(function () {
    test = {
      ride: 'ride'
    };
  });
  it('should return initial state', function () {
    var expected = test;
    var result = (0, _setRideDataReducer.setRideDataReducer)(undefined, test);
    expect(result).toEqual(expected);
  });
  it('should update state with SET_RIDE_DATA', function () {
    var state = test;
    var rideData = {
      location: 'Evergreen',
      date: '9/13/19',
      vibe: 'chill'
    };
    var action = {
      type: 'SET_RIDE_DATA',
      rideData: rideData
    };
    var expected = {
      location: 'Evergreen',
      date: '9/13/19',
      vibe: 'chill'
    };
    var result = (0, _setRideDataReducer.setRideDataReducer)(state, action);
    expect(result).toEqual(expected);
  });
});
describe('toggleCurrentFriendReducer', function () {
  it('should return initial state', function () {
    var expected = 0;
    var result = (0, _toggleCurrentFriendReducer.toggleCurrentFriendReducer)(undefined, expected);
    expect(result).toEqual(expected);
  });
  it('should update state with TOGGLE_CURRENT_FRIEND', function () {
    var state = 0;
    var num = 2;
    var action = {
      type: 'TOGGLE_CURRENT_FRIEND',
      num: num
    };
    var expected = 2;
    var result = (0, _toggleCurrentFriendReducer.toggleCurrentFriendReducer)(state, action);
    expect(result).toEqual(expected);
  });
});
describe('toggleCurrentRideReducer', function () {
  it('should return initial state', function () {
    var expected = 0;
    var result = (0, _toggleCurrentRideReducer.toggleCurrentRideReducer)(undefined, expected);
    expect(result).toEqual(expected);
  });
  it('should update state with TOGGLE_CURRENT_RIDE', function () {
    var state = 0;
    var num = 4;
    var action = {
      type: 'TOGGLE_CURRENT_RIDE',
      num: num
    };
    var expected = 4;
    var result = (0, _toggleCurrentRideReducer.toggleCurrentRideReducer)(state, action);
    expect(result).toEqual(expected);
  });
});
describe('toggleLoginReducer', function () {
  it('should return initial state', function () {
    var expected = false;
    var result = (0, _toggleLoginReducer.toggleLoginReducer)(undefined, expected);
    expect(result).toEqual(expected);
  });
  it('should update state with TOGGLE_LOGIN', function () {
    var state = false;
    var bool = !state;
    var action = {
      type: 'TOGGLE_LOGIN',
      bool: bool
    };
    var expected = true;
    var result = (0, _toggleLoginReducer.toggleLoginReducer)(state, action);
    expect(result).toEqual(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,