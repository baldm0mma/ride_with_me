{"version":3,"sources":["TextInputOutlined.js"],"names":["AnimatedText","Animated","createAnimatedComponent","Text","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","LABEL_PADDING_HORIZONTAL","RANDOM_VALUE_TO_CENTER_LABEL","TextInputOutlined","props","disabled","label","error","selectionColor","underlineColor","style","theme","render","multiline","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","fontFamily","regular","hasActiveOutline","focused","StyleSheet","flatten","backgroundColor","background","inputTextColor","activeColor","outlineColor","placeholderColor","containerStyle","text","alpha","rgb","string","primary","placeholder","labelHalfWidth","labelLayout","width","baseLabelTranslateX","I18nManager","isRTL","labelStyle","fontSize","transform","translateX","interpolate","inputRange","outputRange","value","translateY","labeled","scale","styles","outline","borderRadius","roundness","borderWidth","borderColor","outlinedLabelBackground","opacity","scaleX","absoluteFill","measured","placeholderOutlined","color","ref","placeholderTextColor","editable","underlineColorAndroid","input","inputOutlined","textAlignVertical","React","Component","defaultProps","create","position","left","paddingHorizontal","top","right","bottom","flexGrow","margin","minHeight","textAlign","zIndex","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport type { ChildTextInputProps, RenderProps } from './types';\n\nconst AnimatedText = Animated.createAnimatedComponent(Text);\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -29;\nconst MAXIMIZED_LABEL_FONT_SIZE = 16;\nconst MINIMIZED_LABEL_FONT_SIZE = 12;\nconst LABEL_WIGGLE_X_OFFSET = 4;\nconst LABEL_PADDING_HORIZONTAL = 12;\nconst RANDOM_VALUE_TO_CENTER_LABEL = 4; // Don't know why 4, but it works\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const fontFamily = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n    const { backgroundColor = colors.background } =\n      StyleSheet.flatten(style) || {};\n\n    let inputTextColor,\n      activeColor,\n      outlineColor,\n      placeholderColor,\n      containerStyle;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n    }\n\n    const labelHalfWidth = parentState.labelLayout.width / 2;\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) *\n      labelHalfWidth;\n\n    const labelStyle = {\n      fontFamily,\n      fontSize: MAXIMIZED_LABEL_FONT_SIZE,\n      transform: [\n        {\n          // Wiggle the label when there's an error\n          translateX: parentState.error.interpolate({\n            inputRange: [0, 0.5, 1],\n            outputRange: [\n              0,\n              parentState.value && error ? LABEL_WIGGLE_X_OFFSET : 0,\n              0,\n            ],\n          }),\n        },\n        {\n          // Move label to top\n          translateY: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [OUTLINE_MINIMIZED_LABEL_Y_OFFSET, 0],\n          }),\n        },\n        {\n          // Make label smaller\n          scale: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\n              MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE,\n              1,\n            ],\n          }),\n        },\n        {\n          // Offset label scale since RN doesn't support transform origin\n          translateX: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\n              baseLabelTranslateX > 0\n                ? baseLabelTranslateX +\n                  labelHalfWidth / LABEL_PADDING_HORIZONTAL -\n                  RANDOM_VALUE_TO_CENTER_LABEL\n                : baseLabelTranslateX -\n                  labelHalfWidth / LABEL_PADDING_HORIZONTAL +\n                  RANDOM_VALUE_TO_CENTER_LABEL,\n              0,\n            ],\n          }),\n        },\n      ],\n    };\n\n    return (\n      <View style={[containerStyle, style]}>\n        {/* \n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android \n          */}\n        <View\n          pointerEvents=\"none\"\n          style={[\n            styles.outline,\n            {\n              borderRadius: theme.roundness,\n              borderWidth: hasActiveOutline ? 2 : 1,\n              borderColor: hasActiveOutline ? activeColor : outlineColor,\n            },\n          ]}\n        />\n\n        {label ? (\n          // The input label stays on top of the outline\n          // The background of the label covers the outline so it looks cut off\n          // To achieve the effect, we position the actual label with a background on top of it\n          // We set the color of the text to transparent so only the background is visible\n          <AnimatedText\n            pointerEvents=\"none\"\n            style={[\n              styles.outlinedLabelBackground,\n              {\n                backgroundColor,\n                fontFamily,\n                fontSize: MINIMIZED_LABEL_FONT_SIZE,\n                // Hide the background when scale will be 0\n                // There's a bug in RN which makes scale: 0 act weird\n                opacity: parentState.labeled.interpolate({\n                  inputRange: [0, 0.9, 1],\n                  outputRange: [1, 1, 0],\n                }),\n                transform: [\n                  {\n                    // Animate the scale when label is moved up\n                    scaleX: parentState.labeled.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [1, 0],\n                    }),\n                  },\n                ],\n              },\n            ]}\n            numberOfLines={1}\n          >\n            {label}\n          </AnimatedText>\n        ) : null}\n\n        {label ? (\n          // Position colored placeholder and gray placeholder on top of each other and crossfade them\n          // This gives the effect of animating the color, but allows us to use native driver\n          <View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              {\n                opacity:\n                  // Hide the label in minimized state until we measure it's width\n                  parentState.value || parentState.focused\n                    ? parentState.labelLayout.measured\n                      ? 1\n                      : 0\n                    : 1,\n              },\n            ]}\n          >\n            <AnimatedText\n              onLayout={onLayoutAnimatedText}\n              style={[\n                styles.placeholder,\n                styles.placeholderOutlined,\n                labelStyle,\n                {\n                  color: activeColor,\n                  opacity: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [hasActiveOutline ? 1 : 0, 0],\n                  }),\n                },\n              ]}\n              numberOfLines={1}\n            >\n              {label}\n            </AnimatedText>\n            <AnimatedText\n              style={[\n                styles.placeholder,\n                styles.placeholderOutlined,\n                labelStyle,\n                {\n                  color: placeholderColor,\n                  opacity: hasActiveOutline ? parentState.labeled : 1,\n                },\n              ]}\n              numberOfLines={1}\n            >\n              {label}\n            </AnimatedText>\n          </View>\n        ) : null}\n\n        {render(\n          ({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderColor,\n            editable: !disabled,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              styles.inputOutlined,\n              {\n                color: inputTextColor,\n                fontFamily,\n                textAlignVertical: multiline ? 'top' : 'center',\n              },\n            ],\n          }: RenderProps)\n        )}\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    fontSize: 16,\n    paddingHorizontal: LABEL_PADDING_HORIZONTAL,\n  },\n  placeholderOutlined: {\n    top: 25,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  outlinedLabelBackground: {\n    position: 'absolute',\n    top: 0,\n    left: 8,\n    paddingHorizontal: 4,\n    color: 'transparent',\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: 12,\n    fontSize: 16,\n    margin: 0,\n    minHeight: 58,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 20,\n    paddingBottom: 16,\n    minHeight: 64,\n  },\n});\n"]}