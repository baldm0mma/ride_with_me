{"version":3,"sources":["Banner.js"],"names":["ELEVATION","Banner","state","position","Animated","Value","props","visible","layout","height","measured","_handleLayout","nativeEvent","setState","_toggle","_show","_hide","timing","duration","toValue","start","prevProps","image","children","actions","style","theme","rest","multiply","translateY","add","styles","container","wrapper","absolute","transform","opacity","content","size","message","map","i","label","others","button","React","Component","StyleSheet","create","elevation","overflow","top","width","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","flex"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\nimport shadow from '../styles/shadow';\n\nconst ELEVATION = 1;\n\ntype Props = $RemoveChildren<typeof Surface> & {|\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean,\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: string,\n  /**\n   * Callback that returns an image to display inside banner.\n   */\n  image?: (props: { size: number }) => React.Node,\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions: Array<{\n    label: string,\n    onPress: () => mixed,\n  }>,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  position: Animated.Value,\n  layout: {\n    height: number,\n    measured: boolean,\n  },\n};\n\ntype NativeEvent = {\n  nativeEvent: {\n    layout: {\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n    },\n  },\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: true,\n *   };\n *\n *   render() {\n *     return (\n *       <Banner\n *         visible={this.state.visible}\n *         actions={[\n *           {\n *             label: 'Fix it',\n *             onPress: () => this.setState({ visible: false }),\n *           },\n *           {\n *             label: 'Learn more',\n *             onPress: () => this.setState({ visible: false }),\n *           },\n *         ]}\n *         image={({ size }) =>\n *           <Image\n *             source={{ uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4' }}\n *             style={{\n *               width: size,\n *               height: size,\n *             }}\n *           />\n *         }\n *       >\n *         There was a problem processing a transaction on your credit card.\n *       </Banner>\n *     );\n *   }\n * }\n * ```\n */\nclass Banner extends React.Component<Props, State> {\n  state = {\n    position: new Animated.Value(this.props.visible ? 1 : 0),\n    layout: {\n      height: 0,\n      measured: false,\n    },\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.visible !== this.props.visible) {\n      this._toggle();\n    }\n  }\n\n  _handleLayout = ({ nativeEvent }: NativeEvent) => {\n    const { height } = nativeEvent.layout;\n\n    this.setState({ layout: { height, measured: true } });\n  };\n\n  _toggle = () => {\n    if (this.props.visible) {\n      this._show();\n    } else {\n      this._hide();\n    }\n  };\n\n  _show = () => {\n    Animated.timing(this.state.position, {\n      duration: 250,\n      toValue: 1,\n    }).start();\n  };\n\n  _hide = () => {\n    Animated.timing(this.state.position, {\n      duration: 200,\n      toValue: 0,\n    }).start();\n  };\n\n  render() {\n    const {\n      visible,\n      image,\n      children,\n      actions,\n      style,\n      theme,\n      ...rest\n    } = this.props;\n    const { position, layout } = this.state;\n\n    // The banner animation has 2 parts:\n    // 1. Blank spacer element which animates its height to move the content\n    // 2. Actual banner which animates its translateY\n    // In initial render, we position everything normally and measure the height of the banner\n    // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n    // We need this because we need to move the content below as if banner's height was being animated\n    // However we can't animated banner's height directly as it'll also resize the content inside\n    const height = Animated.multiply(position, layout.height);\n\n    const translateY = Animated.multiply(\n      Animated.add(position, -1),\n      layout.height\n    );\n\n    return (\n      <Surface {...rest} style={[styles.container, shadow(ELEVATION), style]}>\n        <View style={styles.wrapper}>\n          <Animated.View style={{ height }} />\n          <Animated.View\n            onLayout={this._handleLayout}\n            style={[\n              layout.measured || !visible\n                ? // If we have measured banner's height or it's invisible,\n                  // Position it absolutely, the layout will be taken care of the spacer\n                  [styles.absolute, { transform: [{ translateY }] }]\n                : // Otherwise position it normally\n                  null,\n              !layout.measured && !visible\n                ? // If we haven't measured banner's height yet and it's invisible,\n                  // hide it with opacity: 0 so user doesn't see it\n                  { opacity: 0 }\n                : null,\n            ]}\n          >\n            <View style={styles.content}>\n              {image ? (\n                <View style={styles.image}>{image({ size: 40 })}</View>\n              ) : null}\n              <Text style={styles.message}>{children}</Text>\n            </View>\n            <View style={styles.actions}>\n              {actions.map(({ label, ...others }, i) => (\n                <Button\n                  key={/* eslint-disable-line react/no-array-index-key */ i}\n                  compact\n                  mode=\"text\"\n                  style={styles.button}\n                  {...others}\n                >\n                  {label}\n                </Button>\n              ))}\n            </View>\n          </Animated.View>\n        </View>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION,\n  },\n  wrapper: {\n    overflow: 'hidden',\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  image: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n});\n\nexport default withTheme(Banner);\n"]}