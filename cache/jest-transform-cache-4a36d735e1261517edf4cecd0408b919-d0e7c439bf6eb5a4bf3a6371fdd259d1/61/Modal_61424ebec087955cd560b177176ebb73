ceecb5ed8ffe552214463cd1759c5cdb
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Modal = function (_React$Component) {
  (0, _inherits2.default)(Modal, _React$Component);

  function Modal() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      opacity: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
      rendered: _this.props.visible
    };

    _this._handleBack = function () {
      if (_this.props.dismissable) {
        _this._hideModal();
      }

      return true;
    };

    _this._showModal = function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);

      _reactNative.BackHandler.addEventListener('hardwareBackPress', _this._handleBack);

      _reactNative.Animated.timing(_this.state.opacity, {
        toValue: 1,
        duration: 280,
        easing: _reactNative.Easing.ease,
        useNativeDriver: true
      }).start();
    };

    _this._hideModal = function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);

      _reactNative.Animated.timing(_this.state.opacity, {
        toValue: 0,
        duration: 280,
        easing: _reactNative.Easing.ease,
        useNativeDriver: true
      }).start(function (_ref) {
        var finished = _ref.finished;

        if (!finished) {
          return;
        }

        if (_this.props.visible && _this.props.onDismiss) {
          _this.props.onDismiss();
        }

        if (_this.props.visible) {
          _this._showModal();
        } else {
          _this.setState({
            rendered: false
          });
        }
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        if (this.props.visible) {
          this._showModal();
        } else {
          this._hideModal();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this._handleBack);
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.state.rendered) return null;
      var _this$props = this.props,
          children = _this$props.children,
          dismissable = _this$props.dismissable,
          theme = _this$props.theme,
          contentContainerStyle = _this$props.contentContainerStyle;
      var colors = theme.colors;
      return React.createElement(_reactNative.Animated.View, {
        accessibilityViewIsModal: true,
        accessibilityLiveRegion: "polite",
        style: _reactNative.StyleSheet.absoluteFill
      }, React.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: dismissable ? this._hideModal : undefined
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.backdrop, {
          backgroundColor: colors.backdrop,
          opacity: this.state.opacity
        }]
      })), React.createElement(_reactNative.View, {
        pointerEvents: "box-none",
        style: styles.wrapper
      }, React.createElement(_Surface.default, {
        style: [{
          opacity: this.state.opacity
        }, styles.content, contentContainerStyle]
      }, children)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.visible && !prevState.rendered) {
        return {
          rendered: true
        };
      }

      return null;
    }
  }]);
  return Modal;
}(React.Component);

Modal.defaultProps = {
  dismissable: true,
  visible: false
};
(0, _reactLifecyclesCompat.polyfill)(Modal);

var _default = (0, _theming.withTheme)(Modal);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1
  },
  wrapper: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'center'
  }),
  content: {
    backgroundColor: 'transparent',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,