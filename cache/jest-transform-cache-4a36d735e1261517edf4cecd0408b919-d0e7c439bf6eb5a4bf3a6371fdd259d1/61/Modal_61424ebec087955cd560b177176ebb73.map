{"version":3,"sources":["Modal.js"],"names":["Modal","state","opacity","Animated","Value","props","visible","rendered","_handleBack","dismissable","_hideModal","_showModal","BackHandler","removeEventListener","addEventListener","timing","toValue","duration","easing","Easing","ease","useNativeDriver","start","finished","onDismiss","setState","prevProps","children","theme","contentContainerStyle","colors","StyleSheet","absoluteFill","undefined","styles","backdrop","backgroundColor","wrapper","content","nextProps","prevState","React","Component","defaultProps","create","flex","absoluteFillObject","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  Easing,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  BackHandler,\n} from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\ntype Props = {|\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean,\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => mixed,\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean,\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.Node,\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  opacity: Animated.Value,\n  rendered: boolean,\n};\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showModal = () => this.setState({ visible: true });\n *   _hideModal = () => this.setState({ visible: false });\n *\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *      <Provider>\n *        <Portal>\n *          <Modal visible={visible} onDismiss={this._hideModal}>\n *            <Text>Example Modal</Text>\n *          </Modal>\n *          <Button\n *            style={{ marginTop: 30 }}\n *            onPress={this._showModal}\n *          >\n *            Show\n *          </Button>\n *        </Portal>\n *      </Provider>\n *     );\n *   }\n * }\n * ```\n */\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this._showModal();\n      } else {\n        this._hideModal();\n      }\n    }\n  }\n\n  _handleBack = () => {\n    if (this.props.dismissable) {\n      this._hideModal();\n    }\n    return true;\n  };\n\n  _showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this._handleBack);\n    Animated.timing(this.state.opacity, {\n      toValue: 1,\n      duration: 280,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    Animated.timing(this.state.opacity, {\n      toValue: 0,\n      duration: 280,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n      if (this.props.visible) {\n        this._showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n  }\n\n  render() {\n    if (!this.state.rendered) return null;\n\n    const { children, dismissable, theme, contentContainerStyle } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n      >\n        <TouchableWithoutFeedback\n          onPress={dismissable ? this._hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity: this.state.opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <View pointerEvents=\"box-none\" style={styles.wrapper}>\n          <Surface\n            style={[\n              { opacity: this.state.opacity },\n              styles.content,\n              contentContainerStyle,\n            ]}\n          >\n            {children}\n          </Surface>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\npolyfill(Modal);\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}