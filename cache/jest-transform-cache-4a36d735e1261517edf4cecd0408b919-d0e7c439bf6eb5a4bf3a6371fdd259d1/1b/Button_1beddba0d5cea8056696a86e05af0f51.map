{"version":3,"sources":["Button.js"],"names":["Button","state","elevation","Animated","Value","props","mode","_handlePressIn","timing","toValue","duration","start","_handlePressOut","disabled","compact","dark","loading","icon","buttonColor","color","children","uppercase","accessibilityLabel","onPress","style","theme","contentStyle","rest","colors","roundness","fontFamily","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","light","rippleColor","buttonStyle","borderRadius","touchableStyle","textStyle","styles","button","undefined","content","label","compactLabel","React","Children","map","child","toUpperCase","Component","defaultProps","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { ActivityIndicator, Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport type { Theme } from '../types';\n\ntype Props = React.ElementConfig<typeof Surface> & {|\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained',\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean,\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean,\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string,\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean,\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource,\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Label text of the button.\n   */\n  children: React.Node,\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase: boolean,\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: any,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  elevation: Animated.Value,\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"add-a-photo\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  _handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200,\n      }).start();\n    }\n  };\n\n  _handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      style,\n      theme,\n      contentStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const fontFamily = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).light();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = { borderRadius: roundness };\n    const textStyle = { color: textColor, fontFamily };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation },\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onPressIn={this._handlePressIn}\n          onPressOut={this._handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : undefined}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={16} color={textColor} />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size=\"small\"\n                color={textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                textStyle,\n                { fontFamily },\n              ]}\n            >\n              {React.Children.map(\n                children,\n                child =>\n                  typeof child === 'string' && uppercase\n                    ? child.toUpperCase()\n                    : child\n              )}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n});\n\nexport default withTheme(Button);\n"]}