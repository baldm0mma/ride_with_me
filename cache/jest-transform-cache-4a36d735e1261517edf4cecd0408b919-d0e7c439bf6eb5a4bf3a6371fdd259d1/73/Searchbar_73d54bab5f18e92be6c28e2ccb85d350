e3251f73d2167cb5ba7af3cb7aaa4992
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

var Searchbar = function (_React$Component) {
  (0, _inherits2.default)(Searchbar, _React$Component);

  function Searchbar() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Searchbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Searchbar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this._handleClearPress = function () {
      _this.clear();

      _this.props.onChangeText && _this.props.onChangeText('');
    };

    return _this;
  }

  (0, _createClass2.default)(Searchbar, [{
    key: "setNativeProps",
    value: function setNativeProps() {
      var _this$_root;

      return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this._root && this._root.isFocused();
    }
  }, {
    key: "clear",
    value: function clear() {
      return this._root && this._root.clear();
    }
  }, {
    key: "focus",
    value: function focus() {
      return this._root && this._root.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      return this._root && this._root.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          placeholder = _this$props.placeholder,
          onIconPress = _this$props.onIconPress,
          icon = _this$props.icon,
          value = _this$props.value,
          theme = _this$props.theme,
          style = _this$props.style,
          customIconColor = _this$props.iconColor,
          clearIcon = _this$props.clearIcon,
          inputStyle = _this$props.inputStyle,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["placeholder", "onIconPress", "icon", "value", "theme", "style", "iconColor", "clearIcon", "inputStyle"]);
      var colors = theme.colors,
          roundness = theme.roundness,
          dark = theme.dark,
          fonts = theme.fonts;
      var textColor = colors.text;
      var fontFamily = fonts.regular;
      var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());
      var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
      return React.createElement(_Surface.default, {
        style: [{
          borderRadius: roundness,
          elevation: 4
        }, styles.container, style]
      }, React.createElement(_IconButton.default, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: onIconPress,
        color: iconColor,
        icon: icon || 'search'
      }), React.createElement(_reactNative.TextInput, (0, _extends2.default)({
        style: [styles.input, {
          color: textColor,
          fontFamily: fontFamily
        }, inputStyle],
        placeholder: placeholder || '',
        placeholderTextColor: colors.placeholder,
        selectionColor: colors.primary,
        underlineColorAndroid: "transparent",
        returnKeyType: "search",
        keyboardAppearance: dark ? 'dark' : 'light',
        accessibilityTraits: "search",
        accessibilityRole: "search",
        ref: function ref(c) {
          _this2._root = c;
        },
        value: value
      }, rest)), React.createElement(_IconButton.default, {
        borderless: true,
        disabled: !value,
        color: value ? iconColor : 'rgba(255, 255, 255, 0)',
        rippleColor: rippleColor,
        onPress: this._handleClearPress,
        icon: clearIcon || 'close',
        accessibilityTraits: "button",
        accessibilityComponentType: "button",
        accessibilityRole: "button"
      }));
    }
  }]);
  return Searchbar;
}(React.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  input: {
    flex: 1,
    fontSize: 18,
    paddingLeft: 8,
    alignSelf: 'stretch',
    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
    minWidth: 0
  }
});

var _default = (0, _theming.withTheme)(Searchbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,