{"version":3,"sources":["Searchbar.js"],"names":["Searchbar","_handleClearPress","clear","props","onChangeText","_root","setNativeProps","isFocused","focus","blur","placeholder","onIconPress","icon","value","theme","style","customIconColor","iconColor","clearIcon","inputStyle","rest","colors","roundness","dark","fonts","textColor","text","fontFamily","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","input","color","primary","c","React","Component","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","I18nManager","isRTL","minWidth"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet, TextInput, I18nManager } from 'react-native';\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\nimport type { IconSource } from './Icon';\n\ntype Props = React.ElementConfig<typeof TextInput> & {|\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string,\n  /**\n   * The value of the text input.\n   */\n  value: string,\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource,\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void,\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => mixed,\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: any,\n  style?: any,\n\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string,\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource,\n|};\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     firstQuery: '',\n *   };\n *\n *   render() {\n *     const { firstQuery } = this.state;\n *     return (\n *       <Searchbar\n *         placeholder=\"Search\"\n *         onChangeText={query => { this.setState({ firstQuery: query }); }}\n *         value={firstQuery}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Searchbar extends React.Component<Props> {\n  _handleClearPress = () => {\n    this.clear();\n    this.props.onChangeText && this.props.onChangeText('');\n  };\n\n  _root: ?TextInput;\n\n  /**\n   * @internal\n   */\n  setNativeProps(...args) {\n    return this._root && this._root.setNativeProps(...args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this._root && this._root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this._root && this._root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this._root && this._root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this._root && this._root.blur();\n  }\n\n  render() {\n    const {\n      placeholder,\n      onIconPress,\n      icon,\n      value,\n      theme,\n      style,\n      iconColor: customIconColor,\n      clearIcon,\n      inputStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const fontFamily = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark\n        ? textColor\n        : color(textColor)\n            .alpha(0.54)\n            .rgb()\n            .string());\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={icon || 'search'}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, fontFamily }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={c => {\n            this._root = c;\n          }}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={this._handleClearPress}\n          icon={clearIcon || 'close'}\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}