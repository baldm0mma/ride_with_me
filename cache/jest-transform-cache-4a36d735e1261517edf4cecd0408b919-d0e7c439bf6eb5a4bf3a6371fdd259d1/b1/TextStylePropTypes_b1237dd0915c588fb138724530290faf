6e848bbc850cc02d8548a618dd4c535d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedColorPropType = require("../DeprecatedPropTypes/DeprecatedColorPropType");

var ReactPropTypes = require('prop-types');

var DeprecatedViewStylePropTypes = require("../DeprecatedPropTypes/DeprecatedViewStylePropTypes");

var TextStylePropTypes = _objectSpread({}, DeprecatedViewStylePropTypes, {
  color: DeprecatedColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: DeprecatedColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: DeprecatedColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSIsInJlcXVpcmUiLCJSZWFjdFByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJUZXh0U3R5bGVQcm9wVHlwZXMiLCJjb2xvciIsImZvbnRGYW1pbHkiLCJzdHJpbmciLCJmb250U2l6ZSIsIm51bWJlciIsImZvbnRTdHlsZSIsIm9uZU9mIiwiZm9udFdlaWdodCIsImZvbnRWYXJpYW50IiwiYXJyYXlPZiIsInRleHRTaGFkb3dPZmZzZXQiLCJzaGFwZSIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dFNoYWRvd1JhZGl1cyIsInRleHRTaGFkb3dDb2xvciIsImxldHRlclNwYWNpbmciLCJsaW5lSGVpZ2h0IiwidGV4dEFsaWduIiwidGV4dEFsaWduVmVydGljYWwiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJib29sIiwidGV4dERlY29yYXRpb25MaW5lIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJ0ZXh0VHJhbnNmb3JtIiwid3JpdGluZ0RpcmVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsdUJBQXVCLEdBQUdDLE9BQU8sa0RBQXZDOztBQUNBLElBQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLFlBQUQsQ0FBOUI7O0FBQ0EsSUFBTUUsNEJBQTRCLEdBQUdGLE9BQU8sdURBQTVDOztBQUVBLElBQU1HLGtCQUFrQixxQkFDbkJELDRCQURtQjtBQUd0QkUsRUFBQUEsS0FBSyxFQUFFTCx1QkFIZTtBQUl0Qk0sRUFBQUEsVUFBVSxFQUFFSixjQUFjLENBQUNLLE1BSkw7QUFLdEJDLEVBQUFBLFFBQVEsRUFBRU4sY0FBYyxDQUFDTyxNQUxIO0FBTXRCQyxFQUFBQSxTQUFTLEVBQUVSLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUFDLFFBQUQsRUFBVyxRQUFYLENBQXJCLENBTlc7QUFZdEJDLEVBQUFBLFVBQVUsRUFBRVYsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQy9CLFFBRCtCLEVBRS9CLE1BRitCLEVBRy9CLEtBSCtCLEVBSS9CLEtBSitCLEVBSy9CLEtBTCtCLEVBTS9CLEtBTitCLEVBTy9CLEtBUCtCLEVBUS9CLEtBUitCLEVBUy9CLEtBVCtCLEVBVS9CLEtBVitCLEVBVy9CLEtBWCtCLENBQXJCLENBWlU7QUE0QnRCRSxFQUFBQSxXQUFXLEVBQUVYLGNBQWMsQ0FBQ1ksT0FBZixDQUNYWixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDbkIsWUFEbUIsRUFFbkIsZUFGbUIsRUFHbkIsYUFIbUIsRUFJbkIsY0FKbUIsRUFLbkIsbUJBTG1CLENBQXJCLENBRFcsQ0E1QlM7QUFxQ3RCSSxFQUFBQSxnQkFBZ0IsRUFBRWIsY0FBYyxDQUFDYyxLQUFmLENBQXFCO0FBQ3JDQyxJQUFBQSxLQUFLLEVBQUVmLGNBQWMsQ0FBQ08sTUFEZTtBQUVyQ1MsSUFBQUEsTUFBTSxFQUFFaEIsY0FBYyxDQUFDTztBQUZjLEdBQXJCLENBckNJO0FBeUN0QlUsRUFBQUEsZ0JBQWdCLEVBQUVqQixjQUFjLENBQUNPLE1BekNYO0FBMEN0QlcsRUFBQUEsZUFBZSxFQUFFcEIsdUJBMUNLO0FBOEN0QnFCLEVBQUFBLGFBQWEsRUFBRW5CLGNBQWMsQ0FBQ08sTUE5Q1I7QUErQ3RCYSxFQUFBQSxVQUFVLEVBQUVwQixjQUFjLENBQUNPLE1BL0NMO0FBb0R0QmMsRUFBQUEsU0FBUyxFQUFFckIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQzlCLE1BRDhCLEVBRTlCLE1BRjhCLEVBRzlCLE9BSDhCLEVBSTlCLFFBSjhCLEVBSzlCLFNBTDhCLENBQXJCLENBcERXO0FBOER0QmEsRUFBQUEsaUJBQWlCLEVBQUV0QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDdEMsTUFEc0MsRUFFdEMsS0FGc0MsRUFHdEMsUUFIc0MsRUFJdEMsUUFKc0MsQ0FBckIsQ0E5REc7QUEwRXRCYyxFQUFBQSxrQkFBa0IsRUFBRXZCLGNBQWMsQ0FBQ3dCLElBMUViO0FBMkV0QkMsRUFBQUEsa0JBQWtCLEVBQUV6QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDdkMsTUFEdUMsRUFFdkMsV0FGdUMsRUFHdkMsY0FIdUMsRUFJdkMsd0JBSnVDLENBQXJCLENBM0VFO0FBb0Z0QmlCLEVBQUFBLG1CQUFtQixFQUFFMUIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ3hDLE9BRHdDLEVBRXhDLFFBRndDLEVBR3hDLFFBSHdDLEVBSXhDLFFBSndDLENBQXJCLENBcEZDO0FBNkZ0QmtCLEVBQUFBLG1CQUFtQixFQUFFN0IsdUJBN0ZDO0FBOEZ0QjhCLEVBQUFBLGFBQWEsRUFBRTVCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUNsQyxNQURrQyxFQUVsQyxZQUZrQyxFQUdsQyxXQUhrQyxFQUlsQyxXQUprQyxDQUFyQixDQTlGTztBQXVHdEJvQixFQUFBQSxnQkFBZ0IsRUFBRTdCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUFDLE1BQUQsRUFBcUIsS0FBckIsRUFBNEIsS0FBNUIsQ0FBckI7QUF2R0ksRUFBeEI7O0FBMEdBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isa0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRDb2xvclByb3BUeXBlJyk7XG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IERlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMnKTtcblxuY29uc3QgVGV4dFN0eWxlUHJvcFR5cGVzID0ge1xuICAuLi5EZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzLFxuXG4gIGNvbG9yOiBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSxcbiAgZm9udEZhbWlseTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBmb250U2l6ZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBmb250U3R5bGU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsnbm9ybWFsJywgJ2l0YWxpYyddKSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBmb250IHdlaWdodC4gVGhlIHZhbHVlcyAnbm9ybWFsJyBhbmQgJ2JvbGQnIGFyZSBzdXBwb3J0ZWQgZm9yXG4gICAqIG1vc3QgZm9udHMuIE5vdCBhbGwgZm9udHMgaGF2ZSBhIHZhcmlhbnQgZm9yIGVhY2ggb2YgdGhlIG51bWVyaWMgdmFsdWVzLFxuICAgKiBpbiB0aGF0IGNhc2UgdGhlIGNsb3Nlc3Qgb25lIGlzIGNob3Nlbi5cbiAgICovXG4gIGZvbnRXZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9ybWFsJyAvKmRlZmF1bHQqLyxcbiAgICAnYm9sZCcsXG4gICAgJzEwMCcsXG4gICAgJzIwMCcsXG4gICAgJzMwMCcsXG4gICAgJzQwMCcsXG4gICAgJzUwMCcsXG4gICAgJzYwMCcsXG4gICAgJzcwMCcsXG4gICAgJzgwMCcsXG4gICAgJzkwMCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZm9udFZhcmlhbnQ6IFJlYWN0UHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICAgJ3NtYWxsLWNhcHMnLFxuICAgICAgJ29sZHN0eWxlLW51bXMnLFxuICAgICAgJ2xpbmluZy1udW1zJyxcbiAgICAgICd0YWJ1bGFyLW51bXMnLFxuICAgICAgJ3Byb3BvcnRpb25hbC1udW1zJyxcbiAgICBdKSxcbiAgKSxcbiAgdGV4dFNoYWRvd09mZnNldDogUmVhY3RQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGVpZ2h0OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIH0pLFxuICB0ZXh0U2hhZG93UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIHRleHRTaGFkb3dDb2xvcjogRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBsZXR0ZXJTcGFjaW5nOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGxpbmVIZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0ZXh0IGFsaWdubWVudC4gVGhlIHZhbHVlICdqdXN0aWZ5JyBpcyBvbmx5IHN1cHBvcnRlZCBvbiBpT1MgYW5kXG4gICAqIGZhbGxiYWNrcyB0byBgbGVmdGAgb24gQW5kcm9pZC5cbiAgICovXG4gIHRleHRBbGlnbjogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdhdXRvJyAvKmRlZmF1bHQqLyxcbiAgICAnbGVmdCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnY2VudGVyJyxcbiAgICAnanVzdGlmeScsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHRleHRBbGlnblZlcnRpY2FsOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nIC8qZGVmYXVsdCovLFxuICAgICd0b3AnLFxuICAgICdib3R0b20nLFxuICAgICdjZW50ZXInLFxuICBdKSxcbiAgLyoqXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIHJlbW92ZSBleHRyYSBmb250IHBhZGRpbmcgaW50ZW5kZWQgdG8gbWFrZSBzcGFjZSBmb3IgY2VydGFpbiBhc2NlbmRlcnMgLyBkZXNjZW5kZXJzLlxuICAgKiBXaXRoIHNvbWUgZm9udHMsIHRoaXMgcGFkZGluZyBjYW4gbWFrZSB0ZXh0IGxvb2sgc2xpZ2h0bHkgbWlzYWxpZ25lZCB3aGVuIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAqIEZvciBiZXN0IHJlc3VsdHMgYWxzbyBzZXQgYHRleHRBbGlnblZlcnRpY2FsYCB0byBgY2VudGVyYC4gRGVmYXVsdCBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgaW5jbHVkZUZvbnRQYWRkaW5nOiBSZWFjdFByb3BUeXBlcy5ib29sLFxuICB0ZXh0RGVjb3JhdGlvbkxpbmU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScgLypkZWZhdWx0Ki8sXG4gICAgJ3VuZGVybGluZScsXG4gICAgJ2xpbmUtdGhyb3VnaCcsXG4gICAgJ3VuZGVybGluZSBsaW5lLXRocm91Z2gnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHRleHREZWNvcmF0aW9uU3R5bGU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnc29saWQnIC8qZGVmYXVsdCovLFxuICAgICdkb3VibGUnLFxuICAgICdkb3R0ZWQnLFxuICAgICdkYXNoZWQnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHRleHREZWNvcmF0aW9uQ29sb3I6IERlcHJlY2F0ZWRDb2xvclByb3BUeXBlLFxuICB0ZXh0VHJhbnNmb3JtOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vbmUnIC8qZGVmYXVsdCovLFxuICAgICdjYXBpdGFsaXplJyxcbiAgICAndXBwZXJjYXNlJyxcbiAgICAnbG93ZXJjYXNlJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB3cml0aW5nRGlyZWN0aW9uOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nIC8qZGVmYXVsdCovLCAnbHRyJywgJ3J0bCddKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dFN0eWxlUHJvcFR5cGVzO1xuIl19