{"version":3,"sources":["FAB.js"],"names":["FAB","state","visibility","Animated","Value","props","visible","prevProps","timing","toValue","duration","useNativeDriver","start","small","icon","label","accessibilityLabel","customColor","color","disabled","onPress","theme","style","loading","rest","disabledColor","dark","white","black","alpha","rgb","string","StyleSheet","flatten","backgroundColor","colors","accent","foregroundColor","light","rippleColor","opacity","transform","scale","styles","container","undefined","touchable","content","extended","standard","fontFamily","fonts","medium","toUpperCase","React","Component","Group","FABGroup","defaultProps","create","borderRadius","elevation","height","width","paddingHorizontal","flexDirection","alignItems","justifyContent","marginHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport FABGroup from './FABGroup';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { Theme, $RemoveChildren } from '../../types';\nimport type { IconSource } from './../Icon';\n\ntype Props = $RemoveChildren<typeof Surface> & {|\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource,\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string,\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string,\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean,\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string,\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible: boolean,\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  visibility: Animated.Value,\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"add\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nclass FAB extends React.Component<Props, State> {\n  // @component ./FABGroup.js\n  static Group = FABGroup;\n\n  static defaultProps = {\n    visible: true,\n  };\n\n  state = {\n    visibility: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.visible === prevProps.visible) {\n      return;\n    }\n\n    if (this.props.visible) {\n      Animated.timing(this.state.visibility, {\n        toValue: 1,\n        duration: 200,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(this.state.visibility, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      small,\n      icon,\n      label,\n      accessibilityLabel = label,\n      color: customColor,\n      disabled,\n      onPress,\n      theme,\n      style,\n      visible,\n      loading,\n      ...rest\n    } = this.props;\n    const { visibility } = this.state;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n      StyleSheet.flatten(style) || {};\n\n    let foregroundColor;\n\n    if (typeof customColor !== 'undefined') {\n      foregroundColor = customColor;\n    } else if (disabled) {\n      foregroundColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else {\n      foregroundColor = !color(backgroundColor).light()\n        ? white\n        : 'rgba(0, 0, 0, .54)';\n    }\n\n    const rippleColor = color(foregroundColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n      >\n        <TouchableRipple\n          borderless\n          onPress={onPress}\n          rippleColor={rippleColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : undefined}\n          style={styles.touchable}\n        >\n          <View\n            style={[\n              styles.content,\n              label ? styles.extended : small ? styles.small : styles.standard,\n            ]}\n            pointerEvents=\"none\"\n          >\n            {icon && loading !== true ? (\n              <CrossFadeIcon source={icon} size={24} color={foregroundColor} />\n            ) : null}\n            {loading && label ? (\n              <ActivityIndicator size={18} color={foregroundColor} />\n            ) : null}\n            {label ? (\n              <Text\n                style={[\n                  styles.label,\n                  { color: foregroundColor, fontFamily: theme.fonts.medium },\n                ]}\n              >\n                {label.toUpperCase()}\n              </Text>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n"]}