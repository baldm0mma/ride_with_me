70ea10e008585d7ac038306a2ce7b370
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var ListAccordion = function (_React$Component) {
  (0, _inherits2.default)(ListAccordion, _React$Component);

  function ListAccordion() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ListAccordion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ListAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      expanded: _this.props.expanded || false
    };

    _this._handlePress = function () {
      _this.props.onPress && _this.props.onPress();

      if (_this.props.expanded === undefined) {
        _this.setState(function (state) {
          return {
            expanded: !state.expanded
          };
        });
      }
    };

    return _this;
  }

  (0, _createClass2.default)(ListAccordion, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          left = _this$props.left,
          title = _this$props.title,
          description = _this$props.description,
          children = _this$props.children,
          theme = _this$props.theme,
          titleStyle = _this$props.titleStyle,
          descriptionStyle = _this$props.descriptionStyle,
          style = _this$props.style;
      var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
      var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
      var expanded = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;
      return React.createElement(_reactNative.View, null, React.createElement(_TouchableRipple.default, {
        style: [styles.container, style],
        onPress: this._handlePress,
        accessibilityTraits: "button",
        accessibilityComponentType: "button",
        accessibilityRole: "button"
      }, React.createElement(_reactNative.View, {
        style: styles.row,
        pointerEvents: "none"
      }, left ? left({
        color: expanded ? theme.colors.primary : descriptionColor
      }) : null, React.createElement(_reactNative.View, {
        style: [styles.item, styles.content]
      }, React.createElement(_Text.default, {
        numberOfLines: 1,
        style: [styles.title, {
          color: expanded ? theme.colors.primary : titleColor
        }, titleStyle]
      }, title), description && React.createElement(_Text.default, {
        numberOfLines: 2,
        style: [styles.description, {
          color: descriptionColor
        }, descriptionStyle]
      }, description)), React.createElement(_reactNative.View, {
        style: [styles.item, description && styles.multiline]
      }, React.createElement(_Icon.default, {
        source: expanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down',
        color: titleColor,
        size: 24
      })))), expanded ? React.Children.map(children, function (child) {
        if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {
          return React.cloneElement(child, {
            style: [styles.child, child.props.style]
          });
        }

        return child;
      }) : null);
    }
  }]);
  return ListAccordion;
}(React.Component);

ListAccordion.displayName = 'List.Accordion';

var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  multiline: {
    height: 40,
    alignItems: 'center',
    justifyContent: 'center'
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  item: {
    margin: 8
  },
  child: {
    paddingLeft: 64
  },
  content: {
    flex: 1,
    justifyContent: 'center'
  }
});

var _default = (0, _theming.withTheme)(ListAccordion);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,