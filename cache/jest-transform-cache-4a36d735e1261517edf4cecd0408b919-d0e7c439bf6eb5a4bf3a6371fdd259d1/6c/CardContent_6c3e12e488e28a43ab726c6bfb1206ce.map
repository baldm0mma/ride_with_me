{"version":3,"sources":["CardContent.js"],"names":["CardContent","props","index","total","siblings","style","rest","cover","title","contentStyle","prev","next","styles","only","first","last","container","React","Component","displayName","StyleSheet","create","paddingHorizontal","paddingTop","paddingBottom","paddingVertical"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;IA0CMA,W;;;;;;;;;;6BAGK;AAAA,wBAC4C,KAAKC,KADjD;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,KADR,eACQA,KADR;AAAA,UACeC,QADf,eACeA,QADf;AAAA,UACyBC,KADzB,eACyBA,KADzB;AAAA,UACmCC,IADnC;AAEP,UAAMC,KAAK,GAAG,sBAAd;AACA,UAAMC,KAAK,GAAG,sBAAd;AAEA,UAAIC,YAAJ,EAAkBC,IAAlB,EAAwBC,IAAxB;;AAEA,UAAI,OAAOT,KAAP,KAAiB,QAAjB,IAA6BE,QAAjC,EAA2C;AACzCM,QAAAA,IAAI,GAAGN,QAAQ,CAACF,KAAK,GAAG,CAAT,CAAf;AACAS,QAAAA,IAAI,GAAGP,QAAQ,CAACF,KAAK,GAAG,CAAT,CAAf;AACD;;AAED,UACGQ,IAAI,KAAKH,KAAT,IAAkBI,IAAI,KAAKJ,KAA5B,IACCG,IAAI,KAAKF,KAAT,IAAkBG,IAAI,KAAKH,KAD5B,IAEAL,KAAK,KAAK,CAHZ,EAIE;AACAM,QAAAA,YAAY,GAAGG,MAAM,CAACC,IAAtB;AACD,OAND,MAMO,IAAIX,KAAK,KAAK,CAAd,EAAiB;AACtB,YAAIS,IAAI,KAAKJ,KAAT,IAAkBI,IAAI,KAAKH,KAA/B,EAAsC;AACpCC,UAAAA,YAAY,GAAGG,MAAM,CAACC,IAAtB;AACD,SAFD,MAEO;AACLJ,UAAAA,YAAY,GAAGG,MAAM,CAACE,KAAtB;AACD;AACF,OANM,MAMA,IAAI,OAAOX,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;AAC3D,YAAIO,IAAI,KAAKH,KAAT,IAAkBG,IAAI,KAAKF,KAA/B,EAAsC;AACpCC,UAAAA,YAAY,GAAGG,MAAM,CAACC,IAAtB;AACD,SAFD,MAEO;AACLJ,UAAAA,YAAY,GAAGG,MAAM,CAACG,IAAtB;AACD;AACF,OANM,MAMA,IAAIL,IAAI,KAAKH,KAAT,IAAkBG,IAAI,KAAKF,KAA/B,EAAsC;AAC3CC,QAAAA,YAAY,GAAGG,MAAM,CAACE,KAAtB;AACD,OAFM,MAEA,IAAIH,IAAI,KAAKJ,KAAT,IAAkBI,IAAI,KAAKH,KAA/B,EAAsC;AAC3CC,QAAAA,YAAY,GAAGG,MAAM,CAACG,IAAtB;AACD;;AAED,aAAO,oBAAC,iBAAD,6BAAUT,IAAV;AAAgB,QAAA,KAAK,EAAE,CAACM,MAAM,CAACI,SAAR,EAAmBP,YAAnB,EAAiCJ,KAAjC;AAAvB,SAAP;AACD;;;EAxCuBY,KAAK,CAACC,S;;AAA1BlB,W,CACGmB,W,GAAc,c;;AA0CvB,IAAMP,MAAM,GAAGQ,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,iBAAiB,EAAE;AADV,GADoB;AAI/BR,EAAAA,KAAK,EAAE;AACLS,IAAAA,UAAU,EAAE;AADP,GAJwB;AAO/BR,EAAAA,IAAI,EAAE;AACJS,IAAAA,aAAa,EAAE;AADX,GAPyB;AAU/BX,EAAAA,IAAI,EAAE;AACJY,IAAAA,eAAe,EAAE;AADb;AAVyB,CAAlB,CAAf;;eAeezB,W","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\ntype Props = React.ElementConfig<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.Node,\n  /**\n   * @internal\n   */\n  index?: number,\n  /**\n   * @internal\n   */\n  total?: number,\n  /**\n   * @internal\n   */\n  siblings?: Array<string>,\n  style?: any,\n};\n\n/**\n * A component to show content inside a Card.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass CardContent extends React.Component<Props> {\n  static displayName = 'Card.Content';\n\n  render() {\n    const { index, total, siblings, style, ...rest } = this.props;\n    const cover = 'withTheme(CardCover)';\n    const title = 'withTheme(CardTitle)';\n\n    let contentStyle, prev, next;\n\n    if (typeof index === 'number' && siblings) {\n      prev = siblings[index - 1];\n      next = siblings[index + 1];\n    }\n\n    if (\n      (prev === cover && next === cover) ||\n      (prev === title && next === title) ||\n      total === 1\n    ) {\n      contentStyle = styles.only;\n    } else if (index === 0) {\n      if (next === cover || next === title) {\n        contentStyle = styles.only;\n      } else {\n        contentStyle = styles.first;\n      }\n    } else if (typeof total === 'number' && index === total - 1) {\n      if (prev === cover || prev === title) {\n        contentStyle = styles.only;\n      } else {\n        contentStyle = styles.last;\n      }\n    } else if (prev === cover || prev === title) {\n      contentStyle = styles.first;\n    } else if (next === cover || next === title) {\n      contentStyle = styles.last;\n    }\n\n    return <View {...rest} style={[styles.container, contentStyle, style]} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n"]}