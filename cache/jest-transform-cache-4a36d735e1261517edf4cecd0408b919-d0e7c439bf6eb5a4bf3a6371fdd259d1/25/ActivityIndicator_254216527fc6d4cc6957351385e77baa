cfc57b92dfee7a1bcd63a2063b6bb0f7
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../core/theming");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DURATION = 2400;

var ActivityIndicator = function (_React$Component) {
  (0, _inherits2.default)(ActivityIndicator, _React$Component);

  function ActivityIndicator() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ActivityIndicator);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ActivityIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      timer: new _reactNative.Animated.Value(0),
      fade: new _reactNative.Animated.Value(!_this.props.animating && _this.props.hidesWhenStopped ? 0 : 1)
    };
    _this.rotation = null;

    _this._startRotation = function () {
      var _this$state = _this.state,
          fade = _this$state.fade,
          timer = _this$state.timer;

      _reactNative.Animated.timing(fade, {
        duration: 200,
        toValue: 1,
        isInteraction: false,
        useNativeDriver: true
      }).start();

      if (_this.rotation) {
        timer.setValue(0);

        _reactNative.Animated.loop(_this.rotation).start();
      }
    };

    _this._stopRotation = function () {
      if (_this.rotation) {
        _this.rotation.stop();
      }
    };

    return _this;
  }

  (0, _createClass2.default)(ActivityIndicator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var animating = this.props.animating;
      var timer = this.state.timer;
      this.rotation = _reactNative.Animated.timing(timer, {
        duration: DURATION,
        easing: _reactNative.Easing.linear,
        useNativeDriver: _reactNative.Platform.OS !== 'web',
        toValue: 1,
        isInteraction: false
      });

      if (animating) {
        this._startRotation();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          animating = _this$props.animating,
          hidesWhenStopped = _this$props.hidesWhenStopped;
      var fade = this.state.fade;

      if (animating !== prevProps.animating) {
        if (animating) {
          this._startRotation();
        } else if (hidesWhenStopped) {
          _reactNative.Animated.timing(fade, {
            duration: 200,
            toValue: 0,
            useNativeDriver: true,
            isInteraction: false
          }).start(this._stopRotation.bind(this));
        } else {
          this._stopRotation();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          fade = _this$state2.fade,
          timer = _this$state2.timer;
      var _this$props2 = this.props,
          animating = _this$props2.animating,
          indicatorColor = _this$props2.color,
          hidesWhenStopped = _this$props2.hidesWhenStopped,
          indicatorSize = _this$props2.size,
          style = _this$props2.style,
          theme = _this$props2.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, ["animating", "color", "hidesWhenStopped", "size", "style", "theme"]);
      var color = indicatorColor || theme.colors.primary;
      var size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize;
      var frames = 60 * DURATION / 1000;

      var easing = _reactNative.Easing.bezier(0.4, 0.0, 0.7, 1.0);

      var containerStyle = {
        width: size,
        height: size / 2,
        overflow: 'hidden'
      };
      return React.createElement(_reactNative.View, (0, _extends2.default)({
        style: [styles.container, style]
      }, rest), React.createElement(_reactNative.Animated.View, {
        style: [{
          width: size,
          height: size,
          opacity: fade
        }]
      }, [0, 1].map(function (index) {
        var inputRange = Array.from(new Array(frames), function (frame, frameIndex) {
          return frameIndex / (frames - 1);
        });
        var outputRange = Array.from(new Array(frames), function (frame, frameIndex) {
          var progress = 2 * frameIndex / (frames - 1);
          var rotation = index ? +(360 - 15) : -(180 - 15);

          if (progress > 1.0) {
            progress = 2.0 - progress;
          }

          var direction = index ? -1 : +1;
          return direction * (180 - 30) * easing(progress) + rotation + "deg";
        });
        var layerStyle = {
          width: size,
          height: size,
          transform: [{
            rotate: timer.interpolate({
              inputRange: [0, 1],
              outputRange: [0 + 30 + 15 + "deg", 2 * 360 + 30 + 15 + "deg"]
            })
          }]
        };
        var viewportStyle = {
          width: size,
          height: size,
          transform: [{
            translateY: index ? -size / 2 : 0
          }, {
            rotate: timer.interpolate({
              inputRange: inputRange,
              outputRange: outputRange
            })
          }]
        };
        var offsetStyle = index ? {
          top: size / 2
        } : null;
        var lineStyle = {
          width: size,
          height: size,
          borderColor: color,
          borderWidth: size / 10,
          borderRadius: size / 2
        };
        return React.createElement(_reactNative.Animated.View, {
          key: index,
          style: [styles.layer]
        }, React.createElement(_reactNative.Animated.View, {
          style: layerStyle
        }, React.createElement(_reactNative.Animated.View, {
          style: [containerStyle, offsetStyle],
          collapsable: false
        }, React.createElement(_reactNative.Animated.View, {
          style: viewportStyle
        }, React.createElement(_reactNative.Animated.View, {
          style: containerStyle,
          collapsable: false
        }, React.createElement(_reactNative.Animated.View, {
          style: lineStyle
        }))))));
      })));
    }
  }]);
  return ActivityIndicator;
}(React.Component);

ActivityIndicator.defaultProps = {
  animating: true,
  size: 'small',
  hidesWhenStopped: true
};

var styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  layer: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'center',
    alignItems: 'center'
  })
});

var _default = (0, _theming.withTheme)(ActivityIndicator);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,