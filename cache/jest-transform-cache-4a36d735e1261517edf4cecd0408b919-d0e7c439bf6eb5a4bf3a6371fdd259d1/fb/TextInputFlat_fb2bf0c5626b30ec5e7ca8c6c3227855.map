{"version":3,"sources":["TextInputFlat.js"],"names":["AnimatedText","Animated","createAnimatedComponent","Text","MINIMIZED_LABEL_Y_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","LABEL_PADDING_HORIZONTAL","RANDOM_VALUE_TO_CENTER_LABEL","TextInputFlat","props","disabled","label","error","selectionColor","underlineColor","style","theme","render","multiline","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","fontFamily","regular","hasActiveOutline","focused","inputTextColor","activeColor","underlineColorCustom","placeholderColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelHalfWidth","labelLayout","width","baseLabelTranslateX","I18nManager","isRTL","labelStyle","fontSize","transform","translateX","interpolate","inputRange","outputRange","value","translateY","labeled","scale","styles","underline","scaleY","StyleSheet","absoluteFill","opacity","measured","placeholderFlat","color","ref","placeholderTextColor","editable","underlineColorAndroid","input","inputFlatWithLabel","inputFlatWithoutLabel","textAlignVertical","React","Component","defaultProps","create","position","left","paddingHorizontal","top","right","bottom","height","flexGrow","margin","minHeight","textAlign","zIndex","paddingTop","paddingBottom","paddingVertical"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nconst AnimatedText = Animated.createAnimatedComponent(Text);\n\nconst MINIMIZED_LABEL_Y_OFFSET = -12;\nconst MAXIMIZED_LABEL_FONT_SIZE = 16;\nconst MINIMIZED_LABEL_FONT_SIZE = 12;\nconst LABEL_WIGGLE_X_OFFSET = 4;\nconst LABEL_PADDING_HORIZONTAL = 12;\nconst RANDOM_VALUE_TO_CENTER_LABEL = 4; // Don't know why 4, but it works\n\nclass TextInputFlat extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const fontFamily = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    let inputTextColor, activeColor, underlineColorCustom, placeholderColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = colors.placeholder;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background)\n            .lighten(0.24)\n            .rgb()\n            .string()\n        : color(colors.background)\n            .darken(0.06)\n            .rgb()\n            .string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelHalfWidth = parentState.labelLayout.width / 2;\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) *\n      labelHalfWidth;\n\n    const labelStyle = {\n      fontFamily,\n      fontSize: MAXIMIZED_LABEL_FONT_SIZE,\n      transform: [\n        {\n          // Wiggle the label when there's an error\n          translateX: parentState.error.interpolate({\n            inputRange: [0, 0.5, 1],\n            outputRange: [\n              0,\n              parentState.value && error ? LABEL_WIGGLE_X_OFFSET : 0,\n              0,\n            ],\n          }),\n        },\n        {\n          // Move label to top\n          translateY: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [MINIMIZED_LABEL_Y_OFFSET, 0],\n          }),\n        },\n        {\n          // Make label smaller\n          scale: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\n              MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE,\n              1,\n            ],\n          }),\n        },\n        {\n          // Offset label scale since RN doesn't support transform origin\n          translateX: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\n              baseLabelTranslateX > 0\n                ? baseLabelTranslateX +\n                  labelHalfWidth / LABEL_PADDING_HORIZONTAL -\n                  RANDOM_VALUE_TO_CENTER_LABEL\n                : baseLabelTranslateX -\n                  labelHalfWidth / LABEL_PADDING_HORIZONTAL +\n                  RANDOM_VALUE_TO_CENTER_LABEL,\n              0,\n            ],\n          }),\n        },\n      ],\n    };\n\n    return (\n      <View style={[containerStyle, style]}>\n        <Animated.View\n          style={[\n            styles.underline,\n            {\n              backgroundColor: error\n                ? colors.error\n                : parentState.focused\n                  ? activeColor\n                  : underlineColorCustom,\n              // Underlines is thinner when input is not focused\n              transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n            },\n          ]}\n        />\n\n        {label ? (\n          // Position colored placeholder and gray placeholder on top of each other and crossfade them\n          // This gives the effect of animating the color, but allows us to use native driver\n          <View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              {\n                opacity:\n                  // Hide the label in minimized state until we measure it's width\n                  parentState.value || parentState.focused\n                    ? parentState.labelLayout.measured\n                      ? 1\n                      : 0\n                    : 1,\n              },\n            ]}\n          >\n            <AnimatedText\n              onLayout={onLayoutAnimatedText}\n              style={[\n                styles.placeholder,\n                styles.placeholderFlat,\n                labelStyle,\n                {\n                  color: activeColor,\n                  opacity: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [hasActiveOutline ? 1 : 0, 0],\n                  }),\n                },\n              ]}\n              numberOfLines={1}\n            >\n              {label}\n            </AnimatedText>\n            <AnimatedText\n              style={[\n                styles.placeholder,\n                styles.placeholderFlat,\n                labelStyle,\n                {\n                  color: placeholderColor,\n                  opacity: hasActiveOutline ? parentState.labeled : 1,\n                },\n              ]}\n              numberOfLines={1}\n            >\n              {label}\n            </AnimatedText>\n          </View>\n        ) : null}\n\n        {render(\n          ({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderColor,\n            editable: !disabled,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              this.props.label\n                ? styles.inputFlatWithLabel\n                : styles.inputFlatWithoutLabel,\n              {\n                color: inputTextColor,\n                fontFamily,\n                textAlignVertical: multiline ? 'top' : 'center',\n              },\n            ],\n          }: RenderProps)\n        )}\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    fontSize: 16,\n    paddingHorizontal: LABEL_PADDING_HORIZONTAL,\n  },\n  placeholderFlat: {\n    top: 19,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: 12,\n    fontSize: 16,\n    margin: 0,\n    minHeight: 58,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputFlatWithLabel: {\n    paddingTop: 24,\n    paddingBottom: 6,\n  },\n  inputFlatWithoutLabel: {\n    paddingVertical: 15,\n  },\n});\n"]}