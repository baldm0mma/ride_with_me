6631a5d1e5af2e1260bb9dfac3cff4e1
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

var MINIMIZED_LABEL_Y_OFFSET = -12;
var MAXIMIZED_LABEL_FONT_SIZE = 16;
var MINIMIZED_LABEL_FONT_SIZE = 12;
var LABEL_WIGGLE_X_OFFSET = 4;
var LABEL_PADDING_HORIZONTAL = 12;
var RANDOM_VALUE_TO_CENTER_LABEL = 4;

var TextInputFlat = function (_React$Component) {
  (0, _inherits2.default)(TextInputFlat, _React$Component);

  function TextInputFlat() {
    (0, _classCallCheck2.default)(this, TextInputFlat);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TextInputFlat).apply(this, arguments));
  }

  (0, _createClass2.default)(TextInputFlat, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          label = _this$props.label,
          error = _this$props.error,
          selectionColor = _this$props.selectionColor,
          underlineColor = _this$props.underlineColor,
          style = _this$props.style,
          theme = _this$props.theme,
          render = _this$props.render,
          multiline = _this$props.multiline,
          parentState = _this$props.parentState,
          innerRef = _this$props.innerRef,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          onChangeText = _this$props.onChangeText,
          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "label", "error", "selectionColor", "underlineColor", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "onBlur", "onChangeText", "onLayoutAnimatedText"]);
      var colors = theme.colors,
          fonts = theme.fonts;
      var fontFamily = fonts.regular;
      var hasActiveOutline = parentState.focused || error;
      var inputTextColor, activeColor, underlineColorCustom, placeholderColor;

      if (disabled) {
        inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
        placeholderColor = colors.disabled;
        underlineColorCustom = 'transparent';
      } else {
        inputTextColor = colors.text;
        activeColor = error ? colors.error : colors.primary;
        placeholderColor = colors.placeholder;
        underlineColorCustom = underlineColor || colors.disabled;
      }

      var containerStyle = {
        backgroundColor: theme.dark ? (0, _color.default)(colors.background).lighten(0.24).rgb().string() : (0, _color.default)(colors.background).darken(0.06).rgb().string(),
        borderTopLeftRadius: theme.roundness,
        borderTopRightRadius: theme.roundness
      };
      var labelHalfWidth = parentState.labelLayout.width / 2;
      var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) * labelHalfWidth;
      var labelStyle = {
        fontFamily: fontFamily,
        fontSize: MAXIMIZED_LABEL_FONT_SIZE,
        transform: [{
          translateX: parentState.error.interpolate({
            inputRange: [0, 0.5, 1],
            outputRange: [0, parentState.value && error ? LABEL_WIGGLE_X_OFFSET : 0, 0]
          })
        }, {
          translateY: parentState.labeled.interpolate({
            inputRange: [0, 1],
            outputRange: [MINIMIZED_LABEL_Y_OFFSET, 0]
          })
        }, {
          scale: parentState.labeled.interpolate({
            inputRange: [0, 1],
            outputRange: [MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE, 1]
          })
        }, {
          translateX: parentState.labeled.interpolate({
            inputRange: [0, 1],
            outputRange: [baseLabelTranslateX > 0 ? baseLabelTranslateX + labelHalfWidth / LABEL_PADDING_HORIZONTAL - RANDOM_VALUE_TO_CENTER_LABEL : baseLabelTranslateX - labelHalfWidth / LABEL_PADDING_HORIZONTAL + RANDOM_VALUE_TO_CENTER_LABEL, 0]
          })
        }]
      };
      return React.createElement(_reactNative.View, {
        style: [containerStyle, style]
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.underline, {
          backgroundColor: error ? colors.error : parentState.focused ? activeColor : underlineColorCustom,
          transform: [{
            scaleY: parentState.focused ? 1 : 0.5
          }]
        }]
      }), label ? React.createElement(_reactNative.View, {
        pointerEvents: "none",
        style: [_reactNative.StyleSheet.absoluteFill, {
          opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1
        }]
      }, React.createElement(AnimatedText, {
        onLayout: onLayoutAnimatedText,
        style: [styles.placeholder, styles.placeholderFlat, labelStyle, {
          color: activeColor,
          opacity: parentState.labeled.interpolate({
            inputRange: [0, 1],
            outputRange: [hasActiveOutline ? 1 : 0, 0]
          })
        }],
        numberOfLines: 1
      }, label), React.createElement(AnimatedText, {
        style: [styles.placeholder, styles.placeholderFlat, labelStyle, {
          color: placeholderColor,
          opacity: hasActiveOutline ? parentState.labeled : 1
        }],
        numberOfLines: 1
      }, label)) : null, render(_objectSpread({}, rest, {
        ref: innerRef,
        onChangeText: onChangeText,
        placeholder: label ? parentState.placeholder : this.props.placeholder,
        placeholderTextColor: placeholderColor,
        editable: !disabled,
        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,
        onFocus: onFocus,
        onBlur: onBlur,
        underlineColorAndroid: 'transparent',
        multiline: multiline,
        style: [styles.input, this.props.label ? styles.inputFlatWithLabel : styles.inputFlatWithoutLabel, {
          color: inputTextColor,
          fontFamily: fontFamily,
          textAlignVertical: multiline ? 'top' : 'center'
        }]
      })));
    }
  }]);
  return TextInputFlat;
}(React.Component);

TextInputFlat.defaultProps = {
  disabled: false,
  error: false,
  multiline: false,
  editable: true,
  render: function render(props) {
    return React.createElement(_reactNative.TextInput, props);
  }
};
var _default = TextInputFlat;
exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  placeholder: {
    position: 'absolute',
    left: 0,
    fontSize: 16,
    paddingHorizontal: LABEL_PADDING_HORIZONTAL
  },
  placeholderFlat: {
    top: 19
  },
  underline: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    height: 2
  },
  input: {
    flexGrow: 1,
    paddingHorizontal: 12,
    fontSize: 16,
    margin: 0,
    minHeight: 58,
    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
    zIndex: 1
  },
  inputFlatWithLabel: {
    paddingTop: 24,
    paddingBottom: 6
  },
  inputFlatWithoutLabel: {
    paddingVertical: 15
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,