{"version":3,"sources":["ToggleButtonGroup.js"],"names":["ToggleButtonGroupContext","ToggleButtonGroup","props","value","onValueChange","children","count","React","Children","map","child","i","type","ToggleButton","cloneElement","style","styles","button","first","last","middle","Component","displayName","StyleSheet","create","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AAsBO,IAAMA,wBAA2D,GAAG,iCACzE,IADyE,CAApE;;;IAgCDC,iB;;;;;;;;;;6BAGK;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,aADR,eACQA,aADR;AAAA,UACuBC,QADvB,eACuBA,QADvB;AAEP,UAAMC,KAAK,GAAGC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAqBD,QAArB,CAAd;AAEA,aACE,oBAAC,wBAAD,CAA0B,QAA1B;AACE,QAAA,KAAK,EAAE;AACLF,UAAAA,KAAK,EAALA,KADK;AAELC,UAAAA,aAAa,EAAbA;AAFK;AADT,SAMGG,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,UAACK,KAAD,EAAQC,CAAR,EAAc;AAC1C,YAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAeC,qBAA5B,EAA0C;AACxC,iBAAON,KAAK,CAACO,YAAN,CAAmBJ,KAAnB,EAA0B;AAC/BK,YAAAA,KAAK,EAAE,CACLC,MAAM,CAACC,MADF,EAELN,CAAC,KAAK,CAAN,GACIK,MAAM,CAACE,KADX,GAEIP,CAAC,KAAKL,KAAK,GAAG,CAAd,GACEU,MAAM,CAACG,IADT,GAEEH,MAAM,CAACI,MANR,EAOLV,KAAK,CAACR,KAAN,CAAYa,KAPP;AADwB,WAA1B,CAAP;AAWD;;AAED,eAAOL,KAAP;AACD,OAhBA,CANH,CADF;AA0BD;;;EAjC6BH,KAAK,CAACc,S;;AAAhCpB,iB,CACGqB,W,GAAc,oB;;AAmCvB,IAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,MAAM,EAAE;AACNQ,IAAAA,WAAW,EAAEF,wBAAWG;AADlB,GADuB;AAK/BR,EAAAA,KAAK,EAAE;AACLS,IAAAA,oBAAoB,EAAE,CADjB;AAELC,IAAAA,uBAAuB,EAAE;AAFpB,GALwB;AAU/BR,EAAAA,MAAM,EAAE;AACNS,IAAAA,YAAY,EAAE,CADR;AAENC,IAAAA,eAAe,EAAE;AAFX,GAVuB;AAe/BX,EAAAA,IAAI,EAAE;AACJW,IAAAA,eAAe,EAAE,CADb;AAEJC,IAAAA,mBAAmB,EAAE,CAFjB;AAGJC,IAAAA,sBAAsB,EAAE;AAHpB;AAfyB,CAAlB,CAAf;;eAsBe/B,iB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport createReactContext, { type Context } from 'create-react-context';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => mixed,\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string,\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.Node,\n};\n\ntype ToggleButtonContextType = {\n  value: string,\n  onValueChange: (item: string) => mixed,\n};\n\nexport const ToggleButtonGroupContext: Context<?ToggleButtonContextType> = createReactContext(\n  null\n);\n\n/**\n * Toggle group allows to control a group of toggle buttons.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { ToggleButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'left',\n *   };\n *\n *   render() {\n *     return(\n *       <ToggleButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *       </ToggleButton.Group>\n *     )\n *   }\n * }\n *```\n */\nclass ToggleButtonGroup extends React.Component<Props> {\n  static displayName = 'ToggleButton.Group';\n\n  render() {\n    const { value, onValueChange, children } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButtonGroupContext.Provider\n        value={{\n          value,\n          onValueChange,\n        }}\n      >\n        {React.Children.map(children, (child, i) => {\n          if (child && child.type === ToggleButton) {\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </ToggleButtonGroupContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonGroup;\n"]}