{"version":3,"sources":["Switch.js"],"names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","white","alpha","rgb","string","black","thumbTintColor","grey800","grey400","grey50","major","minor","thumbColor","trackColor","true","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAGA,IAAMA,OAAO,GAAGC,2BAAcC,iBAAd,GACZD,2BAAcC,iBAAd,CAAgCC,kBADpB,GAEZC,SAFJ;;IA0EMC,M;;;;;;;;;;6BACK;AAAA,wBAQH,KAAKC,KARF;AAAA,UAELC,KAFK,eAELA,KAFK;AAAA,UAGLC,QAHK,eAGLA,QAHK;AAAA,UAILC,aAJK,eAILA,aAJK;AAAA,UAKLC,KALK,eAKLA,KALK;AAAA,UAMLC,KANK,eAMLA,KANK;AAAA,UAOFC,IAPE;AAUP,UAAMC,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C;AAEA,UAAMC,WAAW,GACfC,sBAASC,EAAT,KAAgB,KAAhB,GACIL,YADJ,GAEIL,QAAQ,GACNG,KAAK,CAACQ,IAAN,GACE,oBAASC,aAAT,EACGC,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADF,GAKE,oBAASC,aAAT,EACGH,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANI,GAUN,oBAASV,YAAT,EACGQ,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAbR;AAkBA,UAAME,cAAc,GAClBR,sBAASC,EAAT,KAAgB,KAAhB,GACId,SADJ,GAEII,QAAQ,GACNG,KAAK,CAACQ,IAAN,GACEO,eADF,GAEEC,eAHI,GAINpB,KAAK,GACHM,YADG,GAEHF,KAAK,CAACQ,IAAN,GACEQ,eADF,GAEEC,cAXZ;AAaA,UAAMtB,KAAK,GACTN,OAAO,IAAIA,OAAO,CAAC6B,KAAR,KAAkB,CAA7B,IAAkC7B,OAAO,CAAC8B,KAAR,IAAiB,EAAnD,GACK;AACCd,QAAAA,WAAW,EAAXA,WADD;AAECS,QAAAA,cAAc,EAAdA;AAFD,OADL,GAKI;AACEM,QAAAA,UAAU,EAAEN,cADd;AAEEO,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAEjB;AADI;AAFd,OANN;AAaA,aACE,oBAAC,mBAAD;AACE,QAAA,KAAK,EAAET,KADT;AAEE,QAAA,QAAQ,EAAEC,QAFZ;AAGE,QAAA,aAAa,EAAEA,QAAQ,GAAGJ,SAAH,GAAeK;AAHxC,SAIMH,KAJN,EAKMM,IALN,EADF;AASD;;;EAlEkBsB,KAAK,CAACC,S;;eAqEZ,wBAAU9B,MAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport { Switch as NativeSwitch, Platform, NativeModules } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ElementConfig<typeof NativeSwitch> & {|\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean,\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean,\n  /**\n   * Custom color for switch.\n   */\n  color?: string,\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={() =>\n *           { this.setState({ isSwitchOn: !isSwitchOn }); }\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n          ? theme.dark\n            ? setColor(white)\n                .alpha(0.1)\n                .rgb()\n                .string()\n            : setColor(black)\n                .alpha(0.12)\n                .rgb()\n                .string()\n          : setColor(checkedColor)\n              .alpha(0.5)\n              .rgb()\n              .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n          ? theme.dark\n            ? grey800\n            : grey400\n          : value\n            ? checkedColor\n            : theme.dark\n              ? grey400\n              : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? ({\n            onTintColor,\n            thumbTintColor,\n          }: any)\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]}