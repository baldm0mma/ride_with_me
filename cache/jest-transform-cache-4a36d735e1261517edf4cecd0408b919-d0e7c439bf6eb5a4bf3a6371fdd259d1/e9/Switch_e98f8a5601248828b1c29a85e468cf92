1032ac6b2fd392d6c3454bdcfc564c18
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _colors = require("../styles/colors");

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _theming = require("../core/theming");

var version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;

var Switch = function (_React$Component) {
  (0, _inherits2.default)(Switch, _React$Component);

  function Switch() {
    (0, _classCallCheck2.default)(this, Switch);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Switch).apply(this, arguments));
  }

  (0, _createClass2.default)(Switch, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          disabled = _this$props.disabled,
          onValueChange = _this$props.onValueChange,
          color = _this$props.color,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["value", "disabled", "onValueChange", "color", "theme"]);
      var checkedColor = color || theme.colors.accent;
      var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();
      var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;
      var props = version && version.major === 0 && version.minor <= 56 ? {
        onTintColor: onTintColor,
        thumbTintColor: thumbTintColor
      } : {
        thumbColor: thumbTintColor,
        trackColor: {
          true: onTintColor
        }
      };
      return React.createElement(_reactNative.Switch, (0, _extends2.default)({
        value: value,
        disabled: disabled,
        onValueChange: disabled ? undefined : onValueChange
      }, props, rest));
    }
  }]);
  return Switch;
}(React.Component);

var _default = (0, _theming.withTheme)(Switch);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN3aXRjaC5qcyJdLCJuYW1lcyI6WyJ2ZXJzaW9uIiwiTmF0aXZlTW9kdWxlcyIsIlBsYXRmb3JtQ29uc3RhbnRzIiwicmVhY3ROYXRpdmVWZXJzaW9uIiwidW5kZWZpbmVkIiwiU3dpdGNoIiwicHJvcHMiLCJ2YWx1ZSIsImRpc2FibGVkIiwib25WYWx1ZUNoYW5nZSIsImNvbG9yIiwidGhlbWUiLCJyZXN0IiwiY2hlY2tlZENvbG9yIiwiY29sb3JzIiwiYWNjZW50Iiwib25UaW50Q29sb3IiLCJQbGF0Zm9ybSIsIk9TIiwiZGFyayIsIndoaXRlIiwiYWxwaGEiLCJyZ2IiLCJzdHJpbmciLCJibGFjayIsInRodW1iVGludENvbG9yIiwiZ3JleTgwMCIsImdyZXk0MDAiLCJncmV5NTAiLCJtYWpvciIsIm1pbm9yIiwidGh1bWJDb2xvciIsInRyYWNrQ29sb3IiLCJ0cnVlIiwiUmVhY3QiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBTUEsT0FBTyxHQUFHQywyQkFBY0MsaUJBQWQsR0FDWkQsMkJBQWNDLGlCQUFkLENBQWdDQyxrQkFEcEIsR0FFWkMsU0FGSjs7SUEwRU1DLE07Ozs7Ozs7Ozs7NkJBQ0s7QUFBQSx3QkFRSCxLQUFLQyxLQVJGO0FBQUEsVUFFTEMsS0FGSyxlQUVMQSxLQUZLO0FBQUEsVUFHTEMsUUFISyxlQUdMQSxRQUhLO0FBQUEsVUFJTEMsYUFKSyxlQUlMQSxhQUpLO0FBQUEsVUFLTEMsS0FMSyxlQUtMQSxLQUxLO0FBQUEsVUFNTEMsS0FOSyxlQU1MQSxLQU5LO0FBQUEsVUFPRkMsSUFQRTtBQVVQLFVBQU1DLFlBQVksR0FBR0gsS0FBSyxJQUFJQyxLQUFLLENBQUNHLE1BQU4sQ0FBYUMsTUFBM0M7QUFFQSxVQUFNQyxXQUFXLEdBQ2ZDLHNCQUFTQyxFQUFULEtBQWdCLEtBQWhCLEdBQ0lMLFlBREosR0FFSUwsUUFBUSxHQUNORyxLQUFLLENBQUNRLElBQU4sR0FDRSxvQkFBU0MsYUFBVCxFQUNHQyxLQURILENBQ1MsR0FEVCxFQUVHQyxHQUZILEdBR0dDLE1BSEgsRUFERixHQUtFLG9CQUFTQyxhQUFULEVBQ0dILEtBREgsQ0FDUyxJQURULEVBRUdDLEdBRkgsR0FHR0MsTUFISCxFQU5JLEdBVU4sb0JBQVNWLFlBQVQsRUFDR1EsS0FESCxDQUNTLEdBRFQsRUFFR0MsR0FGSCxHQUdHQyxNQUhILEVBYlI7QUFrQkEsVUFBTUUsY0FBYyxHQUNsQlIsc0JBQVNDLEVBQVQsS0FBZ0IsS0FBaEIsR0FDSWQsU0FESixHQUVJSSxRQUFRLEdBQ05HLEtBQUssQ0FBQ1EsSUFBTixHQUNFTyxlQURGLEdBRUVDLGVBSEksR0FJTnBCLEtBQUssR0FDSE0sWUFERyxHQUVIRixLQUFLLENBQUNRLElBQU4sR0FDRVEsZUFERixHQUVFQyxjQVhaO0FBYUEsVUFBTXRCLEtBQUssR0FDVE4sT0FBTyxJQUFJQSxPQUFPLENBQUM2QixLQUFSLEtBQWtCLENBQTdCLElBQWtDN0IsT0FBTyxDQUFDOEIsS0FBUixJQUFpQixFQUFuRCxHQUNLO0FBQ0NkLFFBQUFBLFdBQVcsRUFBWEEsV0FERDtBQUVDUyxRQUFBQSxjQUFjLEVBQWRBO0FBRkQsT0FETCxHQUtJO0FBQ0VNLFFBQUFBLFVBQVUsRUFBRU4sY0FEZDtBQUVFTyxRQUFBQSxVQUFVLEVBQUU7QUFDVkMsVUFBQUEsSUFBSSxFQUFFakI7QUFESTtBQUZkLE9BTk47QUFhQSxhQUNFLG9CQUFDLG1CQUFEO0FBQ0UsUUFBQSxLQUFLLEVBQUVULEtBRFQ7QUFFRSxRQUFBLFFBQVEsRUFBRUMsUUFGWjtBQUdFLFFBQUEsYUFBYSxFQUFFQSxRQUFRLEdBQUdKLFNBQUgsR0FBZUs7QUFIeEMsU0FJTUgsS0FKTixFQUtNTSxJQUxOLEVBREY7QUFTRDs7O0VBbEVrQnNCLEtBQUssQ0FBQ0MsUzs7ZUFxRVosd0JBQVU5QixNQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBncmV5NDAwLCBncmV5ODAwLCBncmV5NTAsIHdoaXRlLCBibGFjayB9IGZyb20gJy4uL3N0eWxlcy9jb2xvcnMnO1xuaW1wb3J0IHsgU3dpdGNoIGFzIE5hdGl2ZVN3aXRjaCwgUGxhdGZvcm0sIE5hdGl2ZU1vZHVsZXMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHNldENvbG9yIGZyb20gJ2NvbG9yJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvcmUvdGhlbWluZyc7XG5pbXBvcnQgdHlwZSB7IFRoZW1lIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCB2ZXJzaW9uID0gTmF0aXZlTW9kdWxlcy5QbGF0Zm9ybUNvbnN0YW50c1xuICA/IE5hdGl2ZU1vZHVsZXMuUGxhdGZvcm1Db25zdGFudHMucmVhY3ROYXRpdmVWZXJzaW9uXG4gIDogdW5kZWZpbmVkO1xuXG50eXBlIFByb3BzID0gUmVhY3QuRWxlbWVudENvbmZpZzx0eXBlb2YgTmF0aXZlU3dpdGNoPiAmIHt8XG4gIC8qKlxuICAgKiBEaXNhYmxlIHRvZ2dsaW5nIHRoZSBzd2l0Y2guXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW4sXG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgc3dpdGNoLCB0cnVlIG1lYW5zICdvbicsIGZhbHNlIG1lYW5zICdvZmYnLlxuICAgKi9cbiAgdmFsdWU/OiBib29sZWFuLFxuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciBzd2l0Y2guXG4gICAqL1xuICBjb2xvcj86IHN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aXRoIHRoZSBuZXcgdmFsdWUgd2hlbiBpdCBjaGFuZ2VzLlxuICAgKi9cbiAgb25WYWx1ZUNoYW5nZT86IEZ1bmN0aW9uLFxuICBzdHlsZT86IGFueSxcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFRoZW1lLFxufH07XG5cbi8qKlxuICogU3dpdGNoIGlzIGEgdmlzdWFsIHRvZ2dsZSBiZXR3ZWVuIHR3byBtdXR1YWxseSBleGNsdXNpdmUgc3RhdGVzIOKAlCBvbiBhbmQgb2ZmLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvc3dpdGNoLWVuYWJsZWQuYW5kcm9pZC5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkFuZHJvaWQgKGVuYWJsZWQpPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL3N3aXRjaC1kaXNhYmxlZC5hbmRyb2lkLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+QW5kcm9pZCAoZGlzYWJsZWQpPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL3N3aXRjaC1lbmFibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPmlPUyAoZW5hYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvc3dpdGNoLWRpc2FibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPmlPUyAoZGlzYWJsZWQpPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqIDwvZGl2PlxuICpcbiAqICMjIFVzYWdlXG4gKiBgYGBqc1xuICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IHsgU3dpdGNoIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gKiAgIHN0YXRlID0ge1xuICogICAgIGlzU3dpdGNoT246IGZhbHNlLFxuICogICB9O1xuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIGNvbnN0IHsgaXNTd2l0Y2hPbiB9ID0gdGhpcy5zdGF0ZTtcbiAqICAgICByZXR1cm4gKFxuICogICAgICAgPFN3aXRjaFxuICogICAgICAgICB2YWx1ZT17aXNTd2l0Y2hPbn1cbiAqICAgICAgICAgb25WYWx1ZUNoYW5nZT17KCkgPT5cbiAqICAgICAgICAgICB7IHRoaXMuc2V0U3RhdGUoeyBpc1N3aXRjaE9uOiAhaXNTd2l0Y2hPbiB9KTsgfVxuICogICAgICAgICB9XG4gKiAgICAgICAvPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBTd2l0Y2ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBvblZhbHVlQ2hhbmdlLFxuICAgICAgY29sb3IsXG4gICAgICB0aGVtZSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNoZWNrZWRDb2xvciA9IGNvbG9yIHx8IHRoZW1lLmNvbG9ycy5hY2NlbnQ7XG5cbiAgICBjb25zdCBvblRpbnRDb2xvciA9XG4gICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2lvcydcbiAgICAgICAgPyBjaGVja2VkQ29sb3JcbiAgICAgICAgOiBkaXNhYmxlZFxuICAgICAgICAgID8gdGhlbWUuZGFya1xuICAgICAgICAgICAgPyBzZXRDb2xvcih3aGl0ZSlcbiAgICAgICAgICAgICAgICAuYWxwaGEoMC4xKVxuICAgICAgICAgICAgICAgIC5yZ2IoKVxuICAgICAgICAgICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAgICAgOiBzZXRDb2xvcihibGFjaylcbiAgICAgICAgICAgICAgICAuYWxwaGEoMC4xMilcbiAgICAgICAgICAgICAgICAucmdiKClcbiAgICAgICAgICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgICA6IHNldENvbG9yKGNoZWNrZWRDb2xvcilcbiAgICAgICAgICAgICAgLmFscGhhKDAuNSlcbiAgICAgICAgICAgICAgLnJnYigpXG4gICAgICAgICAgICAgIC5zdHJpbmcoKTtcblxuICAgIGNvbnN0IHRodW1iVGludENvbG9yID1cbiAgICAgIFBsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IGRpc2FibGVkXG4gICAgICAgICAgPyB0aGVtZS5kYXJrXG4gICAgICAgICAgICA/IGdyZXk4MDBcbiAgICAgICAgICAgIDogZ3JleTQwMFxuICAgICAgICAgIDogdmFsdWVcbiAgICAgICAgICAgID8gY2hlY2tlZENvbG9yXG4gICAgICAgICAgICA6IHRoZW1lLmRhcmtcbiAgICAgICAgICAgICAgPyBncmV5NDAwXG4gICAgICAgICAgICAgIDogZ3JleTUwO1xuXG4gICAgY29uc3QgcHJvcHMgPVxuICAgICAgdmVyc2lvbiAmJiB2ZXJzaW9uLm1ham9yID09PSAwICYmIHZlcnNpb24ubWlub3IgPD0gNTZcbiAgICAgICAgPyAoe1xuICAgICAgICAgICAgb25UaW50Q29sb3IsXG4gICAgICAgICAgICB0aHVtYlRpbnRDb2xvcixcbiAgICAgICAgICB9OiBhbnkpXG4gICAgICAgIDoge1xuICAgICAgICAgICAgdGh1bWJDb2xvcjogdGh1bWJUaW50Q29sb3IsXG4gICAgICAgICAgICB0cmFja0NvbG9yOiB7XG4gICAgICAgICAgICAgIHRydWU6IG9uVGludENvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOYXRpdmVTd2l0Y2hcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG9uVmFsdWVDaGFuZ2U9e2Rpc2FibGVkID8gdW5kZWZpbmVkIDogb25WYWx1ZUNoYW5nZX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoU3dpdGNoKTtcbiJdfQ==