6c5973a94dd82f4d78e5a095b916e0b2
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _Icon = _interopRequireWildcard(require("./Icon"));

var CrossFadeIcon = function (_React$Component) {
  (0, _inherits2.default)(CrossFadeIcon, _React$Component);

  function CrossFadeIcon() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, CrossFadeIcon);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CrossFadeIcon)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      currentIcon: _this.props.source,
      previousIcon: null,
      fade: new _reactNative.Animated.Value(1)
    };
    return _this;
  }

  (0, _createClass2.default)(CrossFadeIcon, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var previousIcon = this.state.previousIcon;

      if (!(0, _Icon.isValidIcon)(previousIcon) || (0, _Icon.isEqualIcon)(previousIcon, prevState.previousIcon)) {
        return;
      }

      this.state.fade.setValue(1);

      _reactNative.Animated.timing(this.state.fade, {
        duration: 200,
        toValue: 0
      }).start();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          color = _this$props.color,
          size = _this$props.size;
      var opacityPrev = this.state.fade;
      var opacityNext = this.state.previousIcon ? this.state.fade.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      }) : 1;
      var rotatePrev = this.state.fade.interpolate({
        inputRange: [0, 1],
        outputRange: ['-90deg', '0deg']
      });
      var rotateNext = this.state.previousIcon ? this.state.fade.interpolate({
        inputRange: [0, 1],
        outputRange: ['0deg', '-180deg']
      }) : '0deg';
      return React.createElement(_reactNative.View, {
        style: [styles.content, {
          height: size,
          width: size
        }]
      }, this.state.previousIcon ? React.createElement(_reactNative.Animated.View, {
        style: [styles.icon, {
          opacity: opacityPrev,
          transform: [{
            rotate: rotatePrev
          }]
        }]
      }, React.createElement(_Icon.default, {
        source: this.state.previousIcon,
        size: size,
        color: color
      })) : null, React.createElement(_reactNative.Animated.View, {
        style: [styles.icon, {
          opacity: opacityNext,
          transform: [{
            rotate: rotateNext
          }]
        }]
      }, React.createElement(_Icon.default, {
        source: this.state.currentIcon,
        size: size,
        color: color
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, nextState) {
      if (nextState.currentIcon === nextProps.source) {
        return null;
      }

      return {
        currentIcon: nextProps.source,
        previousIcon: nextState.currentIcon
      };
    }
  }]);
  return CrossFadeIcon;
}(React.Component);

(0, _reactLifecyclesCompat.polyfill)(CrossFadeIcon);
var _default = CrossFadeIcon;
exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  content: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,