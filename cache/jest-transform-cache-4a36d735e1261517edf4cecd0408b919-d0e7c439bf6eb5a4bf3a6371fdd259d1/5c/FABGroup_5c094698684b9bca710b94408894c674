6d1114e343be5f011efcdddaa11597c6
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _color = _interopRequireDefault(require("color"));

var _FAB = _interopRequireDefault(require("./FAB"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _Card = _interopRequireDefault(require("../Card/Card"));

var _theming = require("../../core/theming");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var FABGroup = function (_React$Component) {
  (0, _inherits2.default)(FABGroup, _React$Component);

  function FABGroup() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, FABGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FABGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      backdrop: new _reactNative.Animated.Value(0),
      animations: []
    };

    _this._close = function () {
      return _this.props.onStateChange({
        open: false
      });
    };

    _this._toggle = function () {
      return _this.props.onStateChange({
        open: !_this.props.open
      });
    };

    return _this;
  }

  (0, _createClass2.default)(FABGroup, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.open === prevProps.open) {
        return;
      }

      if (this.props.open) {
        _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.backdrop, {
          toValue: 1,
          duration: 250,
          useNativeDriver: true
        }), _reactNative.Animated.stagger(50, this.state.animations.map(function (animation) {
          return _reactNative.Animated.timing(animation, {
            toValue: 1,
            duration: 150,
            useNativeDriver: true
          });
        }).reverse())]).start();
      } else {
        _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.backdrop, {
          toValue: 0,
          duration: 200,
          useNativeDriver: true
        })].concat((0, _toConsumableArray2.default)(this.state.animations.map(function (animation) {
          return _reactNative.Animated.timing(animation, {
            toValue: 0,
            duration: 150,
            useNativeDriver: true
          });
        })))).start();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actions = _this$props.actions,
          icon = _this$props.icon,
          open = _this$props.open,
          _onPress = _this$props.onPress,
          accessibilityLabel = _this$props.accessibilityLabel,
          theme = _this$props.theme,
          style = _this$props.style,
          fabStyle = _this$props.fabStyle,
          visible = _this$props.visible;
      var colors = theme.colors;
      var labelColor = theme.dark ? colors.text : (0, _color.default)(colors.text).fade(0.54).rgb().string();
      var backdropOpacity = open ? this.state.backdrop.interpolate({
        inputRange: [0, 0.5, 1],
        outputRange: [0, 1, 1]
      }) : this.state.backdrop;
      var opacities = this.state.animations;
      var scales = opacities.map(function (opacity) {
        return open ? opacity.interpolate({
          inputRange: [0, 1],
          outputRange: [0.8, 1]
        }) : 1;
      });
      return React.createElement(_reactNative.View, {
        pointerEvents: "box-none",
        style: [styles.container, style]
      }, open ? React.createElement(_reactNative.StatusBar, {
        barStyle: "light-content"
      }) : null, React.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: this._close
      }, React.createElement(_reactNative.Animated.View, {
        pointerEvents: open ? 'auto' : 'none',
        style: [styles.backdrop, {
          opacity: backdropOpacity,
          backgroundColor: colors.backdrop
        }]
      })), React.createElement(_reactNative.SafeAreaView, {
        pointerEvents: "box-none",
        style: styles.safeArea
      }, React.createElement(_reactNative.View, {
        pointerEvents: open ? 'box-none' : 'none'
      }, actions.map(function (it, i) {
        return React.createElement(_reactNative.View, {
          key: i,
          style: styles.item,
          pointerEvents: "box-none"
        }, it.label && React.createElement(_Card.default, {
          style: [styles.label, {
            transform: [{
              scale: scales[i]
            }],
            opacity: opacities[i]
          }],
          onPress: function onPress() {
            it.onPress();

            _this2._close();
          },
          accessibilityLabel: it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,
          accessibilityTraits: "button",
          accessibilityComponentType: "button",
          accessibilityRole: "button"
        }, React.createElement(_Text.default, {
          style: {
            color: labelColor
          }
        }, it.label)), React.createElement(_FAB.default, {
          small: true,
          icon: it.icon,
          color: it.color,
          style: [{
            transform: [{
              scale: scales[i]
            }],
            opacity: opacities[i],
            backgroundColor: theme.colors.surface
          }, it.style],
          onPress: function onPress() {
            it.onPress();

            _this2._close();
          },
          accessibilityLabel: typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,
          accessibilityTraits: "button",
          accessibilityComponentType: "button",
          accessibilityRole: "button"
        }));
      })), React.createElement(_FAB.default, {
        onPress: function onPress() {
          _onPress && _onPress();

          _this2._toggle();
        },
        icon: icon,
        color: this.props.color,
        accessibilityLabel: accessibilityLabel,
        accessibilityTraits: "button",
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        style: [styles.fab, fabStyle],
        visible: visible
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      return {
        animations: nextProps.actions.map(function (_, i) {
          return prevState.animations[i] || new _reactNative.Animated.Value(nextProps.open ? 1 : 0);
        })
      };
    }
  }]);
  return FABGroup;
}(React.Component);

FABGroup.displayName = 'FAB.Group';
(0, _reactLifecyclesCompat.polyfill)(FABGroup);

var _default = (0, _theming.withTheme)(FABGroup);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  safeArea: {
    alignItems: 'flex-end'
  },
  container: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'flex-end'
  }),
  fab: {
    marginHorizontal: 16,
    marginBottom: 16,
    marginTop: 0
  },
  backdrop: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),
  label: {
    borderRadius: 5,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginVertical: 8,
    marginHorizontal: 16,
    elevation: 2
  },
  item: {
    marginHorizontal: 24,
    marginBottom: 16,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,