95babfea293bceb92a227d3ef28d0148
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _RadioButtonGroup = _interopRequireWildcard(require("./RadioButtonGroup"));

var _RadioButtonAndroid = _interopRequireDefault(require("./RadioButtonAndroid"));

var _RadioButtonIOS = _interopRequireDefault(require("./RadioButtonIOS"));

var _theming = require("../core/theming");

var RadioButton = function (_React$Component) {
  (0, _inherits2.default)(RadioButton, _React$Component);

  function RadioButton() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, RadioButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handlePress = function (context) {
      var onPress = _this.props.onPress;
      var onValueChange = context.onValueChange;
      onPress || onValueChange(_this.props.value);
    };

    _this.isChecked = function (context) {
      return context.value === _this.props.value ? 'checked' : 'unchecked';
    };

    return _this;
  }

  (0, _createClass2.default)(RadioButton, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var Button = _reactNative.Platform.select({
        default: _RadioButtonAndroid.default,
        ios: _RadioButtonIOS.default
      });

      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
        return React.createElement(Button, (0, _extends2.default)({}, _this2.props, {
          status: _this2.props.status || context && _this2.isChecked(context),
          onPress: function onPress() {
            return context && _this2.handlePress(context);
          }
        }));
      });
    }
  }]);
  return RadioButton;
}(React.Component);

RadioButton.Group = _RadioButtonGroup.default;
RadioButton.Android = _RadioButtonAndroid.default;
RadioButton.IOS = _RadioButtonIOS.default;

var _default = (0, _theming.withTheme)(RadioButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJhZGlvQnV0dG9uLmpzIl0sIm5hbWVzIjpbIlJhZGlvQnV0dG9uIiwiaGFuZGxlUHJlc3MiLCJjb250ZXh0Iiwib25QcmVzcyIsInByb3BzIiwib25WYWx1ZUNoYW5nZSIsInZhbHVlIiwiaXNDaGVja2VkIiwiQnV0dG9uIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJkZWZhdWx0IiwiUmFkaW9CdXR0b25BbmRyb2lkIiwiaW9zIiwiUmFkaW9CdXR0b25JT1MiLCJzdGF0dXMiLCJSZWFjdCIsIkNvbXBvbmVudCIsIkdyb3VwIiwiUmFkaW9CdXR0b25Hcm91cCIsIkFuZHJvaWQiLCJJT1MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztJQXdGTUEsVzs7Ozs7Ozs7Ozs7Ozs7OztVQVVKQyxXLEdBQWMsVUFBQUMsT0FBTyxFQUFJO0FBQUEsVUFDZkMsT0FEZSxHQUNILE1BQUtDLEtBREYsQ0FDZkQsT0FEZTtBQUFBLFVBRWZFLGFBRmUsR0FFR0gsT0FGSCxDQUVmRyxhQUZlO0FBSXZCRixNQUFBQSxPQUFPLElBQUlFLGFBQWEsQ0FBQyxNQUFLRCxLQUFMLENBQVdFLEtBQVosQ0FBeEI7QUFDRCxLOztVQUVEQyxTLEdBQVksVUFBQUwsT0FBTztBQUFBLGFBQ2pCQSxPQUFPLENBQUNJLEtBQVIsS0FBa0IsTUFBS0YsS0FBTCxDQUFXRSxLQUE3QixHQUFxQyxTQUFyQyxHQUFpRCxXQURoQztBQUFBLEs7Ozs7Ozs7NkJBR1Y7QUFBQTs7QUFDUCxVQUFNRSxNQUFNLEdBQUdDLHNCQUFTQyxNQUFULENBQWdCO0FBQzdCQyxRQUFBQSxPQUFPLEVBQUVDLDJCQURvQjtBQUU3QkMsUUFBQUEsR0FBRyxFQUFFQztBQUZ3QixPQUFoQixDQUFmOztBQUtBLGFBQ0Usb0JBQUMsb0NBQUQsQ0FBb0IsUUFBcEIsUUFDRyxVQUFBWixPQUFPO0FBQUEsZUFDTixvQkFBQyxNQUFELDZCQUNNLE1BQUksQ0FBQ0UsS0FEWDtBQUVFLFVBQUEsTUFBTSxFQUFFLE1BQUksQ0FBQ0EsS0FBTCxDQUFXVyxNQUFYLElBQXNCYixPQUFPLElBQUksTUFBSSxDQUFDSyxTQUFMLENBQWVMLE9BQWYsQ0FGM0M7QUFHRSxVQUFBLE9BQU8sRUFBRTtBQUFBLG1CQUFNQSxPQUFPLElBQUksTUFBSSxDQUFDRCxXQUFMLENBQWlCQyxPQUFqQixDQUFqQjtBQUFBO0FBSFgsV0FETTtBQUFBLE9BRFYsQ0FERjtBQVdEOzs7RUFyQ3VCYyxLQUFLLENBQUNDLFM7O0FBQTFCakIsVyxDQUVHa0IsSyxHQUFRQyx5QjtBQUZYbkIsVyxDQUtHb0IsTyxHQUFVUiwyQjtBQUxiWixXLENBUUdxQixHLEdBQU1QLHVCOztlQWdDQSx3QkFBVWQsV0FBVixDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJhZGlvQnV0dG9uR3JvdXAsIHsgUmFkaW9CdXR0b25Db250ZXh0IH0gZnJvbSAnLi9SYWRpb0J1dHRvbkdyb3VwJztcbmltcG9ydCBSYWRpb0J1dHRvbkFuZHJvaWQgZnJvbSAnLi9SYWRpb0J1dHRvbkFuZHJvaWQnO1xuaW1wb3J0IFJhZGlvQnV0dG9uSU9TIGZyb20gJy4vUmFkaW9CdXR0b25JT1MnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSB7fFxuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIHJhZGlvIGJ1dHRvblxuICAgKi9cbiAgdmFsdWU6IHN0cmluZyxcbiAgLyoqXG4gICAqIFN0YXR1cyBvZiByYWRpbyBidXR0b24uXG4gICAqL1xuICBzdGF0dXM/OiAnY2hlY2tlZCcgfCAndW5jaGVja2VkJyxcbiAgLyoqXG4gICAqIFdoZXRoZXIgcmFkaW8gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW4sXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIHByZXNzLlxuICAgKi9cbiAgb25QcmVzcz86ICgpID0+IG1peGVkLFxuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciB1bmNoZWNrZWQgcmFkaW8uXG4gICAqL1xuICB1bmNoZWNrZWRDb2xvcj86IHN0cmluZyxcbiAgLyoqXG4gICAqIEN1c3RvbSBjb2xvciBmb3IgcmFkaW8uXG4gICAqL1xuICBjb2xvcj86IHN0cmluZyxcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFRoZW1lLFxufH07XG5cbi8qKlxuICogUmFkaW8gYnV0dG9ucyBhbGxvdyB0aGUgc2VsZWN0aW9uIGEgc2luZ2xlIG9wdGlvbiBmcm9tIGEgc2V0LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvcmFkaW8tZW5hYmxlZC5hbmRyb2lkLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+QW5kcm9pZCAoZW5hYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvcmFkaW8tZGlzYWJsZWQuYW5kcm9pZC5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkFuZHJvaWQgKGRpc2FibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9yYWRpby1lbmFibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPmlPUyAoZW5hYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvcmFkaW8tZGlzYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+aU9TIChkaXNhYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbiAqIGltcG9ydCB7IFJhZGlvQnV0dG9uIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gKiAgIHN0YXRlID0ge1xuICogICAgIGNoZWNrZWQ6ICdmaXJzdCcsXG4gKiAgIH07XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgY29uc3QgeyBjaGVja2VkIH0gPSB0aGlzLnN0YXRlO1xuICpcbiAqICAgICByZXR1cm4gKFxuICogICAgICAgPFZpZXc+XG4gKiAgICAgICAgIDxSYWRpb0J1dHRvblxuICogICAgICAgICAgIHZhbHVlPVwiZmlyc3RcIlxuICogICAgICAgICAgIHN0YXR1cz17Y2hlY2tlZCA9PT0gJ2ZpcnN0JyA/ICdjaGVja2VkJyA6ICd1bmNoZWNrZWQnfVxuICogICAgICAgICAgIG9uUHJlc3M9eygpID0+IHsgdGhpcy5zZXRTdGF0ZSh7IGNoZWNrZWQ6ICdmaXJzdCcgfSk7IH19XG4gKiAgICAgICAgIC8+XG4gKiAgICAgICAgIDxSYWRpb0J1dHRvblxuICogICAgICAgICAgIHZhbHVlPVwic2Vjb25kXCJcbiAqICAgICAgICAgICBzdGF0dXM9e2NoZWNrZWQgPT09ICdzZWNvbmQnID8gJ2NoZWNrZWQnIDogJ3VuY2hlY2tlZCd9XG4gKiAgICAgICAgICAgb25QcmVzcz17KCkgPT4geyB0aGlzLnNldFN0YXRlKHsgY2hlY2tlZDogJ3NlY29uZCcgfSk7IH19XG4gKiAgICAgICAgIC8+XG4gKiAgICAgICA8L1ZpZXc+XG4gKiAgICAgKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIFJhZGlvQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIC8vIEBjb21wb25lbnQgLi9SYWRpb0J1dHRvbkdyb3VwLmpzXG4gIHN0YXRpYyBHcm91cCA9IFJhZGlvQnV0dG9uR3JvdXA7XG5cbiAgLy8gQGNvbXBvbmVudCAuL1JhZGlvQnV0dG9uQW5kcm9pZC5qc1xuICBzdGF0aWMgQW5kcm9pZCA9IFJhZGlvQnV0dG9uQW5kcm9pZDtcblxuICAvLyBAY29tcG9uZW50IC4vUmFkaW9CdXR0b25JT1MuanNcbiAgc3RhdGljIElPUyA9IFJhZGlvQnV0dG9uSU9TO1xuXG4gIGhhbmRsZVByZXNzID0gY29udGV4dCA9PiB7XG4gICAgY29uc3QgeyBvblByZXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgb25WYWx1ZUNoYW5nZSB9ID0gY29udGV4dDtcblxuICAgIG9uUHJlc3MgfHwgb25WYWx1ZUNoYW5nZSh0aGlzLnByb3BzLnZhbHVlKTtcbiAgfTtcblxuICBpc0NoZWNrZWQgPSBjb250ZXh0ID0+XG4gICAgY29udGV4dC52YWx1ZSA9PT0gdGhpcy5wcm9wcy52YWx1ZSA/ICdjaGVja2VkJyA6ICd1bmNoZWNrZWQnO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBCdXR0b24gPSBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgZGVmYXVsdDogUmFkaW9CdXR0b25BbmRyb2lkLFxuICAgICAgaW9zOiBSYWRpb0J1dHRvbklPUyxcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8UmFkaW9CdXR0b25Db250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICBzdGF0dXM9e3RoaXMucHJvcHMuc3RhdHVzIHx8IChjb250ZXh0ICYmIHRoaXMuaXNDaGVja2VkKGNvbnRleHQpKX1cbiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IGNvbnRleHQgJiYgdGhpcy5oYW5kbGVQcmVzcyhjb250ZXh0KX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9SYWRpb0J1dHRvbkNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoUmFkaW9CdXR0b24pO1xuIl19