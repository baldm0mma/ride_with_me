{"version":3,"sources":["RadioButton.js"],"names":["RadioButton","handlePress","context","onPress","props","onValueChange","value","isChecked","Button","Platform","select","default","RadioButtonAndroid","ios","RadioButtonIOS","status","React","Component","Group","RadioButtonGroup","Android","IOS"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;IAwFMA,W;;;;;;;;;;;;;;;;UAUJC,W,GAAc,UAAAC,OAAO,EAAI;AAAA,UACfC,OADe,GACH,MAAKC,KADF,CACfD,OADe;AAAA,UAEfE,aAFe,GAEGH,OAFH,CAEfG,aAFe;AAIvBF,MAAAA,OAAO,IAAIE,aAAa,CAAC,MAAKD,KAAL,CAAWE,KAAZ,CAAxB;AACD,K;;UAEDC,S,GAAY,UAAAL,OAAO;AAAA,aACjBA,OAAO,CAACI,KAAR,KAAkB,MAAKF,KAAL,CAAWE,KAA7B,GAAqC,SAArC,GAAiD,WADhC;AAAA,K;;;;;;;6BAGV;AAAA;;AACP,UAAME,MAAM,GAAGC,sBAASC,MAAT,CAAgB;AAC7BC,QAAAA,OAAO,EAAEC,2BADoB;AAE7BC,QAAAA,GAAG,EAAEC;AAFwB,OAAhB,CAAf;;AAKA,aACE,oBAAC,oCAAD,CAAoB,QAApB,QACG,UAAAZ,OAAO;AAAA,eACN,oBAAC,MAAD,6BACM,MAAI,CAACE,KADX;AAEE,UAAA,MAAM,EAAE,MAAI,CAACA,KAAL,CAAWW,MAAX,IAAsBb,OAAO,IAAI,MAAI,CAACK,SAAL,CAAeL,OAAf,CAF3C;AAGE,UAAA,OAAO,EAAE;AAAA,mBAAMA,OAAO,IAAI,MAAI,CAACD,WAAL,CAAiBC,OAAjB,CAAjB;AAAA;AAHX,WADM;AAAA,OADV,CADF;AAWD;;;EArCuBc,KAAK,CAACC,S;;AAA1BjB,W,CAEGkB,K,GAAQC,yB;AAFXnB,W,CAKGoB,O,GAAUR,2B;AALbZ,W,CAQGqB,G,GAAMP,uB;;eAgCA,wBAAUd,WAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport RadioButtonGroup, { RadioButtonContext } from './RadioButtonGroup';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\ntype Props = {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     checked: 'first',\n *   };\n *\n *   render() {\n *     const { checked } = this.state;\n *\n *     return (\n *       <View>\n *         <RadioButton\n *           value=\"first\"\n *           status={checked === 'first' ? 'checked' : 'unchecked'}\n *           onPress={() => { this.setState({ checked: 'first' }); }}\n *         />\n *         <RadioButton\n *           value=\"second\"\n *           status={checked === 'second' ? 'checked' : 'unchecked'}\n *           onPress={() => { this.setState({ checked: 'second' }); }}\n *         />\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass RadioButton extends React.Component<Props> {\n  // @component ./RadioButtonGroup.js\n  static Group = RadioButtonGroup;\n\n  // @component ./RadioButtonAndroid.js\n  static Android = RadioButtonAndroid;\n\n  // @component ./RadioButtonIOS.js\n  static IOS = RadioButtonIOS;\n\n  handlePress = context => {\n    const { onPress } = this.props;\n    const { onValueChange } = context;\n\n    onPress || onValueChange(this.props.value);\n  };\n\n  isChecked = context =>\n    context.value === this.props.value ? 'checked' : 'unchecked';\n\n  render() {\n    const Button = Platform.select({\n      default: RadioButtonAndroid,\n      ios: RadioButtonIOS,\n    });\n\n    return (\n      <RadioButtonContext.Consumer>\n        {context => (\n          <Button\n            {...this.props}\n            status={this.props.status || (context && this.isChecked(context))}\n            onPress={() => context && this.handlePress(context)}\n          />\n        )}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButton);\n"]}