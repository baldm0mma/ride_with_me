632f922e14090e1609b051a87b2e167d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _colors = require("../../styles/colors");

var CardCover = function (_React$Component) {
  (0, _inherits2.default)(CardCover, _React$Component);

  function CardCover() {
    (0, _classCallCheck2.default)(this, CardCover);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardCover).apply(this, arguments));
  }

  (0, _createClass2.default)(CardCover, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          index = _this$props.index,
          total = _this$props.total,
          style = _this$props.style,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["index", "total", "style", "theme"]);
      var roundness = theme.roundness;
      var coverStyle;

      if (index === 0) {
        if (total === 1) {
          coverStyle = {
            borderRadius: roundness
          };
        } else {
          coverStyle = {
            borderTopLeftRadius: roundness,
            borderTopRightRadius: roundness
          };
        }
      } else if (typeof total === 'number' && index === total - 1) {
        coverStyle = {
          borderBottomLeftRadius: roundness
        };
      }

      return React.createElement(_reactNative.View, {
        style: [styles.container, coverStyle, style]
      }, React.createElement(_reactNative.Image, (0, _extends2.default)({}, rest, {
        style: [styles.image, coverStyle]
      })));
    }
  }]);
  return CardCover;
}(React.Component);

CardCover.displayName = 'Card.Cover';

var styles = _reactNative.StyleSheet.create({
  container: {
    height: 195,
    backgroundColor: _colors.grey200,
    overflow: 'hidden'
  },
  image: {
    flex: 1,
    height: null,
    width: null,
    padding: 16,
    justifyContent: 'flex-end',
    resizeMode: 'cover'
  }
});

var _default = (0, _theming.withTheme)(CardCover);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmRDb3Zlci5qcyJdLCJuYW1lcyI6WyJDYXJkQ292ZXIiLCJwcm9wcyIsImluZGV4IiwidG90YWwiLCJzdHlsZSIsInRoZW1lIiwicmVzdCIsInJvdW5kbmVzcyIsImNvdmVyU3R5bGUiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwic3R5bGVzIiwiY29udGFpbmVyIiwiaW1hZ2UiLCJSZWFjdCIsIkNvbXBvbmVudCIsImRpc3BsYXlOYW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImdyZXkyMDAiLCJvdmVyZmxvdyIsImZsZXgiLCJ3aWR0aCIsInBhZGRpbmciLCJqdXN0aWZ5Q29udGVudCIsInJlc2l6ZU1vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0lBc0NNQSxTOzs7Ozs7Ozs7OzZCQUdLO0FBQUEsd0JBQ3lDLEtBQUtDLEtBRDlDO0FBQUEsVUFDQ0MsS0FERCxlQUNDQSxLQUREO0FBQUEsVUFDUUMsS0FEUixlQUNRQSxLQURSO0FBQUEsVUFDZUMsS0FEZixlQUNlQSxLQURmO0FBQUEsVUFDc0JDLEtBRHRCLGVBQ3NCQSxLQUR0QjtBQUFBLFVBQ2dDQyxJQURoQztBQUFBLFVBRUNDLFNBRkQsR0FFZUYsS0FGZixDQUVDRSxTQUZEO0FBSVAsVUFBSUMsVUFBSjs7QUFFQSxVQUFJTixLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNmLFlBQUlDLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ2ZLLFVBQUFBLFVBQVUsR0FBRztBQUNYQyxZQUFBQSxZQUFZLEVBQUVGO0FBREgsV0FBYjtBQUdELFNBSkQsTUFJTztBQUNMQyxVQUFBQSxVQUFVLEdBQUc7QUFDWEUsWUFBQUEsbUJBQW1CLEVBQUVILFNBRFY7QUFFWEksWUFBQUEsb0JBQW9CLEVBQUVKO0FBRlgsV0FBYjtBQUlEO0FBQ0YsT0FYRCxNQVdPLElBQUksT0FBT0osS0FBUCxLQUFpQixRQUFqQixJQUE2QkQsS0FBSyxLQUFLQyxLQUFLLEdBQUcsQ0FBbkQsRUFBc0Q7QUFDM0RLLFFBQUFBLFVBQVUsR0FBRztBQUNYSSxVQUFBQSxzQkFBc0IsRUFBRUw7QUFEYixTQUFiO0FBR0Q7O0FBRUQsYUFDRSxvQkFBQyxpQkFBRDtBQUFNLFFBQUEsS0FBSyxFQUFFLENBQUNNLE1BQU0sQ0FBQ0MsU0FBUixFQUFtQk4sVUFBbkIsRUFBK0JKLEtBQS9CO0FBQWIsU0FDRSxvQkFBQyxrQkFBRCw2QkFBV0UsSUFBWDtBQUFpQixRQUFBLEtBQUssRUFBRSxDQUFDTyxNQUFNLENBQUNFLEtBQVIsRUFBZVAsVUFBZjtBQUF4QixTQURGLENBREY7QUFLRDs7O0VBL0JxQlEsS0FBSyxDQUFDQyxTOztBQUF4QmpCLFMsQ0FDR2tCLFcsR0FBYyxZOztBQWlDdkIsSUFBTUwsTUFBTSxHQUFHTSx3QkFBV0MsTUFBWCxDQUFrQjtBQUMvQk4sRUFBQUEsU0FBUyxFQUFFO0FBQ1RPLElBQUFBLE1BQU0sRUFBRSxHQURDO0FBRVRDLElBQUFBLGVBQWUsRUFBRUMsZUFGUjtBQUdUQyxJQUFBQSxRQUFRLEVBQUU7QUFIRCxHQURvQjtBQU0vQlQsRUFBQUEsS0FBSyxFQUFFO0FBQ0xVLElBQUFBLElBQUksRUFBRSxDQUREO0FBRUxKLElBQUFBLE1BQU0sRUFBRSxJQUZIO0FBR0xLLElBQUFBLEtBQUssRUFBRSxJQUhGO0FBSUxDLElBQUFBLE9BQU8sRUFBRSxFQUpKO0FBS0xDLElBQUFBLGNBQWMsRUFBRSxVQUxYO0FBTUxDLElBQUFBLFVBQVUsRUFBRTtBQU5QO0FBTndCLENBQWxCLENBQWY7O2VBZ0JlLHdCQUFVN0IsU0FBVixDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgVmlldywgSW1hZ2UgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB7IGdyZXkyMDAgfSBmcm9tICcuLi8uLi9zdHlsZXMvY29sb3JzJztcbmltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSBSZWFjdC5FbGVtZW50Q29uZmlnPHR5cGVvZiBJbWFnZT4gJiB7fFxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBpbmRleD86IG51bWJlcixcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdG90YWw/OiBudW1iZXIsXG4gIHN0eWxlPzogYW55LFxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogVGhlbWUsXG58fTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0byBzaG93IGEgY292ZXIgaW1hZ2UgaW5zaWRlIGEgQ2FyZC5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IENhcmQgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8Q2FyZD5cbiAqICAgICA8Q2FyZC5Db3ZlciBzb3VyY2U9e3sgdXJpOiAnaHR0cHM6Ly9waWNzdW0ucGhvdG9zLzcwMCcgfX0gLz5cbiAqICAgPC9DYXJkPlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICpcbiAqIEBleHRlbmRzIEltYWdlIHByb3BzIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL2ltYWdlLmh0bWwjcHJvcHNcbiAqL1xuY2xhc3MgQ2FyZENvdmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdDYXJkLkNvdmVyJztcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBpbmRleCwgdG90YWwsIHN0eWxlLCB0aGVtZSwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHJvdW5kbmVzcyB9ID0gdGhlbWU7XG5cbiAgICBsZXQgY292ZXJTdHlsZTtcblxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgaWYgKHRvdGFsID09PSAxKSB7XG4gICAgICAgIGNvdmVyU3R5bGUgPSB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiByb3VuZG5lc3MsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3ZlclN0eWxlID0ge1xuICAgICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHJvdW5kbmVzcyxcbiAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogcm91bmRuZXNzLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRvdGFsID09PSAnbnVtYmVyJyAmJiBpbmRleCA9PT0gdG90YWwgLSAxKSB7XG4gICAgICBjb3ZlclN0eWxlID0ge1xuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiByb3VuZG5lc3MsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIGNvdmVyU3R5bGUsIHN0eWxlXX0+XG4gICAgICAgIDxJbWFnZSB7Li4ucmVzdH0gc3R5bGU9e1tzdHlsZXMuaW1hZ2UsIGNvdmVyU3R5bGVdfSAvPlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBoZWlnaHQ6IDE5NSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGdyZXkyMDAsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB9LFxuICBpbWFnZToge1xuICAgIGZsZXg6IDEsXG4gICAgaGVpZ2h0OiBudWxsLFxuICAgIHdpZHRoOiBudWxsLFxuICAgIHBhZGRpbmc6IDE2LFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIHJlc2l6ZU1vZGU6ICdjb3ZlcicsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKENhcmRDb3Zlcik7XG4iXX0=