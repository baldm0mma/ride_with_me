{"version":3,"sources":["index.native.js"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","props","style","background","borderless","disabledProp","disabled","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","overflow","React","Children","only","fade","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AAOA;;AACA;;AAGA,IAAMA,wBAAwB,GAAG,EAAjC;AACA,IAAMC,mBAAmB,GAAG,EAA5B;;IAcMC,e;;;;;;;;;;6BAQK;AAAA,wBAWH,KAAKC,KAXF;AAAA,UAELC,KAFK,eAELA,KAFK;AAAA,UAGLC,UAHK,eAGLA,UAHK;AAAA,UAILC,UAJK,eAILA,UAJK;AAAA,UAKKC,YALL,eAKLC,QALK;AAAA,UAMLC,WANK,eAMLA,WANK;AAAA,UAOLC,aAPK,eAOLA,aAPK;AAAA,UAQLC,QARK,eAQLA,QARK;AAAA,UASLC,KATK,eASLA,KATK;AAAA,UAUFC,IAVE;AAAA,UAaCC,IAbD,GAakBF,KAblB,CAaCE,IAbD;AAAA,UAaOC,MAbP,GAakBH,KAblB,CAaOG,MAbP;AAcP,UAAMP,QAAQ,GAAGD,YAAY,IAAI,CAAC,KAAKJ,KAAL,CAAWa,OAA7C;AACA,UAAMC,qBAAqB,GACzBR,WAAW,IACX,oBAAMM,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF;AASA,UAAMC,aAAa,GACjBC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoBxB,mBADpB,IAEAK,UAHF;;AAKA,UAAIJ,eAAe,CAACwB,SAApB,EAA+B;AAC7B,eACE,oBAAC,oCAAD,6BACMb,IADN;AAEE,UAAA,QAAQ,EAAEL,QAFZ;AAGE,UAAA,aAAa,EAAEc,aAHjB;AAIE,UAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIsB,qCAAwBC,MAAxB,CACEX,qBADF,EAEEX,UAFF;AAPR,YAaE,oBAAC,iBAAD;AAAM,UAAA,KAAK,EAAE,CAACA,UAAU,IAAI;AAAEuB,YAAAA,QAAQ,EAAE;AAAZ,WAAf,EAAuCzB,KAAvC;AAAb,WACG0B,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBrB,QAApB,CADH,CAbF,CADF;AAmBD;;AAED,aACE,oBAAC,+BAAD,6BACME,IADN;AAEE,QAAA,QAAQ,EAAEL,QAFZ;AAGE,QAAA,KAAK,EAAE,CAACF,UAAU,IAAI;AAAEuB,UAAAA,QAAQ,EAAE;AAAZ,SAAf,EAAuCzB,KAAvC,CAHT;AAIE,QAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEI,oBAAMO,qBAAN,EACGgB,IADH,CACQ,GADR,EAEGb,GAFH,GAGGC,MAHH;AAPR,UAaGS,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBrB,QAApB,CAbH,CADF;AAiBD;;;EA5E2BmB,KAAK,CAACI,S;;AAA9BhC,e,CACGiC,Y,GAAe;AACpB7B,EAAAA,UAAU,EAAE;AADQ,C;AADlBJ,e,CAKGwB,S,GACLH,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBzB,wB;;eAyEtC,wBAAUE,eAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n  Platform,\n  View,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ElementConfig<typeof TouchableWithoutFeedback> & {|\n  borderless?: boolean,\n  background?: Object,\n  disabled?: boolean,\n  onPress?: ?() => mixed,\n  rippleColor?: string,\n  underlayColor?: string,\n  children: React.Node,\n  style?: any,\n  theme: Theme,\n|};\n\nclass TouchableRipple extends React.Component<Props, void> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  static supported =\n    Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n  render() {\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n\n    const { dark, colors } = theme;\n    const disabled = disabledProp || !this.props.onPress;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n    // https://github.com/facebook/react-native/issues/6480\n    const useForeground =\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_PIE &&\n      borderless;\n\n    if (TouchableRipple.supported) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          disabled={disabled}\n          useForeground={useForeground}\n          background={\n            background != null\n              ? background\n              : TouchableNativeFeedback.Ripple(\n                  calculatedRippleColor,\n                  borderless\n                )\n          }\n        >\n          <View style={[borderless && { overflow: 'hidden' }, style]}>\n            {React.Children.only(children)}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableHighlight\n        {...rest}\n        disabled={disabled}\n        style={[borderless && { overflow: 'hidden' }, style]}\n        underlayColor={\n          underlayColor != null\n            ? underlayColor\n            : color(calculatedRippleColor)\n                .fade(0.5)\n                .rgb()\n                .string()\n        }\n      >\n        {React.Children.only(children)}\n      </TouchableHighlight>\n    );\n  }\n}\n\nexport default withTheme(TouchableRipple);\n"]}