453f6ea90ed5567c735281caf8e1f18f
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var DataTableTitle = function (_React$Component) {
  (0, _inherits2.default)(DataTableTitle, _React$Component);

  function DataTableTitle() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, DataTableTitle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DataTableTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      spinAnim: new _reactNative.Animated.Value(_this.props.sortDirection === 'ascending' ? 0 : 1)
    };
    return _this;
  }

  (0, _createClass2.default)(DataTableTitle, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.sortDirection === this.props.sortDirection) {
        return;
      }

      _reactNative.Animated.timing(this.state.spinAnim, {
        toValue: this.props.sortDirection === 'ascending' ? 0 : 1,
        duration: 150,
        useNativeDriver: true
      }).start();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          numeric = _this$props.numeric,
          children = _this$props.children,
          onPress = _this$props.onPress,
          sortDirection = _this$props.sortDirection,
          theme = _this$props.theme,
          style = _this$props.style,
          numberOfLines = _this$props.numberOfLines,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["numeric", "children", "onPress", "sortDirection", "theme", "style", "numberOfLines"]);
      var textColor = (0, _color.default)(theme.colors.text).alpha(0.6).rgb().string();
      var spin = this.state.spinAnim.interpolate({
        inputRange: [0, 1],
        outputRange: ['0deg', '180deg']
      });
      var icon = sortDirection ? React.createElement(_reactNative.Animated.View, {
        style: [styles.icon, {
          transform: [{
            rotate: spin
          }]
        }]
      }, React.createElement(_Icon.default, {
        source: "arrow-downward",
        size: 16,
        color: theme.colors.text
      })) : null;
      return React.createElement(_reactNative.TouchableWithoutFeedback, (0, _extends2.default)({
        disabled: !onPress,
        onPress: onPress
      }, rest), React.createElement(_reactNative.View, {
        style: [styles.container, numeric && styles.right, style]
      }, icon, React.createElement(_Text.default, {
        style: [styles.cell, sortDirection ? styles.sorted : {
          color: textColor
        }],
        numberOfLines: numberOfLines
      }, children)));
    }
  }]);
  return DataTableTitle;
}(React.Component);

DataTableTitle.displayName = 'DataTable.Title';
DataTableTitle.defaultProps = {
  numberOfLines: 1
};

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
    alignContent: 'center',
    paddingVertical: 12
  },
  right: {
    justifyContent: 'flex-end'
  },
  cell: {
    height: 24,
    lineHeight: 24,
    fontSize: 12,
    fontWeight: '500',
    alignItems: 'center'
  },
  sorted: {
    marginLeft: 8
  },
  icon: {
    height: 24,
    justifyContent: 'center'
  }
});

var _default = (0, _theming.withTheme)(DataTableTitle);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,