6d0726055d13a229dd26cec71e15bdaf
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _CheckboxAndroid = _interopRequireDefault(require("./CheckboxAndroid"));

var _CheckboxIOS = _interopRequireDefault(require("./CheckboxIOS"));

var _theming = require("../core/theming");

var Checkbox = function (_React$Component) {
  (0, _inherits2.default)(Checkbox, _React$Component);

  function Checkbox() {
    (0, _classCallCheck2.default)(this, Checkbox);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Checkbox).apply(this, arguments));
  }

  (0, _createClass2.default)(Checkbox, [{
    key: "render",
    value: function render() {
      return _reactNative.Platform.OS === 'ios' ? React.createElement(_CheckboxIOS.default, this.props) : React.createElement(_CheckboxAndroid.default, this.props);
    }
  }]);
  return Checkbox;
}(React.Component);

Checkbox.Android = _CheckboxAndroid.default;
Checkbox.IOS = _CheckboxIOS.default;

var _default = (0, _theming.withTheme)(Checkbox);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94LmpzIl0sIm5hbWVzIjpbIkNoZWNrYm94IiwiUGxhdGZvcm0iLCJPUyIsInByb3BzIiwiUmVhY3QiLCJDb21wb25lbnQiLCJBbmRyb2lkIiwiQ2hlY2tib3hBbmRyb2lkIiwiSU9TIiwiQ2hlY2tib3hJT1MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUEwRU1BLFE7Ozs7Ozs7Ozs7NkJBT0s7QUFDUCxhQUFPQyxzQkFBU0MsRUFBVCxLQUFnQixLQUFoQixHQUNMLG9CQUFDLG9CQUFELEVBQWlCLEtBQUtDLEtBQXRCLENBREssR0FHTCxvQkFBQyx3QkFBRCxFQUFxQixLQUFLQSxLQUExQixDQUhGO0FBS0Q7OztFQWJvQkMsS0FBSyxDQUFDQyxTOztBQUF2QkwsUSxDQUVHTSxPLEdBQVVDLHdCO0FBRmJQLFEsQ0FLR1EsRyxHQUFNQyxvQjs7ZUFXQSx3QkFBVVQsUUFBVixDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENoZWNrYm94QW5kcm9pZCBmcm9tICcuL0NoZWNrYm94QW5kcm9pZCc7XG5pbXBvcnQgQ2hlY2tib3hJT1MgZnJvbSAnLi9DaGVja2JveElPUyc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHR5cGUgeyBUaGVtZSB9IGZyb20gJy4uL3R5cGVzJztcblxudHlwZSBQcm9wcyA9IHt8XG4gIC8qKlxuICAgKiBTdGF0dXMgb2YgY2hlY2tib3guXG4gICAqL1xuICBzdGF0dXM6ICdjaGVja2VkJyB8ICd1bmNoZWNrZWQnIHwgJ2luZGV0ZXJtaW5hdGUnLFxuICAvKipcbiAgICogV2hldGhlciBjaGVja2JveCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbixcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gcHJlc3MuXG4gICAqL1xuICBvblByZXNzPzogKCkgPT4gbWl4ZWQsXG4gIC8qKlxuICAgKiBDdXN0b20gY29sb3IgZm9yIHVuY2hlY2tlZCBjaGVja2JveC5cbiAgICovXG4gIHVuY2hlY2tlZENvbG9yPzogc3RyaW5nLFxuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciBjaGVja2JveC5cbiAgICovXG4gIGNvbG9yPzogc3RyaW5nLFxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogVGhlbWUsXG58fTtcblxuLyoqXG4gKiBDaGVja2JveGVzIGFsbG93IHRoZSBzZWxlY3Rpb24gb2YgbXVsdGlwbGUgb3B0aW9ucyBmcm9tIGEgc2V0LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvY2hlY2tib3gtZW5hYmxlZC5hbmRyb2lkLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+QW5kcm9pZCAoZW5hYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvY2hlY2tib3gtZGlzYWJsZWQuYW5kcm9pZC5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkFuZHJvaWQgKGRpc2FibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9jaGVja2JveC1lbmFibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPmlPUyAoZW5hYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvY2hlY2tib3gtZGlzYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+aU9TIChkaXNhYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICogICBzdGF0ZSA9IHtcbiAqICAgICBjaGVja2VkOiBmYWxzZSxcbiAqICAgfTtcbiAqXG4gKiAgIHJlbmRlcigpIHtcbiAqICAgICBjb25zdCB7IGNoZWNrZWQgfSA9IHRoaXMuc3RhdGU7XG4gKiAgICAgcmV0dXJuIChcbiAqICAgICAgIDxDaGVja2JveFxuICogICAgICAgICBzdGF0dXM9e2NoZWNrZWQgPyAnY2hlY2tlZCcgOiAndW5jaGVja2VkJ31cbiAqICAgICAgICAgb25QcmVzcz17KCkgPT4geyB0aGlzLnNldFN0YXRlKHsgY2hlY2tlZDogIWNoZWNrZWQgfSk7IH19XG4gKiAgICAgICAvPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBDaGVja2JveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAvLyBAY29tcG9uZW50IC4vQ2hlY2tib3hBbmRyb2lkLmpzXG4gIHN0YXRpYyBBbmRyb2lkID0gQ2hlY2tib3hBbmRyb2lkO1xuXG4gIC8vIEBjb21wb25lbnQgLi9DaGVja2JveElPUy5qc1xuICBzdGF0aWMgSU9TID0gQ2hlY2tib3hJT1M7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgPyAoXG4gICAgICA8Q2hlY2tib3hJT1Mgey4uLnRoaXMucHJvcHN9IC8+XG4gICAgKSA6IChcbiAgICAgIDxDaGVja2JveEFuZHJvaWQgey4uLnRoaXMucHJvcHN9IC8+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQ2hlY2tib3gpO1xuIl19