{"version":3,"sources":["createNativeWrapper.js"],"names":["NATIVE_WRAPPER_BIND_BLACKLIST","Set","NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","ComponentWrapper","_refHandler","node","source","Object","getOwnPropertyNames","methodName","startsWith","has","undefined","prototype","bind","getPrototypeOf","gestureHandlerProps","keys","props","reduce","key","indexOf","React","propTypes","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;AAEA,IAAMA,6BAA6B,GAAG,IAAIC,GAAJ,CAAQ,CAAC,cAAD,EAAiB,WAAjB,CAAR,CAAtC;AASA,IAAMC,2BAA2B,GAAG,CAClC,IADkC,EAElC,aAFkC,EAGlC,SAHkC,EAIlC,SAJkC,EAKlC,sBALkC,EAMlC,yBANkC,EAOlC,SAPkC,EAQlC,gBARkC,EASlC,sBATkC,EAUlC,SAVkC,EAWlC,UAXkC,EAYlC,aAZkC,EAalC,aAbkC,EAclC,SAdkC,EAelC,uBAfkC,EAgBlC,sBAhBkC,EAiBlC,uBAjBkC,EAkBlC,6BAlBkC,CAApC;;AAqBe,SAASC,mBAAT,CAA6BC,SAA7B,EAAqD;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAAA,MAC5DC,gBAD4D;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,YAQhEC,WARgE,GAQlD,UAAAC,IAAI,EAAI;AAEpB,YAAIC,MAAM,GAAGD,IAAb;;AACA,eAAOC,MAAM,IAAI,IAAjB,EAAuB;AACrB,+BAAuBC,MAAM,CAACC,mBAAP,CAA2BF,MAA3B,CAAvB,4PAA2D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAAlDG,WAAkD;;AACzD,gBACE,CAACA,WAAU,CAACC,UAAX,CAAsB,GAAtB,CAAD,IACA,CAACD,WAAU,CAACC,UAAX,CAAsB,WAAtB,CADD,IAEA,CAACb,6BAA6B,CAACc,GAA9B,CAAkCF,WAAlC,CAFD,IAGA,OAAOH,MAAM,CAACG,WAAD,CAAb,KAA8B,UAH9B,IAIA,MAAKA,WAAL,MAAqBG,SALvB,EAME;AACA,kBAAIN,MAAM,CAACG,WAAD,CAAN,CAAmBI,SAAvB,EAAkC;AAEhC,sBAAKJ,WAAL,IAAmBH,MAAM,CAACG,WAAD,CAAN,CAAmBK,IAAnB,CAAwBT,IAAxB,CAAnB;AACD,eAHD,MAGO;AACL,sBAAKI,WAAL,IAAmBH,MAAM,CAACG,WAAD,CAAzB;AACD;AACF;AACF;;AACDH,UAAAA,MAAM,GAAGC,MAAM,CAACQ,cAAP,CAAsBT,MAAtB,CAAT;AACD;AACF,OA9B+D;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAgCvD;AAAA;;AAEP,YAAMU,mBAAmB,GAAGT,MAAM,CAACU,IAAP,CAAY,KAAKC,KAAjB,EAAwBC,MAAxB,CAC1B,UAACD,KAAD,EAAQE,GAAR,EAAgB;AACd,cAAIrB,2BAA2B,CAACsB,OAA5B,CAAoCD,GAApC,MAA6C,CAAC,CAAlD,EAAqD;AACnDF,YAAAA,KAAK,CAACE,GAAD,CAAL,GAAa,MAAI,CAACF,KAAL,CAAWE,GAAX,CAAb;AACD;;AACD,iBAAOF,KAAP;AACD,SANyB,oBAOrBhB,MAPqB,EAA5B;AASA,eACE,6BAAC,iCAAD,EAA8Bc,mBAA9B,EACE,6BAAC,SAAD,6BAAe,KAAKE,KAApB;AAA2B,UAAA,GAAG,EAAE,KAAKd;AAArC,WADF,CADF;AAKD;AAhD+D;AAAA;AAAA,IACnCkB,eAAMrB,SAD6B;;AAC5DE,EAAAA,gBAD4D,CAEzDoB,SAFyD,qBAG3DtB,SAAS,CAACsB,SAHiD;AAC5DpB,EAAAA,gBAD4D,CAMzDqB,WANyD,GAM3CvB,SAAS,CAACuB,WAAV,IAAyB,kBANkB;AAkDlE,SAAOrB,gBAAP;AACD","sourcesContent":["import React from 'react';\n\nimport NativeViewGestureHandler from './NativeViewGestureHandler';\n\nconst NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  'id',\n  'minPointers',\n  'enabled',\n  'waitFor',\n  'simultaneousHandlers',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n  'onGestureEvent',\n  'onHandlerStateChange',\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'shouldActivateOnStart',\n  'disallowInterruption',\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n];\n\nexport default function createNativeWrapper(Component, config = {}) {\n  class ComponentWrapper extends React.Component {\n    static propTypes = {\n      ...Component.propTypes,\n    };\n\n    static displayName = Component.displayName || 'ComponentWrapper';\n\n    _refHandler = node => {\n      // bind native component's methods\n      let source = node;\n      while (source != null) {\n        for (let methodName of Object.getOwnPropertyNames(source)) {\n          if (\n            !methodName.startsWith('_') && // private methods\n            !methodName.startsWith('component') && // lifecycle methods\n            !NATIVE_WRAPPER_BIND_BLACKLIST.has(methodName) && // other\n            typeof source[methodName] === 'function' &&\n            this[methodName] === undefined\n          ) {\n            if (source[methodName].prototype) {\n              // determine if it's not bound already\n              this[methodName] = source[methodName].bind(node);\n            } else {\n              this[methodName] = source[methodName];\n            }\n          }\n        }\n        source = Object.getPrototypeOf(source);\n      }\n    };\n\n    render() {\n      // filter out props that should be passed to gesture handler wrapper\n      const gestureHandlerProps = Object.keys(this.props).reduce(\n        (props, key) => {\n          if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {\n            props[key] = this.props[key];\n          }\n          return props;\n        },\n        { ...config } // watch out not to modify config\n      );\n      return (\n        <NativeViewGestureHandler {...gestureHandlerProps}>\n          <Component {...this.props} ref={this._refHandler} />\n        </NativeViewGestureHandler>\n      );\n    }\n  }\n  return ComponentWrapper;\n}\n"]}