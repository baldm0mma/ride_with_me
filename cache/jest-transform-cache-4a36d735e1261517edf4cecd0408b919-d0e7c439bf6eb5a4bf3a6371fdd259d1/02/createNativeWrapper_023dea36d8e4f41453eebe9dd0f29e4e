87e91d58414c1a28c79f22c7dfbe4a96
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createNativeWrapper;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _NativeViewGestureHandler = _interopRequireDefault(require("./NativeViewGestureHandler"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);
var NATIVE_WRAPPER_PROPS_FILTER = ['id', 'minPointers', 'enabled', 'waitFor', 'simultaneousHandlers', 'shouldCancelWhenOutside', 'hitSlop', 'onGestureEvent', 'onHandlerStateChange', 'onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'shouldActivateOnStart', 'disallowInterruption', 'onGestureHandlerEvent', 'onGestureHandlerStateChange'];

function createNativeWrapper(Component) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var ComponentWrapper = function (_React$Component) {
    (0, _inherits2.default)(ComponentWrapper, _React$Component);

    function ComponentWrapper() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ComponentWrapper);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ComponentWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._refHandler = function (node) {
        var source = node;

        while (source != null) {
          for (var _iterator = Object.getOwnPropertyNames(source), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _methodName = _ref;

            if (!_methodName.startsWith('_') && !_methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(_methodName) && typeof source[_methodName] === 'function' && _this[_methodName] === undefined) {
              if (source[_methodName].prototype) {
                _this[_methodName] = source[_methodName].bind(node);
              } else {
                _this[_methodName] = source[_methodName];
              }
            }
          }

          source = Object.getPrototypeOf(source);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(ComponentWrapper, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var gestureHandlerProps = Object.keys(this.props).reduce(function (props, key) {
          if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {
            props[key] = _this2.props[key];
          }

          return props;
        }, _objectSpread({}, config));
        return _react.default.createElement(_NativeViewGestureHandler.default, gestureHandlerProps, _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
          ref: this._refHandler
        })));
      }
    }]);
    return ComponentWrapper;
  }(_react.default.Component);

  ComponentWrapper.propTypes = _objectSpread({}, Component.propTypes);
  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';
  return ComponentWrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZU5hdGl2ZVdyYXBwZXIuanMiXSwibmFtZXMiOlsiTkFUSVZFX1dSQVBQRVJfQklORF9CTEFDS0xJU1QiLCJTZXQiLCJOQVRJVkVfV1JBUFBFUl9QUk9QU19GSUxURVIiLCJjcmVhdGVOYXRpdmVXcmFwcGVyIiwiQ29tcG9uZW50IiwiY29uZmlnIiwiQ29tcG9uZW50V3JhcHBlciIsIl9yZWZIYW5kbGVyIiwibm9kZSIsInNvdXJjZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJtZXRob2ROYW1lIiwic3RhcnRzV2l0aCIsImhhcyIsInVuZGVmaW5lZCIsInByb3RvdHlwZSIsImJpbmQiLCJnZXRQcm90b3R5cGVPZiIsImdlc3R1cmVIYW5kbGVyUHJvcHMiLCJrZXlzIiwicHJvcHMiLCJyZWR1Y2UiLCJrZXkiLCJpbmRleE9mIiwiUmVhY3QiLCJwcm9wVHlwZXMiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7Ozs7OztBQUVBLElBQU1BLDZCQUE2QixHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUFDLGNBQUQsRUFBaUIsV0FBakIsQ0FBUixDQUF0QztBQVNBLElBQU1DLDJCQUEyQixHQUFHLENBQ2xDLElBRGtDLEVBRWxDLGFBRmtDLEVBR2xDLFNBSGtDLEVBSWxDLFNBSmtDLEVBS2xDLHNCQUxrQyxFQU1sQyx5QkFOa0MsRUFPbEMsU0FQa0MsRUFRbEMsZ0JBUmtDLEVBU2xDLHNCQVRrQyxFQVVsQyxTQVZrQyxFQVdsQyxVQVhrQyxFQVlsQyxhQVprQyxFQWFsQyxhQWJrQyxFQWNsQyxTQWRrQyxFQWVsQyx1QkFma0MsRUFnQmxDLHNCQWhCa0MsRUFpQmxDLHVCQWpCa0MsRUFrQmxDLDZCQWxCa0MsQ0FBcEM7O0FBcUJlLFNBQVNDLG1CQUFULENBQTZCQyxTQUE3QixFQUFxRDtBQUFBLE1BQWJDLE1BQWEsdUVBQUosRUFBSTs7QUFBQSxNQUM1REMsZ0JBRDREO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUEsWUFRaEVDLFdBUmdFLEdBUWxELFVBQUFDLElBQUksRUFBSTtBQUVwQixZQUFJQyxNQUFNLEdBQUdELElBQWI7O0FBQ0EsZUFBT0MsTUFBTSxJQUFJLElBQWpCLEVBQXVCO0FBQ3JCLCtCQUF1QkMsTUFBTSxDQUFDQyxtQkFBUCxDQUEyQkYsTUFBM0IsQ0FBdkIsNFBBQTJEO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFBbERHLFdBQWtEOztBQUN6RCxnQkFDRSxDQUFDQSxXQUFVLENBQUNDLFVBQVgsQ0FBc0IsR0FBdEIsQ0FBRCxJQUNBLENBQUNELFdBQVUsQ0FBQ0MsVUFBWCxDQUFzQixXQUF0QixDQURELElBRUEsQ0FBQ2IsNkJBQTZCLENBQUNjLEdBQTlCLENBQWtDRixXQUFsQyxDQUZELElBR0EsT0FBT0gsTUFBTSxDQUFDRyxXQUFELENBQWIsS0FBOEIsVUFIOUIsSUFJQSxNQUFLQSxXQUFMLE1BQXFCRyxTQUx2QixFQU1FO0FBQ0Esa0JBQUlOLE1BQU0sQ0FBQ0csV0FBRCxDQUFOLENBQW1CSSxTQUF2QixFQUFrQztBQUVoQyxzQkFBS0osV0FBTCxJQUFtQkgsTUFBTSxDQUFDRyxXQUFELENBQU4sQ0FBbUJLLElBQW5CLENBQXdCVCxJQUF4QixDQUFuQjtBQUNELGVBSEQsTUFHTztBQUNMLHNCQUFLSSxXQUFMLElBQW1CSCxNQUFNLENBQUNHLFdBQUQsQ0FBekI7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0RILFVBQUFBLE1BQU0sR0FBR0MsTUFBTSxDQUFDUSxjQUFQLENBQXNCVCxNQUF0QixDQUFUO0FBQ0Q7QUFDRixPQTlCK0Q7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsK0JBZ0N2RDtBQUFBOztBQUVQLFlBQU1VLG1CQUFtQixHQUFHVCxNQUFNLENBQUNVLElBQVAsQ0FBWSxLQUFLQyxLQUFqQixFQUF3QkMsTUFBeEIsQ0FDMUIsVUFBQ0QsS0FBRCxFQUFRRSxHQUFSLEVBQWdCO0FBQ2QsY0FBSXJCLDJCQUEyQixDQUFDc0IsT0FBNUIsQ0FBb0NELEdBQXBDLE1BQTZDLENBQUMsQ0FBbEQsRUFBcUQ7QUFDbkRGLFlBQUFBLEtBQUssQ0FBQ0UsR0FBRCxDQUFMLEdBQWEsTUFBSSxDQUFDRixLQUFMLENBQVdFLEdBQVgsQ0FBYjtBQUNEOztBQUNELGlCQUFPRixLQUFQO0FBQ0QsU0FOeUIsb0JBT3JCaEIsTUFQcUIsRUFBNUI7QUFTQSxlQUNFLDZCQUFDLGlDQUFELEVBQThCYyxtQkFBOUIsRUFDRSw2QkFBQyxTQUFELDZCQUFlLEtBQUtFLEtBQXBCO0FBQTJCLFVBQUEsR0FBRyxFQUFFLEtBQUtkO0FBQXJDLFdBREYsQ0FERjtBQUtEO0FBaEQrRDtBQUFBO0FBQUEsSUFDbkNrQixlQUFNckIsU0FENkI7O0FBQzVERSxFQUFBQSxnQkFENEQsQ0FFekRvQixTQUZ5RCxxQkFHM0R0QixTQUFTLENBQUNzQixTQUhpRDtBQUM1RHBCLEVBQUFBLGdCQUQ0RCxDQU16RHFCLFdBTnlELEdBTTNDdkIsU0FBUyxDQUFDdUIsV0FBVixJQUF5QixrQkFOa0I7QUFrRGxFLFNBQU9yQixnQkFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciBmcm9tICcuL05hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlcic7XG5cbmNvbnN0IE5BVElWRV9XUkFQUEVSX0JJTkRfQkxBQ0tMSVNUID0gbmV3IFNldChbJ3JlcGxhY2VTdGF0ZScsICdpc01vdW50ZWQnXSk7XG5cbi8qXG4gKiBUaGlzIGFycmF5IHNob3VsZCBjb25zaXN0IG9mOlxuICogICAtIEFsbCBrZXlzIGluIHByb3BUeXBlcyBmcm9tIE5hdGl2ZUdlc3R1cmVIYW5kbGVyXG4gKiAgICAgKGFuZCBhbGwga2V5cyBpbiBHZXN0dXJlSGFuZGxlclByb3BUeXBlcylcbiAqICAgLSAnb25HZXN0dXJlSGFuZGxlckV2ZW50J1xuICogICAtICdvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UnXG4gKi9cbmNvbnN0IE5BVElWRV9XUkFQUEVSX1BST1BTX0ZJTFRFUiA9IFtcbiAgJ2lkJyxcbiAgJ21pblBvaW50ZXJzJyxcbiAgJ2VuYWJsZWQnLFxuICAnd2FpdEZvcicsXG4gICdzaW11bHRhbmVvdXNIYW5kbGVycycsXG4gICdzaG91bGRDYW5jZWxXaGVuT3V0c2lkZScsXG4gICdoaXRTbG9wJyxcbiAgJ29uR2VzdHVyZUV2ZW50JyxcbiAgJ29uSGFuZGxlclN0YXRlQ2hhbmdlJyxcbiAgJ29uQmVnYW4nLFxuICAnb25GYWlsZWQnLFxuICAnb25DYW5jZWxsZWQnLFxuICAnb25BY3RpdmF0ZWQnLFxuICAnb25FbmRlZCcsXG4gICdzaG91bGRBY3RpdmF0ZU9uU3RhcnQnLFxuICAnZGlzYWxsb3dJbnRlcnJ1cHRpb24nLFxuICAnb25HZXN0dXJlSGFuZGxlckV2ZW50JyxcbiAgJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZScsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVOYXRpdmVXcmFwcGVyKENvbXBvbmVudCwgY29uZmlnID0ge30pIHtcbiAgY2xhc3MgQ29tcG9uZW50V3JhcHBlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgIC4uLkNvbXBvbmVudC5wcm9wVHlwZXMsXG4gICAgfTtcblxuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCAnQ29tcG9uZW50V3JhcHBlcic7XG5cbiAgICBfcmVmSGFuZGxlciA9IG5vZGUgPT4ge1xuICAgICAgLy8gYmluZCBuYXRpdmUgY29tcG9uZW50J3MgbWV0aG9kc1xuICAgICAgbGV0IHNvdXJjZSA9IG5vZGU7XG4gICAgICB3aGlsZSAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgbWV0aG9kTmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1ldGhvZE5hbWUuc3RhcnRzV2l0aCgnXycpICYmIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgICAgICAgICAgIW1ldGhvZE5hbWUuc3RhcnRzV2l0aCgnY29tcG9uZW50JykgJiYgLy8gbGlmZWN5Y2xlIG1ldGhvZHNcbiAgICAgICAgICAgICFOQVRJVkVfV1JBUFBFUl9CSU5EX0JMQUNLTElTVC5oYXMobWV0aG9kTmFtZSkgJiYgLy8gb3RoZXJcbiAgICAgICAgICAgIHR5cGVvZiBzb3VyY2VbbWV0aG9kTmFtZV0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZVttZXRob2ROYW1lXS5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGl0J3Mgbm90IGJvdW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHNvdXJjZVttZXRob2ROYW1lXS5iaW5kKG5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgIC8vIGZpbHRlciBvdXQgcHJvcHMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIGdlc3R1cmUgaGFuZGxlciB3cmFwcGVyXG4gICAgICBjb25zdCBnZXN0dXJlSGFuZGxlclByb3BzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcykucmVkdWNlKFxuICAgICAgICAocHJvcHMsIGtleSkgPT4ge1xuICAgICAgICAgIGlmIChOQVRJVkVfV1JBUFBFUl9QUk9QU19GSUxURVIuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHRoaXMucHJvcHNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9LFxuICAgICAgICB7IC4uLmNvbmZpZyB9IC8vIHdhdGNoIG91dCBub3QgdG8gbW9kaWZ5IGNvbmZpZ1xuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIgey4uLmdlc3R1cmVIYW5kbGVyUHJvcHN9PlxuICAgICAgICAgIDxDb21wb25lbnQgey4uLnRoaXMucHJvcHN9IHJlZj17dGhpcy5fcmVmSGFuZGxlcn0gLz5cbiAgICAgICAgPC9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXI+XG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQ29tcG9uZW50V3JhcHBlcjtcbn1cbiJdfQ==