2e7dd781e4dc2524e45759505a1ecaee
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _Caption = _interopRequireDefault(require("./../Typography/Caption"));

var _Title = _interopRequireDefault(require("./../Typography/Title"));

var LEFT_SIZE = 40;

var CardTitle = function (_React$Component) {
  (0, _inherits2.default)(CardTitle, _React$Component);

  function CardTitle() {
    (0, _classCallCheck2.default)(this, CardTitle);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardTitle).apply(this, arguments));
  }

  (0, _createClass2.default)(CardTitle, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          left = _this$props.left,
          leftStyle = _this$props.leftStyle,
          right = _this$props.right,
          rightStyle = _this$props.rightStyle,
          subtitle = _this$props.subtitle,
          subtitleStyle = _this$props.subtitleStyle,
          style = _this$props.style,
          title = _this$props.title,
          titleStyle = _this$props.titleStyle;
      return React.createElement(_reactNative.View, {
        style: [styles.container, {
          height: subtitle || left || right ? 72 : 50
        }, style]
      }, left ? React.createElement(_reactNative.View, {
        style: [styles.left, leftStyle]
      }, left({
        size: LEFT_SIZE
      })) : null, React.createElement(_reactNative.View, {
        style: [styles.titles]
      }, title ? React.createElement(_Title.default, {
        style: [styles.title, {
          marginBottom: subtitle ? 0 : 2
        }, titleStyle],
        numberOfLines: 1
      }, title) : null, subtitle ? React.createElement(_Caption.default, {
        style: [styles.subtitle, subtitleStyle],
        numberOfLines: 1
      }, subtitle) : null), React.createElement(_reactNative.View, {
        style: rightStyle
      }, right ? right({
        size: 24
      }) : null));
    }
  }]);
  return CardTitle;
}(React.Component);

CardTitle.displayName = 'Card.Title';

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingLeft: 16
  },
  left: {
    justifyContent: 'center',
    marginRight: 16,
    height: LEFT_SIZE,
    width: LEFT_SIZE
  },
  titles: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
    height: 50
  },
  title: {
    minHeight: 30
  },
  subtitle: {
    minHeight: 20,
    marginVertical: 0
  }
});

var _default = (0, _theming.withTheme)(CardTitle);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,