451f7999cb10c8bc217f9209b5601c6e
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_APPBAR_HEIGHT = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _AppbarContent = _interopRequireDefault(require("./AppbarContent"));

var _AppbarAction = _interopRequireDefault(require("./AppbarAction"));

var _AppbarBackAction = _interopRequireDefault(require("./AppbarBackAction"));

var _AppbarHeader = _interopRequireDefault(require("./AppbarHeader"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _theming = require("../../core/theming");

var _colors = require("../../styles/colors");

var DEFAULT_APPBAR_HEIGHT = 56;
exports.DEFAULT_APPBAR_HEIGHT = DEFAULT_APPBAR_HEIGHT;

var Appbar = function (_React$Component) {
  (0, _inherits2.default)(Appbar, _React$Component);

  function Appbar() {
    (0, _classCallCheck2.default)(this, Appbar);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Appbar).apply(this, arguments));
  }

  (0, _createClass2.default)(Appbar, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          dark = _this$props.dark,
          style = _this$props.style,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "dark", "style", "theme"]);
      var colors = theme.colors;

      var _ref = _reactNative.StyleSheet.flatten(style) || {},
          _ref$backgroundColor = _ref.backgroundColor,
          backgroundColor = _ref$backgroundColor === void 0 ? colors.primary : _ref$backgroundColor,
          restStyle = (0, _objectWithoutProperties2.default)(_ref, ["backgroundColor"]);

      var isDark;

      if (typeof dark === 'boolean') {
        isDark = dark;
      } else {
        isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).light();
      }

      var shouldCenterContent = false;
      var shouldAddLeftSpacing = false;
      var shouldAddRightSpacing = false;

      if (_reactNative.Platform.OS === 'ios') {
        var hasAppbarContent = false;
        var leftItemsCount = 0;
        var rightItemsCount = 0;
        React.Children.forEach(children, function (child) {
          if (React.isValidElement(child)) {
            if (child.type === _AppbarContent.default) {
              hasAppbarContent = true;
            } else if (hasAppbarContent) {
              rightItemsCount++;
            } else {
              leftItemsCount++;
            }
          }
        });
        shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;
        shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
        shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
      }

      return React.createElement(_Surface.default, (0, _extends2.default)({
        style: [{
          backgroundColor: backgroundColor
        }, styles.appbar, restStyle]
      }, rest), shouldAddLeftSpacing ? React.createElement(_reactNative.View, {
        style: styles.spacing
      }) : null, React.Children.toArray(children).filter(function (child) {
        return child != null && typeof child !== 'boolean';
      }).map(function (child, i) {
        if (!React.isValidElement(child) || ![_AppbarContent.default, _AppbarAction.default, _AppbarBackAction.default].includes(child.type)) {
          return child;
        }

        var props = {
          color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? _colors.white : _colors.black
        };

        if (child.type === _AppbarContent.default) {
          props.style = [i !== 0 && {
            marginLeft: 8
          }, shouldCenterContent && {
            alignItems: 'center'
          }, child.props.style];
        }

        return React.cloneElement(child, props);
      }), shouldAddRightSpacing ? React.createElement(_reactNative.View, {
        style: styles.spacing
      }) : null);
    }
  }]);
  return Appbar;
}(React.Component);

Appbar.Content = _AppbarContent.default;
Appbar.Action = _AppbarAction.default;
Appbar.BackAction = _AppbarBackAction.default;
Appbar.Header = _AppbarHeader.default;

var styles = _reactNative.StyleSheet.create({
  appbar: {
    height: DEFAULT_APPBAR_HEIGHT,
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 4,
    elevation: 4
  },
  spacing: {
    width: 48
  }
});

var _default = (0, _theming.withTheme)(Appbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,