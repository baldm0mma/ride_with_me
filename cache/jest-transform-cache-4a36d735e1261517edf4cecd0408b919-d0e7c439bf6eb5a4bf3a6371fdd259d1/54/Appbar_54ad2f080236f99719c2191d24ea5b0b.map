{"version":3,"sources":["Appbar.js"],"names":["DEFAULT_APPBAR_HEIGHT","Appbar","props","children","dark","style","theme","rest","colors","StyleSheet","flatten","backgroundColor","primary","restStyle","isDark","light","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","OS","hasAppbarContent","leftItemsCount","rightItemsCount","React","Children","forEach","child","isValidElement","type","AppbarContent","styles","appbar","spacing","toArray","filter","map","i","AppbarAction","AppbarBackAction","includes","color","white","black","marginLeft","alignItems","cloneElement","Component","Content","Action","BackAction","Header","AppbarHeader","create","height","flexDirection","paddingHorizontal","elevation","width"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport AppbarHeader from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport type { Theme } from '../../types';\n\ntype Props = React.ElementConfig<typeof View> & {|\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean,\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.Node,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  style?: any,\n|};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Appbar style={styles.bottom}>\n *         <Appbar.Action icon=\"archive\" onPress={() => console.log('Pressed archive')} />\n *         <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *         <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *         <Appbar.Action icon=\"delete\" onPress={() => console.log('Pressed delete')} />\n *       </Appbar>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nclass Appbar extends React.Component<Props> {\n  // @component ./AppbarContent.js\n  static Content = AppbarContent;\n  // @component ./AppbarAction.js\n  static Action = AppbarAction;\n  // @component ./AppbarBackAction.js\n  static BackAction = AppbarBackAction;\n  // @component ./AppbarHeader.js\n  static Header = AppbarHeader;\n\n  render() {\n    const { children, dark, style, theme, ...rest } = this.props;\n\n    const { colors } = theme;\n    const { backgroundColor = colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).light();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n\n    if (Platform.OS === 'ios') {\n      let hasAppbarContent = false;\n      let leftItemsCount = 0;\n      let rightItemsCount = 0;\n\n      React.Children.forEach(children, child => {\n        if (React.isValidElement(child)) {\n          if (child.type === AppbarContent) {\n            hasAppbarContent = true;\n          } else if (hasAppbarContent) {\n            rightItemsCount++;\n          } else {\n            leftItemsCount++;\n          }\n        }\n      });\n\n      shouldCenterContent =\n        hasAppbarContent && (leftItemsCount < 2 && rightItemsCount < 2);\n      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n\n    return (\n      <Surface\n        style={[{ backgroundColor }, styles.appbar, restStyle]}\n        {...rest}\n      >\n        {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              !React.isValidElement(child) ||\n              ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n                child.type\n              )\n            ) {\n              return child;\n            }\n\n            const props: { color: ?string, style?: any } = {\n              color:\n                typeof child.props.color !== 'undefined'\n                  ? child.props.color\n                  : isDark\n                    ? white\n                    : black,\n            };\n\n            if (child.type === AppbarContent) {\n              props.style = [\n                // Since content is not first item, add extra left margin\n                i !== 0 && { marginLeft: 8 },\n                shouldCenterContent && { alignItems: 'center' },\n                child.props.style,\n              ];\n            }\n\n            return React.cloneElement(child, props);\n          })}\n        {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n"]}