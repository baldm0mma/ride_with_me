{"version":3,"sources":["Badge.js"],"names":["Badge","state","opacity","Animated","Value","props","visible","prevProps","timing","toValue","duration","useNativeDriver","start","children","size","style","theme","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","light","black","white","borderRadius","color","fontSize","fontFamily","fonts","regular","lineHeight","height","minWidth","styles","container","React","Component","defaultProps","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;IA2CMA,K;;;;;;;;;;;;;;;UAMJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,IAAIC,sBAASC,KAAb,CAAmB,MAAKC,KAAL,CAAWC,OAAX,GAAqB,CAArB,GAAyB,CAA5C;AADH,K;;;;;;uCAIWC,S,EAAkB;AAAA,UAC3BD,OAD2B,GACf,KAAKD,KADU,CAC3BC,OAD2B;;AAGnC,UAAIA,OAAO,KAAKC,SAAS,CAACD,OAA1B,EAAmC;AACjCH,8BAASK,MAAT,CAAgB,KAAKP,KAAL,CAAWC,OAA3B,EAAoC;AAClCO,UAAAA,OAAO,EAAEH,OAAO,GAAG,CAAH,GAAO,CADW;AAElCI,UAAAA,QAAQ,EAAE,GAFwB;AAGlCC,UAAAA,eAAe,EAAE;AAHiB,SAApC,EAIGC,KAJH;AAKD;AACF;;;6BAEQ;AAAA,wBACkC,KAAKP,KADvC;AAAA,UACCQ,QADD,eACCA,QADD;AAAA,UACWC,IADX,eACWA,IADX;AAAA,UACiBC,KADjB,eACiBA,KADjB;AAAA,UACwBC,KADxB,eACwBA,KADxB;AAAA,UAECd,OAFD,GAEa,KAAKD,KAFlB,CAECC,OAFD;;AAAA,iBAKLe,wBAAWC,OAAX,CAAmBH,KAAnB,KAA6B,EALxB;AAAA,sCAICI,eAJD;AAAA,UAICA,eAJD,qCAImBH,KAAK,CAACI,MAAN,CAAaC,YAJhC;AAAA,UAIiDC,SAJjD;;AAMP,UAAMC,SAAS,GAAG,oBAAMJ,eAAN,EAAuBK,KAAvB,KAAiCC,aAAjC,GAAyCC,aAA3D;AAEA,UAAMC,YAAY,GAAGb,IAAI,GAAG,CAA5B;AAEA,aACE,oBAAC,qBAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAE,CADjB;AAEE,QAAA,KAAK,EAAE,CACL;AACEZ,UAAAA,OAAO,EAAPA,OADF;AAEEiB,UAAAA,eAAe,EAAfA,eAFF;AAGES,UAAAA,KAAK,EAAEL,SAHT;AAIEM,UAAAA,QAAQ,EAAEf,IAAI,GAAG,GAJnB;AAKEgB,UAAAA,UAAU,EAAEd,KAAK,CAACe,KAAN,CAAYC,OAL1B;AAMEC,UAAAA,UAAU,EAAEnB,IANd;AAOEoB,UAAAA,MAAM,EAAEpB,IAPV;AAQEqB,UAAAA,QAAQ,EAAErB,IARZ;AASEa,UAAAA,YAAY,EAAZA;AATF,SADK,EAYLS,MAAM,CAACC,SAZF,EAaLf,SAbK;AAFT,SAkBGT,QAlBH,CADF;AAsBD;;;EAtDiByB,KAAK,CAACC,S;;AAApBvC,K,CACGwC,Y,GAAe;AACpBlC,EAAAA,OAAO,EAAE,IADW;AAEpBQ,EAAAA,IAAI,EAAE;AAFc,C;;eAwDT,wBAAUd,KAAV,C;;;;AAEf,IAAMoC,MAAM,GAAGnB,wBAAWwB,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,SAAS,EAAE,UADF;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,iBAAiB,EAAE,QAHV;AAITC,IAAAA,iBAAiB,EAAE,CAJV;AAKTC,IAAAA,QAAQ,EAAE;AALD;AADoB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\ntype Props = {|\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean,\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number,\n  /**\n   * Size of the `Badge`.\n   */\n  size: number,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  opacity: Animated.Value,\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: 20,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const { children, size, style, theme } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).light() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            fontFamily: theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}