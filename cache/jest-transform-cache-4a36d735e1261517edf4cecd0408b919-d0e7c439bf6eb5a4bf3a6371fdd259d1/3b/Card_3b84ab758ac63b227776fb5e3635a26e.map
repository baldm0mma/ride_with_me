{"version":3,"sources":["Card.js"],"names":["Card","state","elevation","Animated","Value","props","_handlePressIn","timing","toValue","duration","start","_handlePressOut","children","cardElevation","onLongPress","onPress","style","theme","testID","accessible","rest","roundness","total","React","Children","count","siblings","map","child","isValidElement","type","displayName","borderRadius","undefined","styles","innerContainer","index","cloneElement","Component","Content","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","defaultProps","StyleSheet","create","flexGrow"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  TouchableWithoutFeedback,\n  StyleSheet,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\nimport CardCover from './CardCover';\nimport CardTitle from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\ntype Props = React.ElementConfig<typeof Surface> & {|\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation: number,\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => mixed,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Content of the `Card`.\n   */\n  children: React.Node,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string,\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean,\n|};\n\ntype State = {\n  elevation: Animated.Value,\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={(props) => <Avatar.Icon {...props} icon=\"folder\" />} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Card extends React.Component<Props, State> {\n  // @component ./CardContent.js\n  static Content = CardContent;\n  // @component ./CardActions.js\n  static Actions = CardActions;\n  // @component ./CardCover.js\n  static Cover = CardCover;\n  // @component ./CardTitle.js\n  static Title = CardTitle;\n\n  static defaultProps = {\n    elevation: 1,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.elevation),\n  };\n\n  _handlePressIn = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 8,\n      duration: 150,\n    }).start();\n  };\n\n  _handlePressOut = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: this.props.elevation,\n      duration: 150,\n    }).start();\n  };\n\n  render() {\n    const {\n      children,\n      elevation: cardElevation,\n      onLongPress,\n      onPress,\n      style,\n      theme,\n      testID,\n      accessible,\n      ...rest\n    } = this.props;\n    const { elevation } = this.state;\n    const { roundness } = theme;\n    const total = React.Children.count(children);\n    const siblings = React.Children.map(\n      children,\n      child =>\n        React.isValidElement(child) && child.type\n          ? child.type.displayName\n          : null\n    );\n    return (\n      <Surface\n        style={[{ borderRadius: roundness, elevation }, style]}\n        {...rest}\n      >\n        <TouchableWithoutFeedback\n          delayPressIn={0}\n          disabled={!(onPress || onLongPress)}\n          onLongPress={onLongPress}\n          onPress={onPress}\n          onPressIn={onPress ? this._handlePressIn : undefined}\n          onPressOut={onPress ? this._handlePressOut : undefined}\n          testID={testID}\n          accessible={accessible}\n        >\n          <View style={styles.innerContainer}>\n            {React.Children.map(\n              children,\n              (child, index) =>\n                React.isValidElement(child)\n                  ? React.cloneElement(child, {\n                      index,\n                      total,\n                      siblings,\n                    })\n                  : child\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}