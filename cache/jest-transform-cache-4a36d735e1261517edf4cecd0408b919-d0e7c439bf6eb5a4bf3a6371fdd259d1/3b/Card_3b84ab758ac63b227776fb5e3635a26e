8b6706401d2cc10c19360beff0a38768
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _CardContent = _interopRequireDefault(require("./CardContent"));

var _CardActions = _interopRequireDefault(require("./CardActions"));

var _CardCover = _interopRequireDefault(require("./CardCover"));

var _CardTitle = _interopRequireDefault(require("./CardTitle"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _theming = require("../../core/theming");

var Card = function (_React$Component) {
  (0, _inherits2.default)(Card, _React$Component);

  function Card() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Card);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      elevation: new _reactNative.Animated.Value(_this.props.elevation)
    };

    _this._handlePressIn = function () {
      _reactNative.Animated.timing(_this.state.elevation, {
        toValue: 8,
        duration: 150
      }).start();
    };

    _this._handlePressOut = function () {
      _reactNative.Animated.timing(_this.state.elevation, {
        toValue: _this.props.elevation,
        duration: 150
      }).start();
    };

    return _this;
  }

  (0, _createClass2.default)(Card, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          cardElevation = _this$props.elevation,
          onLongPress = _this$props.onLongPress,
          onPress = _this$props.onPress,
          style = _this$props.style,
          theme = _this$props.theme,
          testID = _this$props.testID,
          accessible = _this$props.accessible,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "elevation", "onLongPress", "onPress", "style", "theme", "testID", "accessible"]);
      var elevation = this.state.elevation;
      var roundness = theme.roundness;
      var total = React.Children.count(children);
      var siblings = React.Children.map(children, function (child) {
        return React.isValidElement(child) && child.type ? child.type.displayName : null;
      });
      return React.createElement(_Surface.default, (0, _extends2.default)({
        style: [{
          borderRadius: roundness,
          elevation: elevation
        }, style]
      }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {
        delayPressIn: 0,
        disabled: !(onPress || onLongPress),
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: onPress ? this._handlePressIn : undefined,
        onPressOut: onPress ? this._handlePressOut : undefined,
        testID: testID,
        accessible: accessible
      }, React.createElement(_reactNative.View, {
        style: styles.innerContainer
      }, React.Children.map(children, function (child, index) {
        return React.isValidElement(child) ? React.cloneElement(child, {
          index: index,
          total: total,
          siblings: siblings
        }) : child;
      }))));
    }
  }]);
  return Card;
}(React.Component);

Card.Content = _CardContent.default;
Card.Actions = _CardActions.default;
Card.Cover = _CardCover.default;
Card.Title = _CardTitle.default;
Card.defaultProps = {
  elevation: 1
};

var styles = _reactNative.StyleSheet.create({
  innerContainer: {
    flexGrow: 1
  }
});

var _default = (0, _theming.withTheme)(Card);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,