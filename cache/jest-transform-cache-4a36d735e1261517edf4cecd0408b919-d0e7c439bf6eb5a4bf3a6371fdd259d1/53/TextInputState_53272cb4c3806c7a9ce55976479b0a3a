bb979122cd773bd422e7363228340e00
'use strict';

var Platform = require("../../Utilities/Platform");

var UIManager = require("../../ReactNative/UIManager");

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
    currentlyFocusedID = textFieldID;

    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID !== null) {
    currentlyFocusedID = null;

    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyIsIkNvbW1hbmRzIiwiYmx1clRleHRJbnB1dCIsImJsdXIiLCJyZWdpc3RlcklucHV0IiwiYWRkIiwidW5yZWdpc3RlcklucHV0IiwiZGVsZXRlIiwiaXNUZXh0SW5wdXQiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFlQTs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sNEJBQXhCOztBQUNBLElBQU1DLFNBQVMsR0FBR0QsT0FBTywrQkFBekI7O0FBRUEsSUFBSUUsa0JBQTJCLEdBQUcsSUFBbEM7QUFDQSxJQUFNQyxNQUFNLEdBQUcsSUFBSUMsR0FBSixFQUFmOztBQU1BLFNBQVNDLHFCQUFULEdBQTBDO0FBQ3hDLFNBQU9ILGtCQUFQO0FBQ0Q7O0FBT0QsU0FBU0ksY0FBVCxDQUF3QkMsV0FBeEIsRUFBOEM7QUFDNUMsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLEtBQUssSUFBMUQsRUFBZ0U7QUFDOURMLElBQUFBLGtCQUFrQixHQUFHSyxXQUFyQjs7QUFDQSxRQUFJUixRQUFRLENBQUNTLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7QUFDekJQLE1BQUFBLFNBQVMsQ0FBQ1EsS0FBVixDQUFnQkYsV0FBaEI7QUFDRCxLQUZELE1BRU8sSUFBSVIsUUFBUSxDQUFDUyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDUCxNQUFBQSxTQUFTLENBQUNTLDBCQUFWLENBQ0VILFdBREYsRUFFRU4sU0FBUyxDQUFDVSxvQkFBVixDQUErQixrQkFBL0IsRUFBbURDLFFBQW5ELENBQ0dOLGNBSEwsRUFJRSxJQUpGO0FBTUQ7QUFDRjtBQUNGOztBQU9ELFNBQVNPLGFBQVQsQ0FBdUJOLFdBQXZCLEVBQTZDO0FBQzNDLE1BQUlMLGtCQUFrQixLQUFLSyxXQUF2QixJQUFzQ0EsV0FBVyxLQUFLLElBQTFELEVBQWdFO0FBQzlETCxJQUFBQSxrQkFBa0IsR0FBRyxJQUFyQjs7QUFDQSxRQUFJSCxRQUFRLENBQUNTLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7QUFDekJQLE1BQUFBLFNBQVMsQ0FBQ2EsSUFBVixDQUFlUCxXQUFmO0FBQ0QsS0FGRCxNQUVPLElBQUlSLFFBQVEsQ0FBQ1MsRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUNwQ1AsTUFBQUEsU0FBUyxDQUFDUywwQkFBVixDQUNFSCxXQURGLEVBRUVOLFNBQVMsQ0FBQ1Usb0JBQVYsQ0FBK0Isa0JBQS9CLEVBQW1EQyxRQUFuRCxDQUNHQyxhQUhMLEVBSUUsSUFKRjtBQU1EO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTRSxhQUFULENBQXVCUixXQUF2QixFQUE0QztBQUMxQ0osRUFBQUEsTUFBTSxDQUFDYSxHQUFQLENBQVdULFdBQVg7QUFDRDs7QUFFRCxTQUFTVSxlQUFULENBQXlCVixXQUF6QixFQUE4QztBQUM1Q0osRUFBQUEsTUFBTSxDQUFDZSxNQUFQLENBQWNYLFdBQWQ7QUFDRDs7QUFFRCxTQUFTWSxXQUFULENBQXFCWixXQUFyQixFQUEwQztBQUN4QyxTQUFPSixNQUFNLENBQUNpQixHQUFQLENBQVdiLFdBQVgsQ0FBUDtBQUNEOztBQUVEYyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZmpCLEVBQUFBLHFCQUFxQixFQUFyQkEscUJBRGU7QUFFZkMsRUFBQUEsY0FBYyxFQUFkQSxjQUZlO0FBR2ZPLEVBQUFBLGFBQWEsRUFBYkEsYUFIZTtBQUlmRSxFQUFBQSxhQUFhLEVBQWJBLGFBSmU7QUFLZkUsRUFBQUEsZUFBZSxFQUFmQSxlQUxlO0FBTWZFLEVBQUFBLFdBQVcsRUFBWEE7QUFOZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGNvb3JkaW5hdGluZyB0aGUgXCJmb2N1c2VkXCJcbiAqIHN0YXRlIGZvciBUZXh0SW5wdXRzLiBBbGwgY2FsbHMgcmVsYXRpbmcgdG8gdGhlIGtleWJvYXJkXG4gKiBzaG91bGQgYmUgZnVubmVsZWQgdGhyb3VnaCBoZXJlXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuY29uc3QgVUlNYW5hZ2VyID0gcmVxdWlyZSgnLi4vLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJyk7XG5cbmxldCBjdXJyZW50bHlGb2N1c2VkSUQ6ID9udW1iZXIgPSBudWxsO1xuY29uc3QgaW5wdXRzID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIG9mIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB0ZXh0IGZpZWxkLCBpZiBvbmUgZXhpc3RzXG4gKiBJZiBubyB0ZXh0IGZpZWxkIGlzIGZvY3VzZWQgaXQgcmV0dXJucyBudWxsXG4gKi9cbmZ1bmN0aW9uIGN1cnJlbnRseUZvY3VzZWRGaWVsZCgpOiA/bnVtYmVyIHtcbiAgcmV0dXJuIGN1cnJlbnRseUZvY3VzZWRJRDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gVGV4dElucHV0SUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gZm9jdXNcbiAqIEZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIHRoZSB0ZXh0IGZpZWxkIHdhcyBhbHJlYWR5IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gZm9jdXNUZXh0SW5wdXQodGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJRCAhPT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT09IG51bGwpIHtcbiAgICBjdXJyZW50bHlGb2N1c2VkSUQgPSB0ZXh0RmllbGRJRDtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBVSU1hbmFnZXIuZm9jdXModGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdBbmRyb2lkVGV4dElucHV0JykuQ29tbWFuZHNcbiAgICAgICAgICAuZm9jdXNUZXh0SW5wdXQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0RmllbGRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byB1bmZvY3VzXG4gKiBVbmZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIGl0IHdhc24ndCBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGJsdXJUZXh0SW5wdXQodGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJRCA9PT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT09IG51bGwpIHtcbiAgICBjdXJyZW50bHlGb2N1c2VkSUQgPSBudWxsO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIFVJTWFuYWdlci5ibHVyKHRleHRGaWVsZElEKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgICAgdGV4dEZpZWxkSUQsXG4gICAgICAgIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnQW5kcm9pZFRleHRJbnB1dCcpLkNvbW1hbmRzXG4gICAgICAgICAgLmJsdXJUZXh0SW5wdXQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmFkZCh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gIGlucHV0cy5kZWxldGUodGV4dEZpZWxkSUQpO1xufVxuXG5mdW5jdGlvbiBpc1RleHRJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gIHJldHVybiBpbnB1dHMuaGFzKHRleHRGaWVsZElEKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGN1cnJlbnRseUZvY3VzZWRGaWVsZCxcbiAgZm9jdXNUZXh0SW5wdXQsXG4gIGJsdXJUZXh0SW5wdXQsXG4gIHJlZ2lzdGVySW5wdXQsXG4gIHVucmVnaXN0ZXJJbnB1dCxcbiAgaXNUZXh0SW5wdXQsXG59O1xuIl19