{"version":3,"sources":["RadioButtonIOS.js"],"names":["RadioButtonIOS","props","disabled","onPress","theme","rest","checkedColor","colors","color","accent","rippleColor","checked","status","text","alpha","rgb","string","fade","undefined","styles","container","opacity","React","Component","displayName","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;IA6CMA,c;;;;;;;;;;6BAGK;AAAA,wBACuC,KAAKC,KAD5C;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,OADX,eACWA,OADX;AAAA,UACoBC,KADpB,eACoBA,KADpB;AAAA,UAC8BC,IAD9B;AAGP,UAAMC,YAAY,GAAGJ,QAAQ,GACzBE,KAAK,CAACG,MAAN,CAAaL,QADY,GAEzB,KAAKD,KAAL,CAAWO,KAAX,IAAoBJ,KAAK,CAACG,MAAN,CAAaE,MAFrC;AAIA,UAAIC,WAAJ;AAEA,UAAMC,OAAO,GAAG,KAAKV,KAAL,CAAWW,MAAX,KAAsB,SAAtC;;AAEA,UAAIV,QAAJ,EAAc;AACZQ,QAAAA,WAAW,GAAG,oBAAMN,KAAK,CAACG,MAAN,CAAaM,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd;AAID,OALD,MAKO;AACLN,QAAAA,WAAW,GAAG,oBAAMJ,YAAN,EACXW,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd;AAID;;AACD,aACE,oBAAC,wBAAD,6BACMX,IADN;AAEE,QAAA,UAAU,MAFZ;AAGE,QAAA,WAAW,EAAEK,WAHf;AAIE,QAAA,OAAO,EACLR,QAAQ,GACJgB,SADI,GAEJ,YAAM;AACJf,UAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,SATT;AAWE,QAAA,mBAAmB,EAAED,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAX3D;AAYE,QAAA,0BAA0B,EACxBS,OAAO,GAAG,qBAAH,GAA2B,uBAbtC;AAeE,QAAA,iBAAiB,EAAC,QAfpB;AAgBE,QAAA,mBAAmB,EAAET,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkBgB,SAhBjD;AAiBE,QAAA,uBAAuB,EAAC,QAjB1B;AAkBE,QAAA,KAAK,EAAEC,MAAM,CAACC;AAlBhB,UAoBE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAEV,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,SACE,oBAAC,aAAD;AACE,QAAA,gBAAgB,EAAE,KADpB;AAEE,QAAA,MAAM,EAAC,MAFT;AAGE,QAAA,IAAI,EAAE,EAHR;AAIE,QAAA,KAAK,EAAEL;AAJT,QADF,CApBF,CADF;AA+BD;;;EAxD0BgB,KAAK,CAACC,S;;AAA7BvB,c,CACGwB,W,GAAc,iB;;AA0DvB,IAAML,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;;eAOe,wBAAU5B,cAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress();\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : undefined}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: checked ? 1 : 0 }}>\n          <Icon\n            allowFontScaling={false}\n            source=\"done\"\n            size={24}\n            color={checkedColor}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n"]}