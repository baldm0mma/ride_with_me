fdd7f52a2dedfb724d7880248cd266d7
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _theming = require("../core/theming");

var RadioButtonIOS = function (_React$Component) {
  (0, _inherits2.default)(RadioButtonIOS, _React$Component);

  function RadioButtonIOS() {
    (0, _classCallCheck2.default)(this, RadioButtonIOS);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RadioButtonIOS).apply(this, arguments));
  }

  (0, _createClass2.default)(RadioButtonIOS, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "onPress", "theme"]);
      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;
      var rippleColor;
      var checked = this.props.status === 'checked';

      if (disabled) {
        rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
      } else {
        rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
      }

      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: disabled ? undefined : function () {
          onPress && onPress();
        },
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
        accessibilityRole: "button",
        accessibilityStates: disabled ? ['disabled'] : undefined,
        accessibilityLiveRegion: "polite",
        style: styles.container
      }), React.createElement(_reactNative.View, {
        style: {
          opacity: checked ? 1 : 0
        }
      }, React.createElement(_Icon.default, {
        allowFontScaling: false,
        source: "done",
        size: 24,
        color: checkedColor
      })));
    }
  }]);
  return RadioButtonIOS;
}(React.Component);

RadioButtonIOS.displayName = 'RadioButton.IOS';

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18,
    padding: 6
  }
});

var _default = (0, _theming.withTheme)(RadioButtonIOS);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJhZGlvQnV0dG9uSU9TLmpzIl0sIm5hbWVzIjpbIlJhZGlvQnV0dG9uSU9TIiwicHJvcHMiLCJkaXNhYmxlZCIsIm9uUHJlc3MiLCJ0aGVtZSIsInJlc3QiLCJjaGVja2VkQ29sb3IiLCJjb2xvcnMiLCJjb2xvciIsImFjY2VudCIsInJpcHBsZUNvbG9yIiwiY2hlY2tlZCIsInN0YXR1cyIsInRleHQiLCJhbHBoYSIsInJnYiIsInN0cmluZyIsImZhZGUiLCJ1bmRlZmluZWQiLCJzdHlsZXMiLCJjb250YWluZXIiLCJvcGFjaXR5IiwiUmVhY3QiLCJDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztJQTZDTUEsYzs7Ozs7Ozs7Ozs2QkFHSztBQUFBLHdCQUN1QyxLQUFLQyxLQUQ1QztBQUFBLFVBQ0NDLFFBREQsZUFDQ0EsUUFERDtBQUFBLFVBQ1dDLE9BRFgsZUFDV0EsT0FEWDtBQUFBLFVBQ29CQyxLQURwQixlQUNvQkEsS0FEcEI7QUFBQSxVQUM4QkMsSUFEOUI7QUFHUCxVQUFNQyxZQUFZLEdBQUdKLFFBQVEsR0FDekJFLEtBQUssQ0FBQ0csTUFBTixDQUFhTCxRQURZLEdBRXpCLEtBQUtELEtBQUwsQ0FBV08sS0FBWCxJQUFvQkosS0FBSyxDQUFDRyxNQUFOLENBQWFFLE1BRnJDO0FBSUEsVUFBSUMsV0FBSjtBQUVBLFVBQU1DLE9BQU8sR0FBRyxLQUFLVixLQUFMLENBQVdXLE1BQVgsS0FBc0IsU0FBdEM7O0FBRUEsVUFBSVYsUUFBSixFQUFjO0FBQ1pRLFFBQUFBLFdBQVcsR0FBRyxvQkFBTU4sS0FBSyxDQUFDRyxNQUFOLENBQWFNLElBQW5CLEVBQ1hDLEtBRFcsQ0FDTCxJQURLLEVBRVhDLEdBRlcsR0FHWEMsTUFIVyxFQUFkO0FBSUQsT0FMRCxNQUtPO0FBQ0xOLFFBQUFBLFdBQVcsR0FBRyxvQkFBTUosWUFBTixFQUNYVyxJQURXLENBQ04sSUFETSxFQUVYRixHQUZXLEdBR1hDLE1BSFcsRUFBZDtBQUlEOztBQUNELGFBQ0Usb0JBQUMsd0JBQUQsNkJBQ01YLElBRE47QUFFRSxRQUFBLFVBQVUsTUFGWjtBQUdFLFFBQUEsV0FBVyxFQUFFSyxXQUhmO0FBSUUsUUFBQSxPQUFPLEVBQ0xSLFFBQVEsR0FDSmdCLFNBREksR0FFSixZQUFNO0FBQ0pmLFVBQUFBLE9BQU8sSUFBSUEsT0FBTyxFQUFsQjtBQUNELFNBVFQ7QUFXRSxRQUFBLG1CQUFtQixFQUFFRCxRQUFRLEdBQUcsQ0FBQyxRQUFELEVBQVcsVUFBWCxDQUFILEdBQTRCLFFBWDNEO0FBWUUsUUFBQSwwQkFBMEIsRUFDeEJTLE9BQU8sR0FBRyxxQkFBSCxHQUEyQix1QkFidEM7QUFlRSxRQUFBLGlCQUFpQixFQUFDLFFBZnBCO0FBZ0JFLFFBQUEsbUJBQW1CLEVBQUVULFFBQVEsR0FBRyxDQUFDLFVBQUQsQ0FBSCxHQUFrQmdCLFNBaEJqRDtBQWlCRSxRQUFBLHVCQUF1QixFQUFDLFFBakIxQjtBQWtCRSxRQUFBLEtBQUssRUFBRUMsTUFBTSxDQUFDQztBQWxCaEIsVUFvQkUsb0JBQUMsaUJBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRTtBQUFFQyxVQUFBQSxPQUFPLEVBQUVWLE9BQU8sR0FBRyxDQUFILEdBQU87QUFBekI7QUFBYixTQUNFLG9CQUFDLGFBQUQ7QUFDRSxRQUFBLGdCQUFnQixFQUFFLEtBRHBCO0FBRUUsUUFBQSxNQUFNLEVBQUMsTUFGVDtBQUdFLFFBQUEsSUFBSSxFQUFFLEVBSFI7QUFJRSxRQUFBLEtBQUssRUFBRUw7QUFKVCxRQURGLENBcEJGLENBREY7QUErQkQ7OztFQXhEMEJnQixLQUFLLENBQUNDLFM7O0FBQTdCdkIsYyxDQUNHd0IsVyxHQUFjLGlCOztBQTBEdkIsSUFBTUwsTUFBTSxHQUFHTSx3QkFBV0MsTUFBWCxDQUFrQjtBQUMvQk4sRUFBQUEsU0FBUyxFQUFFO0FBQ1RPLElBQUFBLFlBQVksRUFBRSxFQURMO0FBRVRDLElBQUFBLE9BQU8sRUFBRTtBQUZBO0FBRG9CLENBQWxCLENBQWY7O2VBT2Usd0JBQVU1QixjQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBjb2xvciBmcm9tICdjb2xvcic7XG5pbXBvcnQgSWNvbiBmcm9tICcuL0ljb24nO1xuaW1wb3J0IFRvdWNoYWJsZVJpcHBsZSBmcm9tICcuL1RvdWNoYWJsZVJpcHBsZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHR5cGUgeyBUaGVtZSwgJFJlbW92ZUNoaWxkcmVuIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG50eXBlIFByb3BzID0gJFJlbW92ZUNoaWxkcmVuPHR5cGVvZiBUb3VjaGFibGVSaXBwbGU+ICYge3xcbiAgLyoqXG4gICAqIFZhbHVlIG9mIHRoZSByYWRpbyBidXR0b25cbiAgICovXG4gIHZhbHVlOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBTdGF0dXMgb2YgcmFkaW8gYnV0dG9uLlxuICAgKi9cbiAgc3RhdHVzPzogJ2NoZWNrZWQnIHwgJ3VuY2hlY2tlZCcsXG4gIC8qKlxuICAgKiBXaGV0aGVyIHJhZGlvIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ/OiBib29sZWFuLFxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBwcmVzcy5cbiAgICovXG4gIG9uUHJlc3M/OiAoKSA9PiBtaXhlZCxcbiAgLyoqXG4gICAqIEN1c3RvbSBjb2xvciBmb3IgcmFkaW8uXG4gICAqL1xuICBjb2xvcj86IHN0cmluZyxcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFRoZW1lLFxufH07XG5cbi8qKlxuICogUmFkaW8gYnV0dG9ucyBhbGxvdyB0aGUgc2VsZWN0aW9uIGEgc2luZ2xlIG9wdGlvbiBmcm9tIGEgc2V0LlxuICogVGhpcyBjb21wb25lbnQgZm9sbG93cyBwbGF0Zm9ybSBndWlkZWxpbmVzIGZvciBpT1MuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9yYWRpby1lbmFibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkVuYWJsZWQ8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvcmFkaW8tZGlzYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+RGlzYWJsZWQ8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKi9cbmNsYXNzIFJhZGlvQnV0dG9uSU9TIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdSYWRpb0J1dHRvbi5JT1MnO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRpc2FibGVkLCBvblByZXNzLCB0aGVtZSwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNoZWNrZWRDb2xvciA9IGRpc2FibGVkXG4gICAgICA/IHRoZW1lLmNvbG9ycy5kaXNhYmxlZFxuICAgICAgOiB0aGlzLnByb3BzLmNvbG9yIHx8IHRoZW1lLmNvbG9ycy5hY2NlbnQ7XG5cbiAgICBsZXQgcmlwcGxlQ29sb3I7XG5cbiAgICBjb25zdCBjaGVja2VkID0gdGhpcy5wcm9wcy5zdGF0dXMgPT09ICdjaGVja2VkJztcblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgcmlwcGxlQ29sb3IgPSBjb2xvcih0aGVtZS5jb2xvcnMudGV4dClcbiAgICAgICAgLmFscGhhKDAuMTYpXG4gICAgICAgIC5yZ2IoKVxuICAgICAgICAuc3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpcHBsZUNvbG9yID0gY29sb3IoY2hlY2tlZENvbG9yKVxuICAgICAgICAuZmFkZSgwLjMyKVxuICAgICAgICAucmdiKClcbiAgICAgICAgLnN0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPFRvdWNoYWJsZVJpcHBsZVxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgYm9yZGVybGVzc1xuICAgICAgICByaXBwbGVDb2xvcj17cmlwcGxlQ29sb3J9XG4gICAgICAgIG9uUHJlc3M9e1xuICAgICAgICAgIGRpc2FibGVkXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb25QcmVzcyAmJiBvblByZXNzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPXtkaXNhYmxlZCA/IFsnYnV0dG9uJywgJ2Rpc2FibGVkJ10gOiAnYnV0dG9uJ31cbiAgICAgICAgYWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGU9e1xuICAgICAgICAgIGNoZWNrZWQgPyAncmFkaW9idXR0b25fY2hlY2tlZCcgOiAncmFkaW9idXR0b25fdW5jaGVja2VkJ1xuICAgICAgICB9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgYWNjZXNzaWJpbGl0eVN0YXRlcz17ZGlzYWJsZWQgPyBbJ2Rpc2FibGVkJ10gOiB1bmRlZmluZWR9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uPVwicG9saXRlXCJcbiAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XG4gICAgICA+XG4gICAgICAgIDxWaWV3IHN0eWxlPXt7IG9wYWNpdHk6IGNoZWNrZWQgPyAxIDogMCB9fT5cbiAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgYWxsb3dGb250U2NhbGluZz17ZmFsc2V9XG4gICAgICAgICAgICBzb3VyY2U9XCJkb25lXCJcbiAgICAgICAgICAgIHNpemU9ezI0fVxuICAgICAgICAgICAgY29sb3I9e2NoZWNrZWRDb2xvcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1RvdWNoYWJsZVJpcHBsZT5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgYm9yZGVyUmFkaXVzOiAxOCxcbiAgICBwYWRkaW5nOiA2LFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShSYWRpb0J1dHRvbklPUyk7XG4iXX0=