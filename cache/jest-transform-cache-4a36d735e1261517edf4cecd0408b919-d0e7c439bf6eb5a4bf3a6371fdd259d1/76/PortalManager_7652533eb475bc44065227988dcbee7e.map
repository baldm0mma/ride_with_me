{"version":3,"sources":["PortalManager.js"],"names":["PortalManager","state","portals","mount","key","children","setState","update","map","item","unmount","filter","StyleSheet","absoluteFill","React","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;IAYqBA,a;;;;;;;;;;;;;;;UACnBC,K,GAAe;AACbC,MAAAA,OAAO,EAAE;AADI,K;;UAIfC,K,GAAQ,UAACC,GAAD,EAAcC,QAAd,EAAuC;AAC7C,YAAKC,QAAL,CAAc,UAAAL,KAAK;AAAA,eAAK;AACtBC,UAAAA,OAAO,6CAAMD,KAAK,CAACC,OAAZ,IAAqB;AAAEE,YAAAA,GAAG,EAAHA,GAAF;AAAOC,YAAAA,QAAQ,EAARA;AAAP,WAArB;AADe,SAAL;AAAA,OAAnB;AAGD,K;;UAEDE,M,GAAS,UAACH,GAAD,EAAcC,QAAd;AAAA,aACP,MAAKC,QAAL,CAAc,UAAAL,KAAK;AAAA,eAAK;AACtBC,UAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,CAAcM,GAAd,CAAkB,UAAAC,IAAI,EAAI;AACjC,gBAAIA,IAAI,CAACL,GAAL,KAAaA,GAAjB,EAAsB;AACpB,uCAAYK,IAAZ;AAAkBJ,gBAAAA,QAAQ,EAARA;AAAlB;AACD;;AACD,mBAAOI,IAAP;AACD,WALQ;AADa,SAAL;AAAA,OAAnB,CADO;AAAA,K;;UAUTC,O,GAAU,UAACN,GAAD;AAAA,aACR,MAAKE,QAAL,CAAc,UAAAL,KAAK;AAAA,eAAK;AACtBC,UAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,CAAcS,MAAd,CAAqB,UAAAF,IAAI;AAAA,mBAAIA,IAAI,CAACL,GAAL,KAAaA,GAAjB;AAAA,WAAzB;AADa,SAAL;AAAA,OAAnB,CADQ;AAAA,K;;;;;;;6BAKD;AACP,aAAO,KAAKH,KAAL,CAAWC,OAAX,CAAmBM,GAAnB,CAAuB;AAAA,YAAGJ,GAAH,QAAGA,GAAH;AAAA,YAAQC,QAAR,QAAQA,QAAR;AAAA,eAC5B,oBAAC,iBAAD;AACE,UAAA,GAAG,EAAED,GADP;AAEE,UAAA,WAAW,EACT,KAHJ;AAKE,UAAA,aAAa,EAAC,UALhB;AAME,UAAA,KAAK,EAAEQ,wBAAWC;AANpB,WAQGR,QARH,CAD4B;AAAA,OAAvB,CAAP;AAYD;;;EAvCwCS,KAAK,CAACC,a","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number,\n    children: React.Node,\n  }>,\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.Node) => {\n    this.setState(state => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.Node) =>\n    this.setState(state => ({\n      portals: state.portals.map(item => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState(state => ({\n      portals: state.portals.filter(item => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]}