081933f6be6400c73276a57bdeb2eda9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var GestureHandlerPropTypes = {
  id: _propTypes.default.string,
  minPointers: _propTypes.default.number,
  enabled: _propTypes.default.bool,
  waitFor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]))]),
  simultaneousHandlers: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]))]),
  shouldCancelWhenOutside: _propTypes.default.bool,
  hitSlop: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    left: _propTypes.default.number,
    top: _propTypes.default.number,
    right: _propTypes.default.number,
    bottom: _propTypes.default.number,
    vertical: _propTypes.default.number,
    horizontal: _propTypes.default.number,
    width: _propTypes.default.number,
    height: _propTypes.default.number
  })]),
  onGestureEvent: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  onHandlerStateChange: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  onBegan: _propTypes.default.func,
  onFailed: _propTypes.default.func,
  onCancelled: _propTypes.default.func,
  onActivated: _propTypes.default.func,
  onEnded: _propTypes.default.func
};
var _default = GestureHandlerPropTypes;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdlc3R1cmVIYW5kbGVyUHJvcFR5cGVzLmpzIl0sIm5hbWVzIjpbIkdlc3R1cmVIYW5kbGVyUHJvcFR5cGVzIiwiaWQiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJtaW5Qb2ludGVycyIsIm51bWJlciIsImVuYWJsZWQiLCJib29sIiwid2FpdEZvciIsIm9uZU9mVHlwZSIsIm9iamVjdCIsImFycmF5T2YiLCJzaW11bHRhbmVvdXNIYW5kbGVycyIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIiwiaGl0U2xvcCIsInNoYXBlIiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwid2lkdGgiLCJoZWlnaHQiLCJvbkdlc3R1cmVFdmVudCIsImZ1bmMiLCJvbkhhbmRsZXJTdGF0ZUNoYW5nZSIsIm9uQmVnYW4iLCJvbkZhaWxlZCIsIm9uQ2FuY2VsbGVkIiwib25BY3RpdmF0ZWQiLCJvbkVuZGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBR0EsSUFBTUEsdUJBQXVCLEdBQUc7QUFDOUJDLEVBQUFBLEVBQUUsRUFBRUMsbUJBQVVDLE1BRGdCO0FBRTlCQyxFQUFBQSxXQUFXLEVBQUVGLG1CQUFVRyxNQUZPO0FBRzlCQyxFQUFBQSxPQUFPLEVBQUVKLG1CQUFVSyxJQUhXO0FBSTlCQyxFQUFBQSxPQUFPLEVBQUVOLG1CQUFVTyxTQUFWLENBQW9CLENBQzNCUCxtQkFBVUMsTUFEaUIsRUFFM0JELG1CQUFVUSxNQUZpQixFQUczQlIsbUJBQVVTLE9BQVYsQ0FDRVQsbUJBQVVPLFNBQVYsQ0FBb0IsQ0FBQ1AsbUJBQVVDLE1BQVgsRUFBbUJELG1CQUFVUSxNQUE3QixDQUFwQixDQURGLENBSDJCLENBQXBCLENBSnFCO0FBVzlCRSxFQUFBQSxvQkFBb0IsRUFBRVYsbUJBQVVPLFNBQVYsQ0FBb0IsQ0FDeENQLG1CQUFVQyxNQUQ4QixFQUV4Q0QsbUJBQVVRLE1BRjhCLEVBR3hDUixtQkFBVVMsT0FBVixDQUNFVCxtQkFBVU8sU0FBVixDQUFvQixDQUFDUCxtQkFBVUMsTUFBWCxFQUFtQkQsbUJBQVVRLE1BQTdCLENBQXBCLENBREYsQ0FId0MsQ0FBcEIsQ0FYUTtBQWtCOUJHLEVBQUFBLHVCQUF1QixFQUFFWCxtQkFBVUssSUFsQkw7QUFtQjlCTyxFQUFBQSxPQUFPLEVBQUVaLG1CQUFVTyxTQUFWLENBQW9CLENBQzNCUCxtQkFBVUcsTUFEaUIsRUFFM0JILG1CQUFVYSxLQUFWLENBQWdCO0FBQ2RDLElBQUFBLElBQUksRUFBRWQsbUJBQVVHLE1BREY7QUFFZFksSUFBQUEsR0FBRyxFQUFFZixtQkFBVUcsTUFGRDtBQUdkYSxJQUFBQSxLQUFLLEVBQUVoQixtQkFBVUcsTUFISDtBQUlkYyxJQUFBQSxNQUFNLEVBQUVqQixtQkFBVUcsTUFKSjtBQUtkZSxJQUFBQSxRQUFRLEVBQUVsQixtQkFBVUcsTUFMTjtBQU1kZ0IsSUFBQUEsVUFBVSxFQUFFbkIsbUJBQVVHLE1BTlI7QUFPZGlCLElBQUFBLEtBQUssRUFBRXBCLG1CQUFVRyxNQVBIO0FBUWRrQixJQUFBQSxNQUFNLEVBQUVyQixtQkFBVUc7QUFSSixHQUFoQixDQUYyQixDQUFwQixDQW5CcUI7QUFnQzlCbUIsRUFBQUEsY0FBYyxFQUFFdEIsbUJBQVVPLFNBQVYsQ0FBb0IsQ0FBQ1AsbUJBQVV1QixJQUFYLEVBQWlCdkIsbUJBQVVRLE1BQTNCLENBQXBCLENBaENjO0FBaUM5QmdCLEVBQUFBLG9CQUFvQixFQUFFeEIsbUJBQVVPLFNBQVYsQ0FBb0IsQ0FBQ1AsbUJBQVV1QixJQUFYLEVBQWlCdkIsbUJBQVVRLE1BQTNCLENBQXBCLENBakNRO0FBa0M5QmlCLEVBQUFBLE9BQU8sRUFBRXpCLG1CQUFVdUIsSUFsQ1c7QUFtQzlCRyxFQUFBQSxRQUFRLEVBQUUxQixtQkFBVXVCLElBbkNVO0FBb0M5QkksRUFBQUEsV0FBVyxFQUFFM0IsbUJBQVV1QixJQXBDTztBQXFDOUJLLEVBQUFBLFdBQVcsRUFBRTVCLG1CQUFVdUIsSUFyQ087QUFzQzlCTSxFQUFBQSxPQUFPLEVBQUU3QixtQkFBVXVCO0FBdENXLENBQWhDO2VBeUNlekIsdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vLyBJZiBjaGFuZ2VkLCBhZGQgY2hhbmdlcyB0byBOQVRJVkVfV1JBUFBFUl9QUk9QU19GSUxURVIgYXMgd2VsbFxuY29uc3QgR2VzdHVyZUhhbmRsZXJQcm9wVHlwZXMgPSB7XG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtaW5Qb2ludGVyczogUHJvcFR5cGVzLm51bWJlcixcbiAgZW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHdhaXRGb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm9iamVjdCxcbiAgICBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgICksXG4gIF0pLFxuICBzaW11bHRhbmVvdXNIYW5kbGVyczogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgKSxcbiAgXSksXG4gIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaGl0U2xvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgbGVmdDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIHRvcDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIHJpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgYm90dG9tOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgdmVydGljYWw6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICBoZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgfSksXG4gIF0pLFxuICBvbkdlc3R1cmVFdmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgb25IYW5kbGVyU3RhdGVDaGFuZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIG9uQmVnYW46IFByb3BUeXBlcy5mdW5jLFxuICBvbkZhaWxlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2FuY2VsbGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25BY3RpdmF0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbkVuZGVkOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdlc3R1cmVIYW5kbGVyUHJvcFR5cGVzO1xuIl19