c39d3a03259975ec7c64e82bed912952
'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require("../Utilities/deprecatedPropType");

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var DeprecatedTransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
    perspective: ReactPropTypes.number
  }), ReactPropTypes.shape({
    rotate: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateY: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateZ: ReactPropTypes.string
  }), ReactPropTypes.shape({
    scale: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    skewX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    skewY: ReactPropTypes.string
  })])),
  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,
  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};
module.exports = DeprecatedTransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRUcmFuc2Zvcm1Qcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiUmVhY3RQcm9wVHlwZXMiLCJyZXF1aXJlIiwiZGVwcmVjYXRlZFByb3BUeXBlIiwiVHJhbnNmb3JtTWF0cml4UHJvcFR5cGUiLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIkVycm9yIiwiRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlIiwiRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcyIsInRyYW5zZm9ybSIsImFycmF5T2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsInBlcnNwZWN0aXZlIiwibnVtYmVyIiwicm90YXRlIiwic3RyaW5nIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInNrZXdYIiwic2tld1kiLCJ0cmFuc2Zvcm1NYXRyaXgiLCJkZWNvbXBvc2VkTWF0cml4Iiwicm90YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUVBLElBQU1DLGtCQUFrQixHQUFHRCxPQUFPLG1DQUFsQzs7QUFFQSxJQUFNRSx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLENBQzlCQyxLQUQ4QixFQUU5QkMsUUFGOEIsRUFHOUJDLGFBSDhCLEVBSXRCO0FBQ1IsTUFBSUYsS0FBSyxDQUFDQyxRQUFELENBQVQsRUFBcUI7QUFDbkIsV0FBTyxJQUFJRSxLQUFKLENBQ0wsdURBQ0UsNkNBRkcsQ0FBUDtBQUlEO0FBQ0YsQ0FYRDs7QUFhQSxJQUFNQyx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQTJCLENBQy9CSixLQUQrQixFQUUvQkMsUUFGK0IsRUFHL0JDLGFBSCtCLEVBSXZCO0FBQ1IsTUFBSUYsS0FBSyxDQUFDQyxRQUFELENBQVQsRUFBcUI7QUFDbkIsV0FBTyxJQUFJRSxLQUFKLENBQ0wsd0RBQ0UsaUNBRkcsQ0FBUDtBQUlEO0FBQ0YsQ0FYRDs7QUFhQSxJQUFNRSw0QkFBNEIsR0FBRztBQUNuQ0MsRUFBQUEsU0FBUyxFQUFFVixjQUFjLENBQUNXLE9BQWYsQ0FDVFgsY0FBYyxDQUFDWSxTQUFmLENBQXlCLENBQ3ZCWixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ0MsSUFBQUEsV0FBVyxFQUFFZCxjQUFjLENBQUNlO0FBQTdCLEdBQXJCLENBRHVCLEVBRXZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ0csSUFBQUEsTUFBTSxFQUFFaEIsY0FBYyxDQUFDaUI7QUFBeEIsR0FBckIsQ0FGdUIsRUFHdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ0ssSUFBQUEsT0FBTyxFQUFFbEIsY0FBYyxDQUFDaUI7QUFBekIsR0FBckIsQ0FIdUIsRUFJdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ00sSUFBQUEsT0FBTyxFQUFFbkIsY0FBYyxDQUFDaUI7QUFBekIsR0FBckIsQ0FKdUIsRUFLdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ08sSUFBQUEsT0FBTyxFQUFFcEIsY0FBYyxDQUFDaUI7QUFBekIsR0FBckIsQ0FMdUIsRUFNdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1EsSUFBQUEsS0FBSyxFQUFFckIsY0FBYyxDQUFDZTtBQUF2QixHQUFyQixDQU51QixFQU92QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNTLElBQUFBLE1BQU0sRUFBRXRCLGNBQWMsQ0FBQ2U7QUFBeEIsR0FBckIsQ0FQdUIsRUFRdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDVSxJQUFBQSxNQUFNLEVBQUV2QixjQUFjLENBQUNlO0FBQXhCLEdBQXJCLENBUnVCLEVBU3ZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1csSUFBQUEsVUFBVSxFQUFFeEIsY0FBYyxDQUFDZTtBQUE1QixHQUFyQixDQVR1QixFQVV2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNZLElBQUFBLFVBQVUsRUFBRXpCLGNBQWMsQ0FBQ2U7QUFBNUIsR0FBckIsQ0FWdUIsRUFXdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDYSxJQUFBQSxLQUFLLEVBQUUxQixjQUFjLENBQUNpQjtBQUF2QixHQUFyQixDQVh1QixFQVl2QmpCLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDYyxJQUFBQSxLQUFLLEVBQUUzQixjQUFjLENBQUNpQjtBQUF2QixHQUFyQixDQVp1QixDQUF6QixDQURTLENBRHdCO0FBaUJuQ1csRUFBQUEsZUFBZSxFQUFFekIsdUJBakJrQjtBQWtCbkMwQixFQUFBQSxnQkFBZ0IsRUFBRXJCLHdCQWxCaUI7QUFtQm5DYyxFQUFBQSxNQUFNLEVBQUVwQixrQkFBa0IsQ0FDeEJGLGNBQWMsQ0FBQ2UsTUFEUyxFQUV4QixpQ0FGd0IsQ0FuQlM7QUF1Qm5DUSxFQUFBQSxNQUFNLEVBQUVyQixrQkFBa0IsQ0FDeEJGLGNBQWMsQ0FBQ2UsTUFEUyxFQUV4QixpQ0FGd0IsQ0F2QlM7QUEyQm5DZSxFQUFBQSxRQUFRLEVBQUU1QixrQkFBa0IsQ0FDMUJGLGNBQWMsQ0FBQ2UsTUFEVyxFQUUxQixpQ0FGMEIsQ0EzQk87QUErQm5DUyxFQUFBQSxVQUFVLEVBQUV0QixrQkFBa0IsQ0FDNUJGLGNBQWMsQ0FBQ2UsTUFEYSxFQUU1QixpQ0FGNEIsQ0EvQks7QUFtQ25DVSxFQUFBQSxVQUFVLEVBQUV2QixrQkFBa0IsQ0FDNUJGLGNBQWMsQ0FBQ2UsTUFEYSxFQUU1QixpQ0FGNEI7QUFuQ0ssQ0FBckM7QUF5Q0FnQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ2Qiw0QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxuY29uc3QgZGVwcmVjYXRlZFByb3BUeXBlID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL2RlcHJlY2F0ZWRQcm9wVHlwZScpO1xuXG5jb25zdCBUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSA9IGZ1bmN0aW9uKFxuICBwcm9wczogT2JqZWN0LFxuICBwcm9wTmFtZTogc3RyaW5nLFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4pOiA/RXJyb3Ige1xuICBpZiAocHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICdUaGUgdHJhbnNmb3JtTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFt7IG1hdHJpeDogLi4uIH1dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzOiBPYmplY3QsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbik6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSBkZWNvbXBvc2VkTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFsuLi5dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcyA9IHtcbiAgdHJhbnNmb3JtOiBSZWFjdFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cGVyc3BlY3RpdmU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWDogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWjogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlWDogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGVZOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHt0cmFuc2xhdGVYOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHt0cmFuc2xhdGVZOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtza2V3WDogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2tld1k6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgIF0pLFxuICApLFxuICB0cmFuc2Zvcm1NYXRyaXg6IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlLFxuICBkZWNvbXBvc2VkTWF0cml4OiBEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUsXG4gIHNjYWxlWDogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHNjYWxlWTogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHJvdGF0aW9uOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbiAgdHJhbnNsYXRlWDogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHRyYW5zbGF0ZVk6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXByZWNhdGVkVHJhbnNmb3JtUHJvcFR5cGVzO1xuIl19