{"version":3,"sources":["DrawerItem.js"],"names":["DrawerItem","props","icon","label","active","theme","style","onPress","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","fontFamily","fonts","medium","labelMargin","styles","container","borderRadius","undefined","wrapper","color","marginLeft","React","Component","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label: string,\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource,\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Drawer.Item label=\"First Item\" />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const { icon, label, active, theme, style, onPress, ...rest } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary)\n          .alpha(0.12)\n          .rgb()\n          .string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text)\n          .alpha(0.68)\n          .rgb()\n          .string();\n    const fontFamily = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={active ? ['selected'] : undefined}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  fontFamily,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]}