1c370332858fa747c33172f99acb2ce5
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var ListItem = function (_React$Component) {
  (0, _inherits2.default)(ListItem, _React$Component);

  function ListItem() {
    (0, _classCallCheck2.default)(this, ListItem);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItem).apply(this, arguments));
  }

  (0, _createClass2.default)(ListItem, [{
    key: "renderDescription",
    value: function renderDescription(description, descriptionColor) {
      var _this$props = this.props,
          descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,
          descriptionStyle = _this$props.descriptionStyle;
      return typeof description === 'string' ? React.createElement(_Text.default, {
        numberOfLines: 2,
        ellipsizeMode: descriptionEllipsizeMode,
        style: [styles.description, {
          color: descriptionColor
        }, descriptionStyle]
      }, description) : description && description({
        ellipsizeMode: descriptionEllipsizeMode,
        color: descriptionColor,
        fontSize: styles.description.fontSize
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          left = _this$props2.left,
          right = _this$props2.right,
          title = _this$props2.title,
          description = _this$props2.description,
          onPress = _this$props2.onPress,
          theme = _this$props2.theme,
          style = _this$props2.style,
          titleStyle = _this$props2.titleStyle,
          titleEllipsizeMode = _this$props2.titleEllipsizeMode,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, ["left", "right", "title", "description", "onPress", "theme", "style", "titleStyle", "titleEllipsizeMode"]);
      var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
      var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
        style: [styles.container, style],
        onPress: onPress
      }), React.createElement(_reactNative.View, {
        style: styles.row
      }, left ? left({
        color: descriptionColor
      }) : null, React.createElement(_reactNative.View, {
        style: [styles.item, styles.content],
        pointerEvents: "none"
      }, React.createElement(_Text.default, {
        ellipsizeMode: titleEllipsizeMode,
        numberOfLines: 1,
        style: [styles.title, {
          color: titleColor
        }, titleStyle]
      }, title), this.renderDescription(description, descriptionColor)), right ? right({
        color: descriptionColor
      }) : null));
    }
  }]);
  return ListItem;
}(React.Component);

ListItem.displayName = 'List.Item';

var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: 'row'
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  item: {
    margin: 8
  },
  content: {
    flex: 1,
    justifyContent: 'center'
  }
});

var _default = (0, _theming.withTheme)(ListItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,