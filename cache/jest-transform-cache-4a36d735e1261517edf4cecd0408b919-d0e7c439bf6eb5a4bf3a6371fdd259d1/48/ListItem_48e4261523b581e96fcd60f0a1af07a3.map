{"version":3,"sources":["ListItem.js"],"names":["ListItem","description","descriptionColor","props","descriptionEllipsizeMode","descriptionStyle","styles","color","ellipsizeMode","fontSize","left","right","title","onPress","theme","style","titleStyle","titleEllipsizeMode","rest","titleColor","colors","text","alpha","rgb","string","container","row","item","content","renderDescription","React","Component","displayName","StyleSheet","create","padding","flexDirection","margin","flex","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Title text for the list item.\n   */\n  title: React.Node,\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?:\n    | React.Node\n    | ((props: {\n        ellipsizeMode: EllipsizeProp,\n        color: string,\n        fontSize: number,\n      }) => React.Node),\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.Node,\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string }) => React.Node,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: ViewStyleProp,\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: TextStyleProp,\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: TextStyleProp,\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp,\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp,\n|};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  renderDescription(description, descriptionColor) {\n    const { descriptionEllipsizeMode, descriptionStyle } = this.props;\n\n    return typeof description === 'string' ? (\n      <Text\n        numberOfLines={2}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    ) : (\n      description &&\n        description({\n          ellipsizeMode: descriptionEllipsizeMode,\n          color: descriptionColor,\n          fontSize: styles.description.fontSize,\n        })\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left ? left({ color: descriptionColor }) : null}\n          <View style={[styles.item, styles.content]} pointerEvents=\"none\">\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {this.renderDescription(description, descriptionColor)}\n          </View>\n          {right ? right({ color: descriptionColor }) : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]}