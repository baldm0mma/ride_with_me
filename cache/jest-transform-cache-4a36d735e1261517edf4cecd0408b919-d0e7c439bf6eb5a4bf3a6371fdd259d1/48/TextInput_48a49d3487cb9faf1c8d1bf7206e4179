7b214c288ca007d82a4d949f2d530dc3
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _TextInputOutlined = _interopRequireDefault(require("./TextInputOutlined"));

var _TextInputFlat = _interopRequireDefault(require("./TextInputFlat"));

var _theming = require("../../core/theming");

var BLUR_ANIMATION_DURATION = 180;
var FOCUS_ANIMATION_DURATION = 150;

var TextInput = function (_React$Component) {
  (0, _inherits2.default)(TextInput, _React$Component);

  function TextInput() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TextInput);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TextInput)).call.apply(_getPrototypeOf2, [this].concat(_args)));
    _this.state = {
      labeled: new _reactNative.Animated.Value(_this.props.value || _this.props.error ? 0 : 1),
      error: new _reactNative.Animated.Value(_this.props.error ? 1 : 0),
      focused: false,
      placeholder: _this.props.error ? _this.props.placeholder : '',
      value: _this.props.value,
      labelLayout: {
        measured: false,
        width: 0
      }
    };

    _this._showPlaceholder = function () {
      clearTimeout(_this._timer);
      _this._timer = setTimeout(function () {
        return _this.setState({
          placeholder: _this.props.placeholder
        });
      }, 50);
    };

    _this._hidePlaceholder = function () {
      return _this.setState({
        placeholder: ''
      });
    };

    _this._showError = function () {
      _reactNative.Animated.timing(_this.state.error, {
        toValue: 1,
        duration: FOCUS_ANIMATION_DURATION,
        useNativeDriver: _reactNative.Platform.select({
          ios: false,
          default: true
        })
      }).start(_this._showPlaceholder);
    };

    _this._hideError = function () {
      _reactNative.Animated.timing(_this.state.error, {
        toValue: 0,
        duration: BLUR_ANIMATION_DURATION,
        useNativeDriver: _reactNative.Platform.select({
          ios: false,
          default: true
        })
      }).start();
    };

    _this._restoreLabel = function () {
      return _reactNative.Animated.timing(_this.state.labeled, {
        toValue: 1,
        duration: FOCUS_ANIMATION_DURATION,
        useNativeDriver: _reactNative.Platform.select({
          ios: false,
          default: true
        })
      }).start();
    };

    _this._minmizeLabel = function () {
      return _reactNative.Animated.timing(_this.state.labeled, {
        toValue: 0,
        duration: BLUR_ANIMATION_DURATION,
        useNativeDriver: _reactNative.Platform.select({
          ios: false,
          default: true
        })
      }).start();
    };

    _this._handleFocus = function () {
      if (_this.props.disabled) {
        return;
      }

      _this.setState({
        focused: true
      });

      if (_this.props.onFocus) {
        var _this$props;

        (_this$props = _this.props).onFocus.apply(_this$props, arguments);
      }
    };

    _this._handleBlur = function () {
      if (_this.props.disabled) {
        return;
      }

      _this.setState({
        focused: false
      });

      if (_this.props.onBlur) {
        var _this$props2;

        (_this$props2 = _this.props).onBlur.apply(_this$props2, arguments);
      }
    };

    _this._handleChangeText = function (value) {
      if (!_this.props.editable) {
        return;
      }

      _this.setState({
        value: value
      });

      _this.props.onChangeText && _this.props.onChangeText(value);
    };

    _this._onLayoutAnimatedText = function (e) {
      _this.setState({
        labelLayout: {
          width: e.nativeEvent.layout.width,
          measured: true
        }
      });
    };

    return _this;
  }

  (0, _createClass2.default)(TextInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevState.focused !== this.state.focused || prevState.value !== this.state.value || prevProps.error !== this.props.error) {
        if (this.state.value || this.state.focused || this.props.error) {
          this._minmizeLabel();
        } else {
          this._restoreLabel();
        }
      }

      if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label || prevProps.error !== this.props.error) {
        if (this.state.focused || this.props.error || !this.props.label) {
          this._showPlaceholder();
        } else {
          this._hidePlaceholder();
        }
      }

      if (prevProps.error !== this.props.error) {
        if (this.props.error) {
          this._showError();
        } else {
          this._hideError();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this._timer);
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps() {
      var _this$_root;

      return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this._root && this._root.isFocused();
    }
  }, {
    key: "clear",
    value: function clear() {
      return this._root && this._root.clear();
    }
  }, {
    key: "focus",
    value: function focus() {
      return this._root && this._root.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      return this._root && this._root.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          mode = _this$props3.mode,
          rest = (0, _objectWithoutProperties2.default)(_this$props3, ["mode"]);
      return mode === 'outlined' ? React.createElement(_TextInputOutlined.default, (0, _extends2.default)({}, rest, {
        parentState: this.state,
        innerRef: function innerRef(ref) {
          _this2._root = ref;
        },
        onFocus: this._handleFocus,
        onBlur: this._handleBlur,
        onChangeText: this._handleChangeText,
        onLayoutAnimatedText: this._onLayoutAnimatedText
      })) : React.createElement(_TextInputFlat.default, (0, _extends2.default)({}, rest, {
        parentState: this.state,
        innerRef: function innerRef(ref) {
          _this2._root = ref;
        },
        onFocus: this._handleFocus,
        onBlur: this._handleBlur,
        onChangeText: this._handleChangeText,
        onLayoutAnimatedText: this._onLayoutAnimatedText
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      return {
        value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value
      };
    }
  }]);
  return TextInput;
}(React.Component);

TextInput.defaultProps = {
  mode: 'flat',
  disabled: false,
  error: false,
  multiline: false,
  editable: true,
  render: function render(props) {
    return React.createElement(_reactNative.TextInput, props);
  }
};
(0, _reactLifecyclesCompat.polyfill)(TextInput);

var _default = (0, _theming.withTheme)(TextInput);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,