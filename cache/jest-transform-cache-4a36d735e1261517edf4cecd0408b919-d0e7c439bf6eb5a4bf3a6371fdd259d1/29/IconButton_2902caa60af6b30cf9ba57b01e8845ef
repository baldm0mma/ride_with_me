4528256849ab012ed0c72d5ef898305d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _CrossFadeIcon = _interopRequireDefault(require("./CrossFadeIcon"));

var _theming = require("../core/theming");

var IconButton = function IconButton(_ref) {
  var icon = _ref.icon,
      customColor = _ref.color,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 24 : _ref$size,
      accessibilityLabel = _ref.accessibilityLabel,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      _ref$animated = _ref.animated,
      animated = _ref$animated === void 0 ? false : _ref$animated,
      theme = _ref.theme,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["icon", "color", "size", "accessibilityLabel", "disabled", "onPress", "animated", "theme", "style"]);
  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;
  var rippleColor = (0, _color.default)(iconColor).alpha(0.32).rgb().string();
  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
  return React.createElement(_TouchableRipple.default, (0, _extends2.default)({
    borderless: true,
    centered: true,
    onPress: onPress,
    rippleColor: rippleColor,
    style: [styles.container, disabled && styles.disabled, style],
    accessibilityLabel: accessibilityLabel,
    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityStates: disabled ? ['disabled'] : undefined,
    disabled: disabled,
    hitSlop: _TouchableRipple.default.supported ? {
      top: 10,
      left: 10,
      bottom: 10,
      right: 10
    } : {
      top: 6,
      left: 6,
      bottom: 6,
      right: 6
    }
  }, rest), React.createElement(_reactNative.View, null, React.createElement(IconComponent, {
    color: iconColor,
    source: icon,
    size: size
  })));
};

var styles = _reactNative.StyleSheet.create({
  container: _TouchableRipple.default.supported ? {
    height: 28,
    width: 28,
    margin: 10,
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'visible'
  } : {
    borderRadius: 36 / 2,
    height: 36,
    width: 36,
    margin: 6,
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'visible'
  },
  disabled: {
    opacity: 0.32
  }
});

var _default = (0, _theming.withTheme)(IconButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,