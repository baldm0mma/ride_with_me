187644bbfdb191b4fdf58f458e3810f8
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _constants = require("../../constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SCREEN_INDENT = 8;
var ANIMATION_DURATION = 250;

var EASING = _reactNative.Easing.bezier(0.4, 0, 0.2, 1);

var Menu = function (_React$Component) {
  (0, _inherits2.default)(Menu, _React$Component);

  function Menu() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Menu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      rendered: _this.props.visible,
      top: 0,
      left: 0,
      windowLayout: {
        width: 0,
        height: 0
      },
      menuLayout: {
        width: 0,
        height: 0
      },
      anchorLayout: {
        width: 0,
        height: 0
      },
      opacityAnimation: new _reactNative.Animated.Value(0),
      scaleAnimation: new _reactNative.Animated.ValueXY({
        x: 0,
        y: 0
      })
    };
    _this._anchor = null;
    _this._menu = null;

    _this._measureMenuLayout = function () {
      return new Promise(function (resolve) {
        if (_this._menu) {
          _this._menu.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        }
      });
    };

    _this._measureAnchorLayout = function () {
      return new Promise(function (resolve) {
        if (_this._anchor) {
          _this._anchor.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        }
      });
    };

    _this._updateVisibility = function _callee() {
      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(Promise.resolve());

            case 2:
              if (_this.props.visible) {
                _this._show();
              } else {
                _this._hide();
              }

            case 3:
            case "end":
              return _context.stop();
          }
        }
      });
    };

    _this._isBrowser = function () {
      return 'document' in global;
    };

    _this._focusFirstDOMNode = function (el) {
      if (el && _this._isBrowser()) {
        var node = (0, _reactNative.findNodeHandle)(el);
        var focusableNode = node.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        focusableNode && focusableNode.focus();
      }
    };

    _this._handleDismiss = function () {
      if (_this.props.visible) {
        _this.props.onDismiss();
      }

      return true;
    };

    _this._handleKeypress = function (e) {
      if (e.key === 'Escape') {
        _this.props.onDismiss();
      }
    };

    _this._attachListeners = function () {
      _reactNative.BackHandler.addEventListener('hardwareBackPress', _this._handleDismiss);

      _reactNative.Dimensions.addEventListener('change', _this._handleDismiss);

      _this._isBrowser() && document.addEventListener('keyup', _this._handleKeypress);
    };

    _this._removeListeners = function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleDismiss);

      _reactNative.Dimensions.removeEventListener('change', _this._handleDismiss);

      _this._isBrowser() && document.removeEventListener('keyup', _this._handleKeypress);
    };

    _this._show = function _callee2() {
      var windowLayout, _ref, _ref2, menuLayout, anchorLayout;

      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              windowLayout = _reactNative.Dimensions.get('window');
              _context2.next = 3;
              return _regenerator.default.awrap(Promise.all([_this._measureMenuLayout(), _this._measureAnchorLayout()]));

            case 3:
              _ref = _context2.sent;
              _ref2 = (0, _slicedToArray2.default)(_ref, 2);
              menuLayout = _ref2[0];
              anchorLayout = _ref2[1];

              if (!(!windowLayout.width || !windowLayout.height || !menuLayout.width || !menuLayout.height || !anchorLayout.width || !anchorLayout.height)) {
                _context2.next = 10;
                break;
              }

              setTimeout(_this._show, ANIMATION_DURATION);
              return _context2.abrupt("return");

            case 10:
              _this.setState({
                left: anchorLayout.x,
                top: anchorLayout.y,
                windowLayout: {
                  height: windowLayout.height,
                  width: windowLayout.width
                },
                anchorLayout: {
                  height: anchorLayout.height,
                  width: anchorLayout.width
                },
                menuLayout: {
                  width: menuLayout.width,
                  height: menuLayout.height
                }
              }, function () {
                _this._attachListeners();

                _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.scaleAnimation, {
                  toValue: {
                    x: menuLayout.width,
                    y: menuLayout.height
                  },
                  duration: ANIMATION_DURATION,
                  easing: EASING,
                  useNativeDriver: true
                }), _reactNative.Animated.timing(_this.state.opacityAnimation, {
                  toValue: 1,
                  duration: ANIMATION_DURATION,
                  easing: EASING,
                  useNativeDriver: true
                })]).start(function (_ref3) {
                  var finished = _ref3.finished;

                  if (finished) {
                    _this._focusFirstDOMNode(_this._menu);
                  }
                });
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      });
    };

    _this._hide = function () {
      _this._removeListeners();

      _reactNative.Animated.timing(_this.state.opacityAnimation, {
        toValue: 0,
        duration: ANIMATION_DURATION,
        easing: EASING,
        useNativeDriver: true
      }).start(function (finished) {
        if (finished) {
          _this._focusFirstDOMNode(_this._anchor);

          _this.state.scaleAnimation.setValue({
            x: 0,
            y: 0
          });

          _this.setState({
            rendered: false
          });
        }
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        this._updateVisibility();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._removeListeners();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          visible = _this$props.visible,
          anchor = _this$props.anchor,
          style = _this$props.style,
          children = _this$props.children,
          theme = _this$props.theme,
          statusBarHeight = _this$props.statusBarHeight,
          onDismiss = _this$props.onDismiss;
      var _this$state = this.state,
          rendered = _this$state.rendered,
          windowLayout = _this$state.windowLayout,
          menuLayout = _this$state.menuLayout,
          anchorLayout = _this$state.anchorLayout,
          opacityAnimation = _this$state.opacityAnimation,
          scaleAnimation = _this$state.scaleAnimation;

      var additionalVerticalValue = _reactNative.Platform.select({
        android: statusBarHeight,
        default: 0
      });

      var _this$state2 = this.state,
          left = _this$state2.left,
          top = _this$state2.top;
      var scaleTransforms = [{
        scaleX: scaleAnimation.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [0, 1]
        })
      }, {
        scaleY: scaleAnimation.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [0, 1]
        })
      }];
      var positionTransforms = [];

      if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [-(menuLayout.width / 2), 0]
          })
        });

        if (left >= 0 && left < SCREEN_INDENT) {
          left = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [menuLayout.width / 2, 0]
          })
        });
        left += anchorLayout.width - menuLayout.width;
        var right = left + menuLayout.width;

        if (right <= windowLayout.width && right > windowLayout.width - SCREEN_INDENT) {
          left = windowLayout.width - SCREEN_INDENT - menuLayout.width;
        }
      }

      if (top <= windowLayout.height - menuLayout.height - SCREEN_INDENT) {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [-(menuLayout.height / 2), 0]
          })
        });

        if (top >= 0 && top < SCREEN_INDENT) {
          top = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [menuLayout.height / 2, 0]
          })
        });
        top += anchorLayout.height - menuLayout.height;
        var bottom = top + menuLayout.height + additionalVerticalValue;

        if (bottom <= windowLayout.height && bottom > windowLayout.height - SCREEN_INDENT) {
          top = windowLayout.height - SCREEN_INDENT - menuLayout.height - additionalVerticalValue;
        }
      }

      var shadowMenuContainerStyle = {
        opacity: opacityAnimation,
        transform: scaleTransforms,
        borderRadius: theme.roundness
      };

      var positionStyle = _objectSpread({
        top: top + additionalVerticalValue
      }, _reactNative.I18nManager.isRTL ? {
        right: left
      } : {
        left: left
      });

      return React.createElement(_reactNative.View, {
        ref: function ref(_ref5) {
          _this2._anchor = _ref5;
        },
        collapsable: false
      }, anchor, rendered ? React.createElement(_Portal.default, null, React.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: onDismiss
      }, React.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.absoluteFill
      })), React.createElement(_reactNative.View, {
        ref: function ref(_ref4) {
          _this2._menu = _ref4;
        },
        collapsable: false,
        accessibilityViewIsModal: visible,
        style: [styles.wrapper, positionStyle, style]
      }, React.createElement(_reactNative.Animated.View, {
        style: {
          transform: positionTransforms
        }
      }, React.createElement(_Surface.default, {
        style: [styles.shadowMenuContainer, shadowMenuContainerStyle]
      }, children)))) : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.visible && !prevState.rendered) {
        return {
          rendered: true
        };
      }

      return null;
    }
  }]);
  return Menu;
}(React.Component);

Menu.Item = _MenuItem.default;
Menu.defaultProps = {
  statusBarHeight: _constants.APPROX_STATUSBAR_HEIGHT
};

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    position: 'absolute'
  },
  shadowMenuContainer: {
    opacity: 0,
    paddingVertical: 8,
    elevation: 8
  }
});

var _default = (0, _theming.withTheme)(Menu);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,