8773a77bfc1ad59b898bbb2625f69b89
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _theming = require("../core/theming");

var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

var HelperText = function (_React$PureComponent) {
  (0, _inherits2.default)(HelperText, _React$PureComponent);

  function HelperText() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, HelperText);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HelperText)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      shown: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
      textHeight: 0
    };

    _this._showText = function () {
      _reactNative.Animated.timing(_this.state.shown, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true
      }).start();
    };

    _this._hideText = function () {
      _reactNative.Animated.timing(_this.state.shown, {
        toValue: 0,
        duration: 180,
        useNativeDriver: true
      }).start();
    };

    _this._handleTextLayout = function (e) {
      _this.props.onLayout && _this.props.onLayout(e);

      _this.setState({
        textHeight: e.nativeEvent.layout.height
      });
    };

    return _this;
  }

  (0, _createClass2.default)(HelperText, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {
        if (this.props.visible) {
          this._showText();
        } else {
          this._hideText();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          type = _this$props.type,
          visible = _this$props.visible,
          theme = _this$props.theme,
          onLayout = _this$props.onLayout,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "type", "visible", "theme", "onLayout"]);
      var colors = theme.colors,
          dark = theme.dark;
      var textColor = this.props.type === 'error' ? colors.error : (0, _color.default)(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();
      return React.createElement(AnimatedText, (0, _extends2.default)({
        onLayout: this._handleTextLayout,
        style: [styles.text, {
          color: textColor,
          opacity: this.state.shown,
          transform: visible && type === 'error' ? [{
            translateY: this.state.shown.interpolate({
              inputRange: [0, 1],
              outputRange: [-this.state.textHeight / 2, 0]
            })
          }] : []
        }, style]
      }, rest), this.props.children);
    }
  }]);
  return HelperText;
}(React.PureComponent);

HelperText.defaultProps = {
  type: 'info',
  visible: true
};

var styles = _reactNative.StyleSheet.create({
  text: {
    fontSize: 12,
    paddingVertical: 4,
    paddingHorizontal: 12
  }
});

var _default = (0, _theming.withTheme)(HelperText);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,