5a7cbb221c21845730ddd27f7848566c
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _ToggleButtonGroup = _interopRequireWildcard(require("./ToggleButtonGroup"));

var _colors = require("../../styles/colors");

var ToggleButton = function (_React$Component) {
  (0, _inherits2.default)(ToggleButton, _React$Component);

  function ToggleButton() {
    (0, _classCallCheck2.default)(this, ToggleButton);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ToggleButton).apply(this, arguments));
  }

  (0, _createClass2.default)(ToggleButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          size = _this$props.size,
          theme = _this$props.theme,
          accessibilityLabel = _this$props.accessibilityLabel,
          disabled = _this$props.disabled,
          style = _this$props.style,
          value = _this$props.value,
          status = _this$props.status,
          _onPress = _this$props.onPress,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress"]);
      var borderRadius = theme.roundness;
      return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {
        var backgroundColor;
        var checked = context && context.value === value || status === 'checked';

        if (checked) {
          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';
        } else {
          backgroundColor = 'transparent';
        }

        return React.createElement(_IconButton.default, (0, _extends2.default)({
          borderless: false,
          icon: icon,
          onPress: function onPress(e) {
            if (_onPress) {
              _onPress(e);
            }

            if (context) {
              context.onValueChange(!checked ? value : null);
            }
          },
          size: size,
          accessibilityLabel: accessibilityLabel,
          disabled: disabled,
          style: [styles.content, {
            backgroundColor: backgroundColor,
            borderRadius: borderRadius,
            borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()
          }, style]
        }, rest));
      });
    }
  }]);
  return ToggleButton;
}(React.Component);

ToggleButton.Group = _ToggleButtonGroup.default;

var styles = _reactNative.StyleSheet.create({
  content: {
    width: 42,
    height: 42,
    margin: 0
  }
});

var _default = (0, _theming.withTheme)(ToggleButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,