{"version":3,"sources":["ToggleButton.js"],"names":["ToggleButton","props","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","styles","content","borderColor","white","black","alpha","rgb","string","React","Component","Group","ToggleButtonGroup","StyleSheet","create","width","height","margin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;IA+EMA,Y;;;;;;;;;;6BAIK;AAAA,wBAYH,KAAKC,KAZF;AAAA,UAELC,IAFK,eAELA,IAFK;AAAA,UAGLC,IAHK,eAGLA,IAHK;AAAA,UAILC,KAJK,eAILA,KAJK;AAAA,UAKLC,kBALK,eAKLA,kBALK;AAAA,UAMLC,QANK,eAMLA,QANK;AAAA,UAOLC,KAPK,eAOLA,KAPK;AAAA,UAQLC,KARK,eAQLA,KARK;AAAA,UASLC,MATK,eASLA,MATK;AAAA,UAULC,QAVK,eAULA,OAVK;AAAA,UAWFC,IAXE;AAaP,UAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;AAEA,aACE,oBAAC,2CAAD,CAA0B,QAA1B,QACG,UAACC,OAAD,EAA0D;AACzD,YAAIC,eAAJ;AAEA,YAAMC,OAAiB,GACpBF,OAAO,IAAIA,OAAO,CAACN,KAAR,KAAkBA,KAA9B,IAAwCC,MAAM,KAAK,SADrD;;AAGA,YAAIO,OAAJ,EAAa;AACXD,UAAAA,eAAe,GAAGX,KAAK,CAACa,IAAN,GACd,0BADc,GAEd,oBAFJ;AAGD,SAJD,MAIO;AACLF,UAAAA,eAAe,GAAG,aAAlB;AACD;;AAED,eACE,oBAAC,mBAAD;AACE,UAAA,UAAU,EAAE,KADd;AAEE,UAAA,IAAI,EAAEb,IAFR;AAGE,UAAA,OAAO,EAAE,iBAAAgB,CAAC,EAAI;AACZ,gBAAIR,QAAJ,EAAa;AACXA,cAAAA,QAAO,CAACQ,CAAD,CAAP;AACD;;AAED,gBAAIJ,OAAJ,EAAa;AACXA,cAAAA,OAAO,CAACK,aAAR,CAAsB,CAACH,OAAD,GAAWR,KAAX,GAAmB,IAAzC;AACD;AACF,WAXH;AAYE,UAAA,IAAI,EAAEL,IAZR;AAaE,UAAA,kBAAkB,EAAEE,kBAbtB;AAcE,UAAA,QAAQ,EAAEC,QAdZ;AAeE,UAAA,KAAK,EAAE,CACLc,MAAM,CAACC,OADF,EAEL;AACEN,YAAAA,eAAe,EAAfA,eADF;AAEEH,YAAAA,YAAY,EAAZA,YAFF;AAGEU,YAAAA,WAAW,EAAE,oBAAMlB,KAAK,CAACa,IAAN,GAAaM,aAAb,GAAqBC,aAA3B,EACVC,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU;AAHf,WAFK,EAULpB,KAVK;AAfT,WA2BMI,IA3BN,EADF;AA+BD,OA9CH,CADF;AAkDD;;;EArEwBiB,KAAK,CAACC,S;;AAA3B7B,Y,CAEG8B,K,GAAQC,0B;;AAsEjB,IAAMX,MAAM,GAAGY,wBAAWC,MAAX,CAAkB;AAC/BZ,EAAAA,OAAO,EAAE;AACPa,IAAAA,KAAK,EAAE,EADA;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,MAAM,EAAE;AAHD;AADsB,CAAlB,CAAf;;eAQe,wBAAUpC,YAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\nimport type { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource,\n  /**\n   * Size of the icon.\n   */\n  size?: number,\n  /**\n   * Custom text color for button.\n   */\n  color?: string,\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value: ?string) => mixed,\n  /**\n   * Value of button.\n   */\n  value?: string,\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked',\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * class ToggleButtonExample extends React.Component {\n *   state = {\n *     status: 'checked',\n *   };\n *\n *   render() {\n *     return (\n *       <ToggleButton\n *         icon=\"bluetooth\"\n *         value=\"bluetooth\"\n *         status={this.state.status}\n *         onPress={value =>\n *           this.setState({\n *             status: value === 'checked' ? 'unchecked' : 'checked',\n *           })\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.js\n  static Group = ToggleButtonGroup;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: ?{ value: string, onValueChange: Function }) => {\n          let backgroundColor;\n\n          const checked: ?boolean =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={e => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]}