{"version":3,"sources":["screens.native.js"],"names":["USE_SCREENS","getViewManagerConfigCompat","name","UIManager","getViewManagerConfig","useScreens","shouldUseScreens","console","error","screensEnabled","NativeScreenValue","NativeScreenContainerValue","AnimatedNativeScreen","ScreensNativeModules","NativeScreen","NativeScreenContainer","Screen","setRef","ref","_ref","props","onComponentRef","setNativeProps","active","Animated","createAnimatedComponent","version","minor","style","children","rest","StyleSheet","absoluteFill","React","Component","ScreenContainer","module","exports"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  requireNativeComponent,\n  View,\n  UIManager,\n  StyleSheet,\n} from 'react-native';\nimport { version } from 'react-native/Libraries/Core/ReactNativeVersion';\n\nlet USE_SCREENS = false;\n\n// UIManager[`${moduleName}`] is deprecated in RN 0.58 and `getViewManagerConfig` is added.\n// We can remove this when we drop support for RN < 0.58.\nconst getViewManagerConfigCompat = name =>\n  typeof UIManager.getViewManagerConfig !== 'undefined'\n    ? UIManager.getViewManagerConfig(name)\n    : UIManager[name];\n\nfunction useScreens(shouldUseScreens = true) {\n  USE_SCREENS = shouldUseScreens;\n  if (USE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nfunction screensEnabled() {\n  return USE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue;\nlet NativeScreenContainerValue;\nlet AnimatedNativeScreen;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen', null);\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer', null);\n    return NativeScreenContainerValue;\n  },\n};\n\nclass Screen extends React.Component {\n  setNativeProps(props) {\n    this._ref.setNativeProps(props);\n  }\n  setRef = ref => {\n    this._ref = ref;\n    this.props.onComponentRef && this.props.onComponentRef(ref);\n  };\n  render() {\n    if (!USE_SCREENS) {\n      // Filter out active prop in this case because it is unused and\n      // can cause problems depending on react-native version:\n      // https://github.com/react-navigation/react-navigation/issues/4886\n\n      /* eslint-disable no-unused-vars */\n      const { active, onComponentRef, ...props } = this.props;\n\n      return <Animated.View {...props} ref={this.setRef} />;\n    } else {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      if (version.minor >= 57) {\n        return <AnimatedNativeScreen {...this.props} ref={this.setRef} />;\n      } else {\n        // On RN version below 0.57 we need to wrap screen's children with an\n        // additional View because of a bug fixed in react-native/pull/20658 which\n        // was preventing a view from having both styles and some other props being\n        // \"animated\" (using Animated native driver)\n        const { style, children, ...rest } = this.props;\n        return (\n          <AnimatedNativeScreen\n            {...rest}\n            ref={this.setRef}\n            style={StyleSheet.absoluteFill}>\n            <Animated.View style={style}>{children}</Animated.View>\n          </AnimatedNativeScreen>\n        );\n      }\n    }\n  }\n}\n\nclass ScreenContainer extends React.Component {\n  render() {\n    if (!USE_SCREENS) {\n      return <View {...this.props} />;\n    } else {\n      return <ScreensNativeModules.NativeScreenContainer {...this.props} />;\n    }\n  }\n}\n\nmodule.exports = {\n  ScreenContainer,\n  Screen,\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n  useScreens,\n  screensEnabled,\n};\n"]}