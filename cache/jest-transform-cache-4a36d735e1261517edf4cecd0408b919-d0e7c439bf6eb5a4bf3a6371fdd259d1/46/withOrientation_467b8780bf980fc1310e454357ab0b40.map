{"version":3,"sources":["withOrientation.js"],"names":["isOrientationLandscape","width","height","WrappedComponent","withOrientation","handleOrientationChange","window","isLandscape","setState","Dimensions","get","state","addEventListener","removeEventListener","props","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAeO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,MACpCC,KADoC,QACpCA,KADoC;AAAA,MAEpCC,MAFoC,QAEpCA,MAFoC;AAAA,SAGLD,KAAK,GAAGC,MAHH;AAAA,CAA/B;;;;AAKQ,kBACbC,gBADa,EAEb;AAAA,MACMC,eADN;AAAA;;AAEE,+BAAc;AAAA;;AAAA;AACZ;;AADY,YAmBdC,uBAnBc,GAmBY,iBAA8C;AAAA,YAA3CC,MAA2C,SAA3CA,MAA2C;AACtE,YAAMC,WAAW,GAAGP,sBAAsB,CAACM,MAAD,CAA1C;;AACA,cAAKE,QAAL,CAAc;AAAED,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACD,OAtBa;;AAGZ,UAAMA,YAAW,GAAGP,sBAAsB,CAACS,wBAAWC,GAAX,CAAe,QAAf,CAAD,CAA1C;;AACA,YAAKC,KAAL,GAAa;AAAEJ,QAAAA,WAAW,EAAXA;AAAF,OAAb;AAJY;AAKb;;AAPH;AAAA;AAAA,0CASsB;AAClB,YAAI,OAAOE,wBAAWG,gBAAlB,KAAuC,UAA3C,EAAuD;AACrDH,kCAAWG,gBAAX,CAA4B,QAA5B,EAAsC,KAAKP,uBAA3C;AACD;AACF;AAbH;AAAA;AAAA,6CAeyB;AACrB,YAAI,OAAOI,wBAAWI,mBAAlB,KAA0C,UAA9C,EAA0D;AACxDJ,kCAAWI,mBAAX,CAA+B,QAA/B,EAAyC,KAAKR,uBAA9C;AACD;AACF;AAnBH;AAAA;AAAA,+BA0BW;AACP,eAAO,oBAAC,gBAAD,6BAAsB,KAAKS,KAA3B,EAAsC,KAAKH,KAA3C,EAAP;AACD;AA5BH;AAAA;AAAA,IAC8BI,KAAK,CAACC,SADpC;;AA+BA,SAAO,mCAAoBZ,eAApB,EAAqCD,gBAArC,CAAP;AACD","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype WindowDimensions = {\n  width: number,\n  height: number,\n};\n\ntype InjectedProps = {\n  isLandscape: boolean,\n};\n\ntype State = {\n  isLandscape: boolean,\n};\n\nexport const isOrientationLandscape = ({\n  width,\n  height,\n}: WindowDimensions): boolean => width > height;\n\nexport default function<T: {}>(\n  WrappedComponent: React.ComponentType<T & InjectedProps>\n) {\n  class withOrientation extends React.Component<T, State> {\n    constructor() {\n      super();\n\n      const isLandscape = isOrientationLandscape(Dimensions.get('window'));\n      this.state = { isLandscape };\n    }\n\n    componentDidMount() {\n      if (typeof Dimensions.addEventListener === 'function') {\n        Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }\n\n    componentWillUnmount() {\n      if (typeof Dimensions.removeEventListener === 'function') {\n        Dimensions.removeEventListener('change', this.handleOrientationChange);  \n      }\n    }\n\n    handleOrientationChange = ({ window }: { window: WindowDimensions }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}\n"]}