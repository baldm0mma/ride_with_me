fd5ce9ca2254a523b6d13c14a905b387
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTabNavigator;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _core = require("@react-navigation/core");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function createTabNavigator(TabView) {
  var NavigationView = function (_React$Component) {
    (0, _inherits2.default)(NavigationView, _React$Component);

    function NavigationView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, NavigationView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(NavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._renderScene = function (_ref) {
        var route = _ref.route;
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            descriptors = _this$props.descriptors;
        var descriptor = descriptors[route.key];
        var TabComponent = descriptor.getComponent();
        return React.createElement(_core.SceneView, {
          screenProps: screenProps,
          navigation: descriptor.navigation,
          component: TabComponent
        });
      };

      _this._renderIcon = function (_ref2) {
        var route = _ref2.route,
            _ref2$focused = _ref2.focused,
            focused = _ref2$focused === void 0 ? true : _ref2$focused,
            tintColor = _ref2.tintColor,
            _ref2$horizontal = _ref2.horizontal,
            horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            focused: focused,
            tintColor: tintColor,
            horizontal: horizontal
          }) : options.tabBarIcon;
        }

        return null;
      };

      _this._getButtonComponent = function (_ref3) {
        var route = _ref3.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarButtonComponent) {
          return options.tabBarButtonComponent;
        }

        return null;
      };

      _this._getLabelText = function (_ref4) {
        var route = _ref4.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarLabel) {
          return options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      };

      _this._getAccessibilityLabel = function (_ref5) {
        var route = _ref5.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {
          return options.tabBarAccessibilityLabel;
        }

        var label = _this._getLabelText({
          route: route
        });

        if (typeof label === 'string') {
          var routes = _this.props.navigation.state.routes;
          return label + ", tab, " + (routes.indexOf(route) + 1) + " of " + routes.length;
        }
      };

      _this._getTestID = function (_ref6) {
        var route = _ref6.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        return options.tabBarTestID;
      };

      _this._makeDefaultHandler = function (_ref7) {
        var route = _ref7.route,
            navigation = _ref7.navigation;
        return function () {
          if (navigation.isFocused()) {
            if (route.hasOwnProperty('index') && route.index > 0) {
              navigation.dispatch(_core.StackActions.popToTop({
                key: route.key
              }));
            } else {
              navigation.emit('refocus');
            }
          } else {
            _this._jumpTo(route.routeName);
          }
        };
      };

      _this._handleTabPress = function (_ref8) {
        var route = _ref8.route;
        _this._isTabPress = true;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var navigation = descriptor.navigation,
            options = descriptor.options;

        var defaultHandler = _this._makeDefaultHandler({
          route: route,
          navigation: navigation
        });

        if (options.tabBarOnPress) {
          options.tabBarOnPress({
            navigation: navigation,
            defaultHandler: defaultHandler
          });
        } else {
          defaultHandler();
        }
      };

      _this._handleTabLongPress = function (_ref9) {
        var route = _ref9.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var navigation = descriptor.navigation,
            options = descriptor.options;

        var defaultHandler = _this._makeDefaultHandler({
          route: route,
          navigation: navigation
        });

        if (options.tabBarOnLongPress) {
          options.tabBarOnLongPress({
            navigation: navigation,
            defaultHandler: defaultHandler
          });
        } else {
          defaultHandler();
        }
      };

      _this._handleIndexChange = function (index) {
        if (_this._isTabPress) {
          _this._isTabPress = false;
          return;
        }

        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);
      };

      _this._handleSwipeStart = function () {
        _this.setState({
          isSwiping: true
        });
      };

      _this._handleSwipeEnd = function () {
        _this.setState({
          isSwiping: false
        });
      };

      _this._jumpTo = function (routeName) {
        return _this.props.navigation.dispatch(_core.NavigationActions.navigate({
          routeName: routeName
        }));
      };

      _this._isTabPress = false;
      return _this;
    }

    (0, _createClass2.default)(NavigationView, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            descriptors = _this$props2.descriptors,
            navigation = _this$props2.navigation,
            screenProps = _this$props2.screenProps;
        var state = navigation.state;
        var route = state.routes[state.index];
        var descriptor = descriptors[route.key];

        var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);

        return React.createElement(TabView, (0, _extends2.default)({}, options, {
          getLabelText: this._getLabelText,
          getButtonComponent: this._getButtonComponent,
          getAccessibilityLabel: this._getAccessibilityLabel,
          getTestID: this._getTestID,
          renderIcon: this._renderIcon,
          renderScene: this._renderScene,
          onIndexChange: this._handleIndexChange,
          onTabPress: this._handleTabPress,
          onTabLongPress: this._handleTabLongPress,
          navigation: navigation,
          descriptors: descriptors,
          screenProps: screenProps
        }));
      }
    }]);
    return NavigationView;
  }(React.Component);

  return function (routes) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _core.TabRouter)(routes, config);
    return (0, _core.createNavigator)(NavigationView, router, config);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,