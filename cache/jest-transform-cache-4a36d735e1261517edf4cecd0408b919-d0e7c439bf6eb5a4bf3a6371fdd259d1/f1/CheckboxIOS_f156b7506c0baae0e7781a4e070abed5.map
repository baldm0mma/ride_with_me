{"version":3,"sources":["CheckboxIOS.js"],"names":["CheckboxIOS","props","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","icon","undefined","styles","container","opacity","React","Component","displayName","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;IAyCMA,W;;;;;;;;;;6BAGK;AAAA,wBAC+C,KAAKC,KADpD;AAAA,UACCC,MADD,eACCA,MADD;AAAA,UACSC,QADT,eACSA,QADT;AAAA,UACmBC,OADnB,eACmBA,OADnB;AAAA,UAC4BC,KAD5B,eAC4BA,KAD5B;AAAA,UACsCC,IADtC;AAEP,UAAMC,OAAO,GAAGL,MAAM,KAAK,SAA3B;AACA,UAAMM,aAAa,GAAGN,MAAM,KAAK,eAAjC;AAEA,UAAMO,YAAY,GAAGN,QAAQ,GACzBE,KAAK,CAACK,MAAN,CAAaP,QADY,GAEzB,KAAKF,KAAL,CAAWU,KAAX,IAAoBN,KAAK,CAACK,MAAN,CAAaE,MAFrC;AAIA,UAAIC,WAAJ;;AAEA,UAAIV,QAAJ,EAAc;AACZU,QAAAA,WAAW,GAAG,oBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd;AAID,OALD,MAKO;AACLJ,QAAAA,WAAW,GAAG,oBAAMJ,YAAN,EACXS,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd;AAID;;AAED,UAAME,IAAI,GAAGX,aAAa,GAAG,QAAH,GAAc,MAAxC;AAEA,aACE,oBAAC,wBAAD,6BACMF,IADN;AAEE,QAAA,UAAU,MAFZ;AAGE,QAAA,WAAW,EAAEO,WAHf;AAIE,QAAA,OAAO,EAAET,OAJX;AAKE,QAAA,QAAQ,EAAED,QALZ;AAME,QAAA,mBAAmB,EAAEA,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAN3D;AAOE,QAAA,0BAA0B,EAAC,QAP7B;AAQE,QAAA,iBAAiB,EAAC,QARpB;AASE,QAAA,mBAAmB,EAAEA,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkBiB,SATjD;AAUE,QAAA,uBAAuB,EAAC,QAV1B;AAWE,QAAA,KAAK,EAAEC,MAAM,CAACC;AAXhB,UAaE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAEf,aAAa,IAAID,OAAjB,GAA2B,CAA3B,GAA+B;AAA1C;AAAb,SACE,oBAAC,aAAD;AACE,QAAA,gBAAgB,EAAE,KADpB;AAEE,QAAA,MAAM,EAAEY,IAFV;AAGE,QAAA,IAAI,EAAE,EAHR;AAIE,QAAA,KAAK,EAAEV;AAJT,QADF,CAbF,CADF;AAwBD;;;EApDuBe,KAAK,CAACC,S;;AAA1BzB,W,CACG0B,W,GAAc,c;;AAsDvB,IAAML,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;;eAOe,wBAAU9B,WAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate',\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    const icon = indeterminate ? 'remove' : 'done';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : undefined}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <Icon\n            allowFontScaling={false}\n            source={icon}\n            size={24}\n            color={checkedColor}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n"]}