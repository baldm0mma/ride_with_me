{"version":3,"sources":["RadioButtonAndroid.js"],"names":["BORDER_WIDTH","RadioButtonAndroid","state","borderAnim","Animated","Value","radioAnim","prevProps","status","props","setValue","timing","toValue","duration","start","disabled","onPress","theme","rest","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","checked","fade","undefined","value","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","React","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  borderAnim: Animated.Value,\n  radioAnim: Animated.Value,\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, radioColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress(this.props.value);\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : undefined}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View\n          style={[\n            styles.radio,\n            {\n              borderColor: radioColor,\n              borderWidth: this.state.borderAnim,\n            },\n          ]}\n        >\n          {checked ? (\n            <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n              <Animated.View\n                style={[\n                  styles.dot,\n                  {\n                    backgroundColor: radioColor,\n                    transform: [{ scale: this.state.radioAnim }],\n                  },\n                ]}\n              />\n            </View>\n          ) : null}\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n"]}