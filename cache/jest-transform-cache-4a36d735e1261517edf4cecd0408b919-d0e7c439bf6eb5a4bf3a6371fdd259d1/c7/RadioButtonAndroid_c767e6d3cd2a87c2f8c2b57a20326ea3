f5d3fd7c866f35b22fa3cd99b0e65aec
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _theming = require("../core/theming");

var BORDER_WIDTH = 2;

var RadioButtonAndroid = function (_React$Component) {
  (0, _inherits2.default)(RadioButtonAndroid, _React$Component);

  function RadioButtonAndroid() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, RadioButtonAndroid);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      borderAnim: new _reactNative.Animated.Value(BORDER_WIDTH),
      radioAnim: new _reactNative.Animated.Value(1)
    };
    return _this;
  }

  (0, _createClass2.default)(RadioButtonAndroid, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.status === this.props.status) {
        return;
      }

      if (this.props.status === 'checked') {
        this.state.radioAnim.setValue(1.2);

        _reactNative.Animated.timing(this.state.radioAnim, {
          toValue: 1,
          duration: 150
        }).start();
      } else {
        this.state.borderAnim.setValue(10);

        _reactNative.Animated.timing(this.state.borderAnim, {
          toValue: BORDER_WIDTH,
          duration: 150
        }).start();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          disabled = _this$props.disabled,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "onPress", "theme"]);
      var checkedColor = this.props.color || theme.colors.accent;
      var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
      var rippleColor, radioColor;
      var checked = this.props.status === 'checked';

      if (disabled) {
        rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
        radioColor = theme.colors.disabled;
      } else {
        rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
        radioColor = checked ? checkedColor : uncheckedColor;
      }

      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: disabled ? undefined : function () {
          onPress && onPress(_this2.props.value);
        },
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
        accessibilityRole: "button",
        accessibilityStates: disabled ? ['disabled'] : undefined,
        accessibilityLiveRegion: "polite",
        style: styles.container
      }), React.createElement(_reactNative.Animated.View, {
        style: [styles.radio, {
          borderColor: radioColor,
          borderWidth: this.state.borderAnim
        }]
      }, checked ? React.createElement(_reactNative.View, {
        style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer]
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.dot, {
          backgroundColor: radioColor,
          transform: [{
            scale: this.state.radioAnim
          }]
        }]
      })) : null));
    }
  }]);
  return RadioButtonAndroid;
}(React.Component);

RadioButtonAndroid.displayName = 'RadioButton.Android';

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18
  },
  radioContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  radio: {
    height: 20,
    width: 20,
    borderRadius: 10,
    margin: 8
  },
  dot: {
    height: 10,
    width: 10,
    borderRadius: 5
  }
});

var _default = (0, _theming.withTheme)(RadioButtonAndroid);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,