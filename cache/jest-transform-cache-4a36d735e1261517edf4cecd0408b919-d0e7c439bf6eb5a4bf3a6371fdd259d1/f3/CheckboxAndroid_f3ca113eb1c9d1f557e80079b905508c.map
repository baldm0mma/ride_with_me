{"version":3,"sources":["CheckboxAndroid.js"],"names":["CheckboxAndroid","state","scaleAnim","Animated","Value","prevProps","status","props","checked","sequence","timing","toValue","duration","start","disabled","onPress","theme","rest","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","undefined","styles","container","transform","scale","StyleSheet","absoluteFill","fillContainer","fill","borderColor","React","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate',\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  scaleAnim: Animated.Value,\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? 200 : 0,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? 200 : 350,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'indeterminate-check-box'\n      : checked\n        ? 'check-box'\n        : 'check-box-outline-blank';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : undefined}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <Icon\n            allowFontScaling={false}\n            source={icon}\n            size={24}\n            color={checkboxColor}\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n"]}