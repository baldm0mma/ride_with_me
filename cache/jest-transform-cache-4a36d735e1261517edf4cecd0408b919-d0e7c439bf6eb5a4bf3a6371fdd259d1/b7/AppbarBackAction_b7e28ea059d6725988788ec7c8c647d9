d330d4df50b5586188157602772e87a7
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _AppbarAction = _interopRequireDefault(require("./AppbarAction"));

var AppbarBackAction = function (_React$Component) {
  (0, _inherits2.default)(AppbarBackAction, _React$Component);

  function AppbarBackAction() {
    (0, _classCallCheck2.default)(this, AppbarBackAction);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppbarBackAction).apply(this, arguments));
  }

  (0, _createClass2.default)(AppbarBackAction, [{
    key: "render",
    value: function render() {
      return React.createElement(_AppbarAction.default, (0, _extends2.default)({}, this.props, {
        icon: _reactNative.Platform.OS === 'ios' ? function (_ref) {
          var size = _ref.size,
              color = _ref.color;
          return React.createElement(_reactNative.View, {
            style: [styles.wrapper, {
              width: size,
              height: size,
              transform: [{
                scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
              }]
            }]
          }, React.createElement(_reactNative.Image, {
            source: require("../../assets/back-chevron.png"),
            style: [styles.icon, {
              tintColor: color
            }]
          }));
        } : {
          source: 'arrow-back',
          direction: 'auto'
        }
      }));
    }
  }]);
  return AppbarBackAction;
}(React.Component);

AppbarBackAction.displayName = 'Appbar.BackAction';
AppbarBackAction.defaultProps = {
  accessibilityLabel: 'Back'
};

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    height: 21,
    width: 21,
    resizeMode: 'contain'
  }
});

var _default = AppbarBackAction;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcGJhckJhY2tBY3Rpb24uanMiXSwibmFtZXMiOlsiQXBwYmFyQmFja0FjdGlvbiIsInByb3BzIiwiUGxhdGZvcm0iLCJPUyIsInNpemUiLCJjb2xvciIsInN0eWxlcyIsIndyYXBwZXIiLCJ3aWR0aCIsImhlaWdodCIsInRyYW5zZm9ybSIsInNjYWxlWCIsIkkxOG5NYW5hZ2VyIiwiaXNSVEwiLCJyZXF1aXJlIiwiaWNvbiIsInRpbnRDb2xvciIsInNvdXJjZSIsImRpcmVjdGlvbiIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJkZWZhdWx0UHJvcHMiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicmVzaXplTW9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBRUE7O0lBNkJNQSxnQjs7Ozs7Ozs7Ozs2QkFPSztBQUNQLGFBQ0Usb0JBQUMscUJBQUQsNkJBQ00sS0FBS0MsS0FEWDtBQUVFLFFBQUEsSUFBSSxFQUNGQyxzQkFBU0MsRUFBVCxLQUFnQixLQUFoQixHQUNJO0FBQUEsY0FBR0MsSUFBSCxRQUFHQSxJQUFIO0FBQUEsY0FBU0MsS0FBVCxRQUFTQSxLQUFUO0FBQUEsaUJBQ0Usb0JBQUMsaUJBQUQ7QUFDRSxZQUFBLEtBQUssRUFBRSxDQUNMQyxNQUFNLENBQUNDLE9BREYsRUFFTDtBQUNFQyxjQUFBQSxLQUFLLEVBQUVKLElBRFQ7QUFFRUssY0FBQUEsTUFBTSxFQUFFTCxJQUZWO0FBR0VNLGNBQUFBLFNBQVMsRUFBRSxDQUFDO0FBQUVDLGdCQUFBQSxNQUFNLEVBQUVDLHlCQUFZQyxLQUFaLEdBQW9CLENBQUMsQ0FBckIsR0FBeUI7QUFBbkMsZUFBRDtBQUhiLGFBRks7QUFEVCxhQVVFLG9CQUFDLGtCQUFEO0FBQ0UsWUFBQSxNQUFNLEVBQUVDLE9BQU8saUNBRGpCO0FBRUUsWUFBQSxLQUFLLEVBQUUsQ0FBQ1IsTUFBTSxDQUFDUyxJQUFSLEVBQWM7QUFBRUMsY0FBQUEsU0FBUyxFQUFFWDtBQUFiLGFBQWQ7QUFGVCxZQVZGLENBREY7QUFBQSxTQURKLEdBa0JJO0FBQUVZLFVBQUFBLE1BQU0sRUFBRSxZQUFWO0FBQXdCQyxVQUFBQSxTQUFTLEVBQUU7QUFBbkM7QUFyQlIsU0FERjtBQTBCRDs7O0VBbEM0QkMsS0FBSyxDQUFDQyxTOztBQUEvQnBCLGdCLENBQ0dxQixXLEdBQWMsbUI7QUFEakJyQixnQixDQUdHc0IsWSxHQUFlO0FBQ3BCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQURBLEM7O0FBa0N4QixJQUFNakIsTUFBTSxHQUFHa0Isd0JBQVdDLE1BQVgsQ0FBa0I7QUFDL0JsQixFQUFBQSxPQUFPLEVBQUU7QUFDUG1CLElBQUFBLFVBQVUsRUFBRSxRQURMO0FBRVBDLElBQUFBLGNBQWMsRUFBRTtBQUZULEdBRHNCO0FBSy9CWixFQUFBQSxJQUFJLEVBQUU7QUFDSk4sSUFBQUEsTUFBTSxFQUFFLEVBREo7QUFFSkQsSUFBQUEsS0FBSyxFQUFFLEVBRkg7QUFHSm9CLElBQUFBLFVBQVUsRUFBRTtBQUhSO0FBTHlCLENBQWxCLENBQWY7O2VBWWU1QixnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFZpZXcsIEltYWdlLCBJMThuTWFuYWdlciwgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgQXBwYmFyQWN0aW9uIGZyb20gJy4vQXBwYmFyQWN0aW9uJztcblxudHlwZSBQcm9wcyA9IFJlYWN0LkVsZW1lbnRDb25maWc8dHlwZW9mIEFwcGJhckFjdGlvbj4gJiB7fFxuICAvKipcbiAgICogIEN1c3RvbSBjb2xvciBmb3IgYmFjayBpY29uLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBPcHRpb25hbCBpY29uIHNpemUuXG4gICAqL1xuICBzaXplPzogbnVtYmVyLFxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLiBBIGRpc2FibGVkIGJ1dHRvbiBpcyBncmV5ZWQgb3V0IGFuZCBgb25QcmVzc2AgaXMgbm90IGNhbGxlZCBvbiB0b3VjaC5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbixcbiAgLyoqXG4gICAqIEFjY2Vzc2liaWxpdHkgbGFiZWwgZm9yIHRoZSBidXR0b24uIFRoaXMgaXMgcmVhZCBieSB0aGUgc2NyZWVuIHJlYWRlciB3aGVuIHRoZSB1c2VyIHRhcHMgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlMYWJlbD86IHN0cmluZyxcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gcHJlc3MuXG4gICAqL1xuICBvblByZXNzPzogKCkgPT4gbWl4ZWQsXG4gIHN0eWxlPzogYW55LFxufH07XG5cbi8qKlxuICogQSBjb21wb25lbnQgdXNlZCB0byBkaXNwbGF5IGEgYmFjayBidXR0b24gaW4gdGhlIGFwcGJhci5cbiAqL1xuY2xhc3MgQXBwYmFyQmFja0FjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQXBwYmFyLkJhY2tBY3Rpb24nO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYWNjZXNzaWJpbGl0eUxhYmVsOiAnQmFjaycsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8QXBwYmFyQWN0aW9uXG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICBpY29uPXtcbiAgICAgICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2lvcydcbiAgICAgICAgICAgID8gKHsgc2l6ZSwgY29sb3IgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMud3JhcHBlcixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFt7IHNjYWxlWDogSTE4bk1hbmFnZXIuaXNSVEwgPyAtMSA6IDEgfV0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL2Fzc2V0cy9iYWNrLWNoZXZyb24ucG5nJyl9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLmljb24sIHsgdGludENvbG9yOiBjb2xvciB9XX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IHsgc291cmNlOiAnYXJyb3ctYmFjaycsIGRpcmVjdGlvbjogJ2F1dG8nIH1cbiAgICAgICAgfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgd3JhcHBlcjoge1xuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgfSxcbiAgaWNvbjoge1xuICAgIGhlaWdodDogMjEsXG4gICAgd2lkdGg6IDIxLFxuICAgIHJlc2l6ZU1vZGU6ICdjb250YWluJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBcHBiYXJCYWNrQWN0aW9uO1xuIl19