{"version":3,"sources":["MenuItem.js"],"names":["MenuItem","props","icon","title","disabled","onPress","theme","style","disabledColor","dark","white","black","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","color","React","Component","displayName","minWidth","maxWidth","iconWidth","StyleSheet","create","padding","flexDirection","width","fontSize","margin","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport type { Theme } from '../../types';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.Node,\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource,\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  style?: any,\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const { icon, title, disabled, onPress, theme, style } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[styles.item, styles.content, icon && styles.widthWithIcon]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth,\n    maxWidth,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]}