85615e5fe28cadee25e99c3d8700b9ae
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var NativeAnimatedHelper = require("../NativeAnimatedHelper");

var Animation = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }

  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      animatedValue.__makeNative();

      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();

module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZEhlbHBlciIsInJlcXVpcmUiLCJBbmltYXRpb24iLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwiX19uYXRpdmVJZCIsIkFQSSIsInN0b3BBbmltYXRpb24iLCJFcnJvciIsInJlc3VsdCIsIl9fb25FbmQiLCJfX21ha2VOYXRpdmUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyIsIl9fZGVib3VuY2VkT25FbmQiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0E7Ozs7Ozs7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUdDLE9BQU8sMkJBQXBDOztJQWlCTUMsUzs7Ozs7OzswQkFPRkMsUyxFQUNBQyxRLEVBQ0FDLEssRUFDQUMsaUIsRUFDQUMsYSxFQUNNLENBQUU7OzsyQkFDRztBQUNYLFVBQUksS0FBS0MsVUFBVCxFQUFxQjtBQUNuQlIsUUFBQUEsb0JBQW9CLENBQUNTLEdBQXJCLENBQXlCQyxhQUF6QixDQUF1QyxLQUFLRixVQUE1QztBQUNEO0FBQ0Y7OztpREFDaUM7QUFHaEMsWUFBTSxJQUFJRyxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNEOzs7cUNBRWdCQyxNLEVBQXlCO0FBQ3hDLFVBQU1QLEtBQUssR0FBRyxLQUFLUSxPQUFuQjtBQUNBLFdBQUtBLE9BQUwsR0FBZSxJQUFmO0FBQ0FSLE1BQUFBLEtBQUssSUFBSUEsS0FBSyxDQUFDTyxNQUFELENBQWQ7QUFDRDs7OzJDQUNzQkwsYSxFQUFvQztBQUN6REEsTUFBQUEsYUFBYSxDQUFDTyxZQUFkOztBQUNBLFdBQUtOLFVBQUwsR0FBa0JSLG9CQUFvQixDQUFDZSxzQkFBckIsRUFBbEI7QUFDQWYsTUFBQUEsb0JBQW9CLENBQUNTLEdBQXJCLENBQXlCTyxrQkFBekIsQ0FDRSxLQUFLUixVQURQLEVBRUVELGFBQWEsQ0FBQ1UsY0FBZCxFQUZGLEVBR0UsS0FBS0MsMEJBQUwsRUFIRixFQUlFLEtBQUtDLGdCQUFMLENBQXNCQyxJQUF0QixDQUEyQixJQUEzQixDQUpGO0FBTUQ7Ozs7O0FBR0hDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLFNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcblxuZXhwb3J0IHR5cGUgRW5kUmVzdWx0ID0ge2ZpbmlzaGVkOiBib29sZWFufTtcbmV4cG9ydCB0eXBlIEVuZENhbGxiYWNrID0gKHJlc3VsdDogRW5kUmVzdWx0KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBBbmltYXRpb25Db25maWcgPSB7XG4gIGlzSW50ZXJhY3Rpb24/OiBib29sZWFuLFxuICB1c2VOYXRpdmVEcml2ZXI/OiBib29sZWFuLFxuICBvbkNvbXBsZXRlPzogP0VuZENhbGxiYWNrLFxuICBpdGVyYXRpb25zPzogbnVtYmVyLFxufTtcblxuLy8gSW1wb3J0YW50IG5vdGU6IHN0YXJ0KCkgYW5kIHN0b3AoKSB3aWxsIG9ubHkgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZS5cbi8vIE9uY2UgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHN0b3BwZWQgb3IgZmluaXNoZWQgaXRzIGNvdXJzZSwgaXQgd2lsbFxuLy8gbm90IGJlIHJldXNlZC5cbmNsYXNzIEFuaW1hdGlvbiB7XG4gIF9fYWN0aXZlOiBib29sZWFuO1xuICBfX2lzSW50ZXJhY3Rpb246IGJvb2xlYW47XG4gIF9fbmF0aXZlSWQ6IG51bWJlcjtcbiAgX19vbkVuZDogP0VuZENhbGxiYWNrO1xuICBfX2l0ZXJhdGlvbnM6IG51bWJlcjtcbiAgc3RhcnQoXG4gICAgZnJvbVZhbHVlOiBudW1iZXIsXG4gICAgb25VcGRhdGU6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkLFxuICAgIG9uRW5kOiA/RW5kQ2FsbGJhY2ssXG4gICAgcHJldmlvdXNBbmltYXRpb246ID9BbmltYXRpb24sXG4gICAgYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSxcbiAgKTogdm9pZCB7fVxuICBzdG9wKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9fbmF0aXZlSWQpIHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5zdG9wQW5pbWF0aW9uKHRoaXMuX19uYXRpdmVJZCk7XG4gICAgfVxuICB9XG4gIF9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCk6IGFueSB7XG4gICAgLy8gU3ViY2xhc3NlcyB0aGF0IGhhdmUgY29ycmVzcG9uZGluZyBhbmltYXRpb24gaW1wbGVtZW50YXRpb24gZG9uZSBpbiBuYXRpdmVcbiAgICAvLyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2RcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgYW5pbWF0aW9uIHR5cGUgY2Fubm90IGJlIG9mZmxvYWRlZCB0byBuYXRpdmUnKTtcbiAgfVxuICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIHN1YmNsYXNzZXMgdG8gbWFrZSBzdXJlIG9uRW5kIGlzIG9ubHkgY2FsbGVkIG9uY2UuXG4gIF9fZGVib3VuY2VkT25FbmQocmVzdWx0OiBFbmRSZXN1bHQpOiB2b2lkIHtcbiAgICBjb25zdCBvbkVuZCA9IHRoaXMuX19vbkVuZDtcbiAgICB0aGlzLl9fb25FbmQgPSBudWxsO1xuICAgIG9uRW5kICYmIG9uRW5kKHJlc3VsdCk7XG4gIH1cbiAgX19zdGFydE5hdGl2ZUFuaW1hdGlvbihhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlKTogdm9pZCB7XG4gICAgYW5pbWF0ZWRWYWx1ZS5fX21ha2VOYXRpdmUoKTtcbiAgICB0aGlzLl9fbmF0aXZlSWQgPSBOYXRpdmVBbmltYXRlZEhlbHBlci5nZW5lcmF0ZU5ld0FuaW1hdGlvbklkKCk7XG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0YXJ0QW5pbWF0aW5nTm9kZShcbiAgICAgIHRoaXMuX19uYXRpdmVJZCxcbiAgICAgIGFuaW1hdGVkVmFsdWUuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgIHRoaXMuX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKSxcbiAgICAgIHRoaXMuX19kZWJvdW5jZWRPbkVuZC5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRpb247XG4iXX0=