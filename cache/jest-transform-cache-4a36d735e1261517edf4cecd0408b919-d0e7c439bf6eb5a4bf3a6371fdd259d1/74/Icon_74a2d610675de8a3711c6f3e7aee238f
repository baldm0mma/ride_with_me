417333e0903e068f38a5239ced7eaf48
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isEqualIcon = exports.isValidIcon = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var MaterialIcons;

try {
  MaterialIcons = require("@expo/vector-icons/MaterialIcons").default;
} catch (e) {
  if (global.__expo && global.__expo.Icon && global.__expo.Icon.MaterialIcons) {
    MaterialIcons = global.__expo.Icon.MaterialIcons;
  } else {
    var isErrorLogged = false;

    MaterialIcons = function MaterialIcons(_ref) {
      var name = _ref.name,
          color = _ref.color,
          size = _ref.size,
          rest = (0, _objectWithoutProperties2.default)(_ref, ["name", "color", "size"]);

      if (!isErrorLogged) {
        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
          console.error(e);
        }

        console.warn("Tried to use the icon '" + name + "' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.", "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.");
        isErrorLogged = true;
      }

      return React.createElement(_reactNative.Text, (0, _extends2.default)({}, rest, {
        style: [styles.icon, {
          color: color,
          fontSize: size
        }],
        pointerEvents: "none"
      }), "\u25A1");
    };
  }
}

var isImageSource = function isImageSource(source) {
  return typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' || typeof source === 'number' || _reactNative.Platform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source));
};

var getIconId = function getIconId(source) {
  if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {
    return source.uri;
  }

  return source;
};

var isValidIcon = function isValidIcon(source) {
  return typeof source === 'string' || isImageSource(source);
};

exports.isValidIcon = isValidIcon;

var isEqualIcon = function isEqualIcon(a, b) {
  return a === b || getIconId(a) === getIconId(b);
};

exports.isEqualIcon = isEqualIcon;

var Icon = function Icon(_ref2) {
  var source = _ref2.source,
      color = _ref2.color,
      size = _ref2.size,
      rest = (0, _objectWithoutProperties2.default)(_ref2, ["source", "color", "size"]);
  var direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr' : source.direction : null;
  var s = typeof source === 'object' && source.direction && source.source ? source.source : source;
  var accessibilityProps = _reactNative.Platform.OS === 'web' ? {
    role: 'img',
    focusable: false
  } : {
    accessibilityElementsHidden: true,
    importantForAccessibility: 'no-hide-descendants'
  };

  if (isImageSource(s)) {
    return React.createElement(_reactNative.Image, (0, _extends2.default)({}, rest, {
      source: s,
      style: [{
        transform: [{
          scaleX: direction === 'rtl' ? -1 : 1
        }]
      }, {
        width: size,
        height: size,
        tintColor: color,
        resizeMode: 'contain'
      }]
    }, accessibilityProps));
  } else if (typeof s === 'string') {
    return React.createElement(MaterialIcons, (0, _extends2.default)({}, rest, {
      name: s,
      color: color,
      size: size,
      style: [{
        transform: [{
          scaleX: direction === 'rtl' ? -1 : 1
        }]
      }, styles.icon],
      pointerEvents: "none"
    }, accessibilityProps));
  } else if (typeof s === 'function') {
    return s({
      color: color,
      size: size,
      direction: direction
    });
  }

  return null;
};

var _default = Icon;
exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  icon: {
    backgroundColor: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,