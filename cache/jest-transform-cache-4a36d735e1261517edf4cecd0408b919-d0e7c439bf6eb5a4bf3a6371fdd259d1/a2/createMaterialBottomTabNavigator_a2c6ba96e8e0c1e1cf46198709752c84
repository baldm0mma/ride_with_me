be1cf97af73f907c2961dff9aa4cf9c6
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _core = require("@react-navigation/core");

var _reactNativePaper = require("react-native-paper");

var _reactNavigationTabs = require("react-navigation-tabs");

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

var BottomNavigationView = function (_React$Component) {
  (0, _inherits2.default)(BottomNavigationView, _React$Component);

  function BottomNavigationView() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, BottomNavigationView);

    var _temp;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(BottomNavigationView)).call.apply(_getPrototypeOf2, [this].concat(args))), _this._getColor = function (_ref) {
      var route = _ref.route;
      var descriptors = _this.props.descriptors;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      if (_this.context === 'dark' && options.tabBarColorDark) {
        return options.tabBarColorDark;
      } else if (_this.tabBarColorLight) {
        return options.tabBarColorLight;
      } else {
        return options.tabBarColor;
      }
    }, _this._getActiveTintColor = function () {
      var _this$props = _this.props,
          activeTintColor = _this$props.activeTintColor,
          activeTintColorLight = _this$props.activeTintColorLight,
          activeTintColorDark = _this$props.activeTintColorDark;

      if (_this.context === 'dark' && activeTintColorDark) {
        return activeTintColorDark;
      } else if (activeTintColorLight) {
        return activeTintColorLight;
      } else {
        return activeTintColor;
      }
    }, _this._getInactiveTintColor = function () {
      var _this$props2 = _this.props,
          inactiveTintColor = _this$props2.inactiveTintColor,
          inactiveTintColorLight = _this$props2.inactiveTintColorLight,
          inactiveTintColorDark = _this$props2.inactiveTintColorDark;

      if (_this.context === 'dark' && inactiveTintColorDark) {
        return inactiveTintColorDark;
      } else if (inactiveTintColorLight) {
        return inactiveTintColorLight;
      } else {
        return inactiveTintColor;
      }
    }, _this._getBarStyle = function () {
      var _this$props3 = _this.props,
          barStyle = _this$props3.barStyle,
          barStyleLight = _this$props3.barStyleLight,
          barStyleDark = _this$props3.barStyleDark;

      if (_this.context === 'dark' && barStyleDark) {
        return barStyleDark;
      } else if (barStyleLight) {
        return barStyleLight;
      } else {
        return barStyle;
      }
    }, _this._renderIcon = function (_ref2) {
      var route = _ref2.route,
          focused = _ref2.focused,
          color = _ref2.color;
      return _this.props.renderIcon({
        route: route,
        focused: focused,
        tintColor: color
      });
    }, _temp));
  }

  (0, _createClass2.default)(BottomNavigationView, [{
    key: "_isVisible",
    value: function _isVisible() {
      var _this$props4 = this.props,
          navigation = _this$props4.navigation,
          descriptors = _this$props4.descriptors;
      var state = navigation.state;
      var route = state.routes[state.index];
      var options = descriptors[route.key].options;
      return options.tabBarVisible;
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          navigation = _props.navigation,
          descriptors = _props.descriptors,
          rest = _objectWithoutProperties(_props, ['navigation', 'descriptors']);

      var activeTintColor = this._getActiveTintColor();

      var inactiveTintColor = this._getInactiveTintColor();

      var barStyle = this._getBarStyle();

      var isVisible = this._isVisible();

      var extraStyle = typeof isVisible === 'boolean' ? {
        display: isVisible ? null : 'none'
      } : null;
      return React.createElement(_reactNativePaper.BottomNavigation, _extends({}, rest, {
        activeColor: activeTintColor,
        inactiveColor: inactiveTintColor,
        renderIcon: this._renderIcon,
        barStyle: [barStyle, extraStyle],
        navigationState: navigation.state,
        getColor: this._getColor
      }));
    }
  }]);
  return BottomNavigationView;
}(React.Component);

BottomNavigationView.contextType = _core.ThemeContext;

var _default = (0, _reactNavigationTabs.createTabNavigator)(BottomNavigationView);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,